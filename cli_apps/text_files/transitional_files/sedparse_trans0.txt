

A translation from C to Python of GNU sed's parser for sed scripts.
"After running sedparse in your sed script, the resulting """
""" is available in different formats:"
"For a complete reference on how the different sed commands are mapped by the parser, see:"
"I copied the original code in C and translated everything to Python, line by line."
"To make it feasible to keep this code updated with future GNU sed code, this is a literal translation, trying to mimic as much as possible of the original code. That includes using the same API, same logic, same variable and method names and same data structures. Pythonic code? Sorry, not here."
The accuracy of the parser is checked by extensive unit tests in 
.
Sedparse was translated from this GNU sed version:
"Alternatively, you can just download and run the "
" file, since it is self-contained with no external dependencies."
"The informed sed script will be parsed and checked for syntax errors. If everything is fine, a JSON representation of the script is sent to STDOUT."
"Just like in sed, you can inform the sed script using one or more "
 options:
Or you can inform the sed script as a file argument using 
:
Or even as text coming from STDIN when using the special 
 file:
Use 
 to parse a string as a sed script. You must inform a list that will be appended in-place with the parsed commands.
Each sed command is represented by a 
 instance.
You can 
" each command, or any of its inner structs, to get their ""human readable"" representation."
Use 
 to convert a command into a Python dictionary.
Use 
 to convert a command into JSON.
Have fun!


A translation from C to Python of GNU sed's parser for sed scripts.
"After running sedparse in your sed script, the resulting """
""" is available in different formats:"
"For a complete reference on how the different sed commands are mapped by the parser, see:"
"I copied the original code in C and translated everything to Python, line by line."
"To make it feasible to keep this code updated with future GNU sed code, this is a literal translation, trying to mimic as much as possible of the original code. That includes using the same API, same logic, same variable and method names and same data structures. Pythonic code? Sorry, not here."
The accuracy of the parser is checked by extensive unit tests in 
.
Sedparse was translated from this GNU sed version:
"Alternatively, you can just download and run the "
" file, since it is self-contained with no external dependencies."
"The informed sed script will be parsed and checked for syntax errors. If everything is fine, a JSON representation of the script is sent to STDOUT."
"Just like in sed, you can inform the sed script using one or more "
 options:
Or you can inform the sed script as a file argument using 
:
Or even as text coming from STDIN when using the special 
 file:
Use 
 to parse a string as a sed script. You must inform a list that will be appended in-place with the parsed commands.
Each sed command is represented by a 
 instance.
You can 
" each command, or any of its inner structs, to get their ""human readable"" representation."
Use 
 to convert a command into a Python dictionary.
Use 
 to convert a command into JSON.
Have fun!


A translation from C to Python of GNU sed's parser for sed scripts.
"After running sedparse in your sed script, the resulting """
""" is available in different formats:"
"For a complete reference on how the different sed commands are mapped by the parser, see:"
"I copied the original code in C and translated everything to Python, line by line."
"To make it feasible to keep this code updated with future GNU sed code, this is a literal translation, trying to mimic as much as possible of the original code. That includes using the same API, same logic, same variable and method names and same data structures. Pythonic code? Sorry, not here."
The accuracy of the parser is checked by extensive unit tests in 
.
Sedparse was translated from this GNU sed version:
"Alternatively, you can just download and run the "
" file, since it is self-contained with no external dependencies."
"The informed sed script will be parsed and checked for syntax errors. If everything is fine, a JSON representation of the script is sent to STDOUT."
"Just like in sed, you can inform the sed script using one or more "
 options:
Or you can inform the sed script as a file argument using 
:
Or even as text coming from STDIN when using the special 
 file:
Use 
 to parse a string as a sed script. You must inform a list that will be appended in-place with the parsed commands.
Each sed command is represented by a 
 instance.
You can 
" each command, or any of its inner structs, to get their ""human readable"" representation."
Use 
 to convert a command into a Python dictionary.
Use 
 to convert a command into JSON.
Have fun!


A translation from C to Python of GNU sed's parser for sed scripts.
"After running sedparse in your sed script, the resulting """
""" is available in different formats:"
"For a complete reference on how the different sed commands are mapped by the parser, see:"
"I copied the original code in C and translated everything to Python, line by line."
"To make it feasible to keep this code updated with future GNU sed code, this is a literal translation, trying to mimic as much as possible of the original code. That includes using the same API, same logic, same variable and method names and same data structures. Pythonic code? Sorry, not here."
The accuracy of the parser is checked by extensive unit tests in 
.
Sedparse was translated from this GNU sed version:
"Alternatively, you can just download and run the "
" file, since it is self-contained with no external dependencies."
"The informed sed script will be parsed and checked for syntax errors. If everything is fine, a JSON representation of the script is sent to STDOUT."
"Just like in sed, you can inform the sed script using one or more "
 options:
Or you can inform the sed script as a file argument using 
:
Or even as text coming from STDIN when using the special 
 file:
Use 
 to parse a string as a sed script. You must inform a list that will be appended in-place with the parsed commands.
Each sed command is represented by a 
 instance.
You can 
" each command, or any of its inner structs, to get their ""human readable"" representation."
Use 
 to convert a command into a Python dictionary.
Use 
 to convert a command into JSON.
Have fun!
