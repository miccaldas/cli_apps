description is an Apache2 licensed ",written in pure-Python, and fast as C-extensions.""Python’s standard library is great until you need a sorted collectionstype. Many will attest that you can get really far without one, but the momentyou "" a sorted list, sorted dict, or sorted set, you’re facedwith a dozen different implementations, most using C-extensions without greatdocumentation and benchmarking.""In Python, we can do better. And we can do it in pure-Python!""All of the operations shown above run in faster than linear time. The abovedemo also takes nearly a gigabyte of memory to run. When the sorted list ismultiplied by ten million, it stores ten million references to each of “a”through “e”. Each reference requires eight bytes in the sortedcontainer. That’s pretty hard to beat as it’s the cost of a pointer to eachobject. It’s also 66% less overhead than a typical binary tree implementation(e.g. Red-Black Tree, AVL-Tree, AA-Tree, Splay-Tree, Treap, etc.) for whichevery node must also store two pointers to children nodes."" takes all of the work out of Python sorted collections -making your deployment and use of Python easy. There’s no need to install a Ccompiler or pre-build and distribute custom extensions. Performance is afeature and testing has 100% coverage with unit tests and hours of stress."description is an Apache2 licensed ",written in pure-Python, and fast as C-extensions.""Python’s standard library is great until you need a sorted collectionstype. Many will attest that you can get really far without one, but the momentyou "" a sorted list, sorted dict, or sorted set, you’re facedwith a dozen different implementations, most using C-extensions without greatdocumentation and benchmarking.""In Python, we can do better. And we can do it in pure-Python!""All of the operations shown above run in faster than linear time. The abovedemo also takes nearly a gigabyte of memory to run. When the sorted list ismultiplied by ten million, it stores ten million references to each of “a”through “e”. Each reference requires eight bytes in the sortedcontainer. That’s pretty hard to beat as it’s the cost of a pointer to eachobject. It’s also 66% less overhead than a typical binary tree implementation(e.g. Red-Black Tree, AVL-Tree, AA-Tree, Splay-Tree, Treap, etc.) for whichevery node must also store two pointers to children nodes."" takes all of the work out of Python sorted collections -making your deployment and use of Python easy. There’s no need to install a Ccompiler or pre-build and distribute custom extensions. Performance is afeature and testing has 100% coverage with unit tests and hours of stress."description is an Apache2 licensed ",written in pure-Python, and fast as C-extensions.""Python’s standard library is great until you need a sorted collectionstype. Many will attest that you can get really far without one, but the momentyou "" a sorted list, sorted dict, or sorted set, you’re facedwith a dozen different implementations, most using C-extensions without greatdocumentation and benchmarking.""In Python, we can do better. And we can do it in pure-Python!""All of the operations shown above run in faster than linear time. The abovedemo also takes nearly a gigabyte of memory to run. When the sorted list ismultiplied by ten million, it stores ten million references to each of “a”through “e”. Each reference requires eight bytes in the sortedcontainer. That’s pretty hard to beat as it’s the cost of a pointer to eachobject. It’s also 66% less overhead than a typical binary tree implementation(e.g. Red-Black Tree, AVL-Tree, AA-Tree, Splay-Tree, Treap, etc.) for whichevery node must also store two pointers to children nodes."" takes all of the work out of Python sorted collections -making your deployment and use of Python easy. There’s no need to install a Ccompiler or pre-build and distribute custom extensions. Performance is afeature and testing has 100% coverage with unit tests and hours of stress."description is an Apache2 licensed ",written in pure-Python, and fast as C-extensions.""Python’s standard library is great until you need a sorted collectionstype. Many will attest that you can get really far without one, but the momentyou "" a sorted list, sorted dict, or sorted set, you’re facedwith a dozen different implementations, most using C-extensions without greatdocumentation and benchmarking.""In Python, we can do better. And we can do it in pure-Python!""All of the operations shown above run in faster than linear time. The abovedemo also takes nearly a gigabyte of memory to run. When the sorted list ismultiplied by ten million, it stores ten million references to each of “a”through “e”. Each reference requires eight bytes in the sortedcontainer. That’s pretty hard to beat as it’s the cost of a pointer to eachobject. It’s also 66% less overhead than a typical binary tree implementation(e.g. Red-Black Tree, AVL-Tree, AA-Tree, Splay-Tree, Treap, etc.) for whichevery node must also store two pointers to children nodes."" takes all of the work out of Python sorted collections -making your deployment and use of Python easy. There’s no need to install a Ccompiler or pre-build and distribute custom extensions. Performance is afeature and testing has 100% coverage with unit tests and hours of stress."