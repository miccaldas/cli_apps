

"Pretty-print tabular data in Python, a library and a command-line
utility."
The main use cases of the library are:
"To install the Python library and the command line utility, run:"
The command line utility will be installed as 
 to 
" on
Linux (e.g. "
); or as 
 to 
" in your
Python installation on Windows (e.g.
"
).
You may consider installing the library only for the current user:
"In this case the command line utility will be installed to
"
" on Linux and to
"
 on Windows.
To install just the library on Unix-like operating systems:
On Windows:
"The module provides just one function, "
", which takes a list of
lists or another tabular data type as the first argument, and outputs a
nicely formatted plain-text table:"
The following tabular data types are supported:
Examples in this file use Python2. Tabulate supports Python3 too.
The second optional argument named 
" defines a list of column
headers to be used:"
If 
", then the first row of data is used:"
If 
", then the keys of a dictionary/dataframe, or column
indices are used. It also works for NumPy record arrays and lists of
dictionaries or named tuples:"
"By default, only pandas.DataFrame tables have an additional column
called row index. To add a similar column to any other type of table,
pass "
 or 
 argument to 
".
To suppress row indices for all types of data, pass "
"
or "
". To add a custom row index column, pass
"
", where "
 is some iterable:
"There is more than one way to format a table in plain text. The third
optional argument named "
 defines how the table is formatted.
Supported table formats are:
 tables do not use any pseudo-graphics to draw lines:
" is the default format (the default may change in future
versions). It corresponds to "
 in 
:
" follows the conventions of GitHub flavored Markdown. It
corresponds to the "
 format without alignment colons:
" is like tables formatted by Emacs'
"
" package. It corresponds to
"
 in Pandoc Markdown extensions:
 draws a grid using box-drawing characters:
 is like tables formatted by Presto cli:
" attempts to be close to the format emitted by the PrettyTables
library:"
 is like tables formatted by Postgres' psql cli:
 follows the conventions of 
" extension.
It corresponds to "
" in Pandoc. This format uses colons to
indicate column alignment:"
" follows the conventions of Emacs
"
", and is editable also
in the minor orgtbl-mode. Hence its name:"
 follows the conventions of Atlassian Jira markup language:
" formats data like a simple table of the
"
"
format:"
" format produces a table markup used in
"
" and on other
MediaWiki-based sites:"
" format produces a table markup used in
"
 wikis:
 format produces a table markup used in Youtrack tickets:
" format produces a table markup used in
"
 format:
" produces standard HTML markup as an html.escape'd str
with a ."
" method so that Jupyter Lab and Notebook display the HTML
and a .str property so that the raw HTML remains accessible.
"
 table format can be used if an unescaped HTML is required:
 format creates a 
" environment for LaTeX markup,
replacing special characters like "
 or 
" to their LaTeX
correspondents:"
 behaves like 
" but does not escape LaTeX commands and
special characters."
 creates a 
" environment for LaTeX markup using
spacing and style from the "
 package.
" creates a table that can stretch along multiple pages,
using the "
 package.
" is smart about column alignment. It detects columns which
contain only numbers, and aligns them by a decimal point (or flushes
them to the right if they appear to be integers). Text columns are
flushed to the left."
You can override the default alignment with 
 and 
"
named arguments. Possible column alignments are: "
", "
",
"
", "
" (only for numbers), and "
 (to disable alignment).
"Aligning by a decimal point works best when you need to compare numbers
at a glance:"
Compare this with a more common right alignment:
For 
", anything which can be parsed as a number is a number.
Even numbers represented as strings are aligned properly. This feature
comes in handy when reading a mixed table of text and numbers from a
file:"
To disable this feature use 
.
" allows a custom column alignment to override the above. The
"
 argument can be a list or a tuple of 
" named
arguments. Possible column alignments are: "
", "
", "
",
"
" (only for numbers), and "
" (to disable alignment).
Omitting an alignment uses the default. For example:"
" allows to define custom number formatting applied to all
columns of decimal numbers. Use "
 named argument:
" argument can be a list or a tuple of format strings, one per
column, in which case every column may have different number formatting:"
"By default, "
" removes leading and trailing whitespace from text
columns. To disable whitespace removal, set the global module-level flag
"
:
"To properly align tables which contain wide characters (typically
fullwidth glyphs from Chinese, Japanese or Korean languages), the user
should install "
" library. To install it together with
"
:
Wide character support is enabled automatically if 
" library is
already installed. To disable wide characters support without
uninstalling "
", set the global module-level flag
"
:
"Most table formats support multiline cell text (text containing newline
characters). The newline characters are honored as line break
characters."
Multiline cells are supported for data rows and for header rows.
"Further automatic line breaks are not inserted. Of course, some output
formats such as latex or html handle automatic formatting of the cell
content on their own, but for those that don't, the newline characters
in the input cell text are the only means to break a line in cell text."
"Note that some output formats (e.g. simple, or plain) do not represent
row delimiters, so that the representation of multiline cells in such
formats may be ambiguous to the reader."
"The following examples of formatted output use the following table with
a multiline cell, and headers with a multiline cell:"
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
Multiline cells are not well supported for the other table formats.
"Such features as decimal point alignment and trying to parse everything
as a number imply that "
:
"It may not be suitable for serializing really big tables (but who's
going to do that, anyway?) or printing tables in performance sensitive
applications. "
" is about two orders of magnitude slower than
simply joining lists of values with a tab, comma, or other separator."
"At the same time, "
" is comparable to other table
pretty-printers. Given a 10x10 table (a list of lists) of mixed text and
numeric data, "
 appears to be slower than 
", and
faster than "
 and 
" The following mini-benchmark
was run in Python 3.8.3 in Windows 10 x64:"
The full version history can be found at the 
.
"Contributions should include tests and an explanation for the changes
they propose. Documentation (examples, docstrings, README.md) should be
updated accordingly."
This project uses 
" testing
framework and "
" to automate testing in
different environments. Add tests to one of the files in the "
"
folder."
"To run tests on all supported Python versions, make sure all Python
interpreters, "
 and 
" are installed, then run "
" in the root
of the project source tree."
On Linux 
 expects to find executables like 
",
"
", "
" etc. On Windows it looks for
"
", "
" and
"
 respectively.
"To test only some Python environments, use "
" option. For example, to
test only against Python 2.7 and Python 3.8, run:"
in the root of the project source tree.
"To enable NumPy and Pandas tests, run:"
"(this may take a long time the first time, because NumPy and Pandas will
have to be installed in the new virtual environments)"
To fix code formatting:
See 
" file to learn how to use to test
individual Python versions."
"Sergey Astanin, Pau Tallada Crespí, Erwin Marsi, Mik Kocikowski, Bill
Ryder, Zach Dwiel, Frederik Rietdijk, Philipp Bogensberger, Greg
(anonymous), Stefan Tatschner, Emiel van Miltenburg, Brandon Bennett,
Amjith Ramanujam, Jan Schulz, Simon Percivall, Javier Santacruz
López-Cepero, Sam Denton, Alexey Ziyangirov, acaird, Cesar Sanchez,
naught101, John Vandenberg, Zack Dever, Christian Clauss, Benjamin
Maier, Andy MacKinlay, Thomas Roten, Jue Wang, Joe King, Samuel Phan,
Nick Satterly, Daniel Robbins, Dmitry B, Lars Butler, Andreas Maier,
Dick Marinus, Sébastien Celles, Yago González, Andrew Gaul, Wim Glenn,
Jean Michel Rouly, Tim Gates, John Vandenberg, Sorin Sbarnea,
Wes Turner, Andrew Tija, Marco Gorelli, Sean McGinnis, danja100,
endolith, Dominic Davis-Foster, pavlocat, Daniel Aslau, paulc,
Felix Yan, Shane Loretz, Frank Busse, Harsh Singh, Derek Weitzel,
Vladimir Vrzić, 서승우 (chrd5273), Georgy Frolov, Christian Cwienk,
Bart Broere, Vilhelm Prytz."


"Pretty-print tabular data in Python, a library and a command-line
utility."
The main use cases of the library are:
"To install the Python library and the command line utility, run:"
The command line utility will be installed as 
 to 
" on
Linux (e.g. "
); or as 
 to 
" in your
Python installation on Windows (e.g.
"
).
You may consider installing the library only for the current user:
"In this case the command line utility will be installed to
"
" on Linux and to
"
 on Windows.
To install just the library on Unix-like operating systems:
On Windows:
"The module provides just one function, "
", which takes a list of
lists or another tabular data type as the first argument, and outputs a
nicely formatted plain-text table:"
The following tabular data types are supported:
Examples in this file use Python2. Tabulate supports Python3 too.
The second optional argument named 
" defines a list of column
headers to be used:"
If 
", then the first row of data is used:"
If 
", then the keys of a dictionary/dataframe, or column
indices are used. It also works for NumPy record arrays and lists of
dictionaries or named tuples:"
"By default, only pandas.DataFrame tables have an additional column
called row index. To add a similar column to any other type of table,
pass "
 or 
 argument to 
".
To suppress row indices for all types of data, pass "
"
or "
". To add a custom row index column, pass
"
", where "
 is some iterable:
"There is more than one way to format a table in plain text. The third
optional argument named "
 defines how the table is formatted.
Supported table formats are:
 tables do not use any pseudo-graphics to draw lines:
" is the default format (the default may change in future
versions). It corresponds to "
 in 
:
" follows the conventions of GitHub flavored Markdown. It
corresponds to the "
 format without alignment colons:
" is like tables formatted by Emacs'
"
" package. It corresponds to
"
 in Pandoc Markdown extensions:
 draws a grid using box-drawing characters:
 is like tables formatted by Presto cli:
" attempts to be close to the format emitted by the PrettyTables
library:"
 is like tables formatted by Postgres' psql cli:
 follows the conventions of 
" extension.
It corresponds to "
" in Pandoc. This format uses colons to
indicate column alignment:"
" follows the conventions of Emacs
"
", and is editable also
in the minor orgtbl-mode. Hence its name:"
 follows the conventions of Atlassian Jira markup language:
" formats data like a simple table of the
"
"
format:"
" format produces a table markup used in
"
" and on other
MediaWiki-based sites:"
" format produces a table markup used in
"
 wikis:
 format produces a table markup used in Youtrack tickets:
" format produces a table markup used in
"
 format:
" produces standard HTML markup as an html.escape'd str
with a ."
" method so that Jupyter Lab and Notebook display the HTML
and a .str property so that the raw HTML remains accessible.
"
 table format can be used if an unescaped HTML is required:
 format creates a 
" environment for LaTeX markup,
replacing special characters like "
 or 
" to their LaTeX
correspondents:"
 behaves like 
" but does not escape LaTeX commands and
special characters."
 creates a 
" environment for LaTeX markup using
spacing and style from the "
 package.
" creates a table that can stretch along multiple pages,
using the "
 package.
" is smart about column alignment. It detects columns which
contain only numbers, and aligns them by a decimal point (or flushes
them to the right if they appear to be integers). Text columns are
flushed to the left."
You can override the default alignment with 
 and 
"
named arguments. Possible column alignments are: "
", "
",
"
", "
" (only for numbers), and "
 (to disable alignment).
"Aligning by a decimal point works best when you need to compare numbers
at a glance:"
Compare this with a more common right alignment:
For 
", anything which can be parsed as a number is a number.
Even numbers represented as strings are aligned properly. This feature
comes in handy when reading a mixed table of text and numbers from a
file:"
To disable this feature use 
.
" allows a custom column alignment to override the above. The
"
 argument can be a list or a tuple of 
" named
arguments. Possible column alignments are: "
", "
", "
",
"
" (only for numbers), and "
" (to disable alignment).
Omitting an alignment uses the default. For example:"
" allows to define custom number formatting applied to all
columns of decimal numbers. Use "
 named argument:
" argument can be a list or a tuple of format strings, one per
column, in which case every column may have different number formatting:"
"By default, "
" removes leading and trailing whitespace from text
columns. To disable whitespace removal, set the global module-level flag
"
:
"To properly align tables which contain wide characters (typically
fullwidth glyphs from Chinese, Japanese or Korean languages), the user
should install "
" library. To install it together with
"
:
Wide character support is enabled automatically if 
" library is
already installed. To disable wide characters support without
uninstalling "
", set the global module-level flag
"
:
"Most table formats support multiline cell text (text containing newline
characters). The newline characters are honored as line break
characters."
Multiline cells are supported for data rows and for header rows.
"Further automatic line breaks are not inserted. Of course, some output
formats such as latex or html handle automatic formatting of the cell
content on their own, but for those that don't, the newline characters
in the input cell text are the only means to break a line in cell text."
"Note that some output formats (e.g. simple, or plain) do not represent
row delimiters, so that the representation of multiline cells in such
formats may be ambiguous to the reader."
"The following examples of formatted output use the following table with
a multiline cell, and headers with a multiline cell:"
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
Multiline cells are not well supported for the other table formats.
"Such features as decimal point alignment and trying to parse everything
as a number imply that "
:
"It may not be suitable for serializing really big tables (but who's
going to do that, anyway?) or printing tables in performance sensitive
applications. "
" is about two orders of magnitude slower than
simply joining lists of values with a tab, comma, or other separator."
"At the same time, "
" is comparable to other table
pretty-printers. Given a 10x10 table (a list of lists) of mixed text and
numeric data, "
 appears to be slower than 
", and
faster than "
 and 
" The following mini-benchmark
was run in Python 3.8.3 in Windows 10 x64:"
The full version history can be found at the 
.
"Contributions should include tests and an explanation for the changes
they propose. Documentation (examples, docstrings, README.md) should be
updated accordingly."
This project uses 
" testing
framework and "
" to automate testing in
different environments. Add tests to one of the files in the "
"
folder."
"To run tests on all supported Python versions, make sure all Python
interpreters, "
 and 
" are installed, then run "
" in the root
of the project source tree."
On Linux 
 expects to find executables like 
",
"
", "
" etc. On Windows it looks for
"
", "
" and
"
 respectively.
"To test only some Python environments, use "
" option. For example, to
test only against Python 2.7 and Python 3.8, run:"
in the root of the project source tree.
"To enable NumPy and Pandas tests, run:"
"(this may take a long time the first time, because NumPy and Pandas will
have to be installed in the new virtual environments)"
To fix code formatting:
See 
" file to learn how to use to test
individual Python versions."
"Sergey Astanin, Pau Tallada Crespí, Erwin Marsi, Mik Kocikowski, Bill
Ryder, Zach Dwiel, Frederik Rietdijk, Philipp Bogensberger, Greg
(anonymous), Stefan Tatschner, Emiel van Miltenburg, Brandon Bennett,
Amjith Ramanujam, Jan Schulz, Simon Percivall, Javier Santacruz
López-Cepero, Sam Denton, Alexey Ziyangirov, acaird, Cesar Sanchez,
naught101, John Vandenberg, Zack Dever, Christian Clauss, Benjamin
Maier, Andy MacKinlay, Thomas Roten, Jue Wang, Joe King, Samuel Phan,
Nick Satterly, Daniel Robbins, Dmitry B, Lars Butler, Andreas Maier,
Dick Marinus, Sébastien Celles, Yago González, Andrew Gaul, Wim Glenn,
Jean Michel Rouly, Tim Gates, John Vandenberg, Sorin Sbarnea,
Wes Turner, Andrew Tija, Marco Gorelli, Sean McGinnis, danja100,
endolith, Dominic Davis-Foster, pavlocat, Daniel Aslau, paulc,
Felix Yan, Shane Loretz, Frank Busse, Harsh Singh, Derek Weitzel,
Vladimir Vrzić, 서승우 (chrd5273), Georgy Frolov, Christian Cwienk,
Bart Broere, Vilhelm Prytz."


"Pretty-print tabular data in Python, a library and a command-line
utility."
The main use cases of the library are:
"To install the Python library and the command line utility, run:"
The command line utility will be installed as 
 to 
" on
Linux (e.g. "
); or as 
 to 
" in your
Python installation on Windows (e.g.
"
).
You may consider installing the library only for the current user:
"In this case the command line utility will be installed to
"
" on Linux and to
"
 on Windows.
To install just the library on Unix-like operating systems:
On Windows:
"The module provides just one function, "
", which takes a list of
lists or another tabular data type as the first argument, and outputs a
nicely formatted plain-text table:"
The following tabular data types are supported:
Examples in this file use Python2. Tabulate supports Python3 too.
The second optional argument named 
" defines a list of column
headers to be used:"
If 
", then the first row of data is used:"
If 
", then the keys of a dictionary/dataframe, or column
indices are used. It also works for NumPy record arrays and lists of
dictionaries or named tuples:"
"By default, only pandas.DataFrame tables have an additional column
called row index. To add a similar column to any other type of table,
pass "
 or 
 argument to 
".
To suppress row indices for all types of data, pass "
"
or "
". To add a custom row index column, pass
"
", where "
 is some iterable:
"There is more than one way to format a table in plain text. The third
optional argument named "
 defines how the table is formatted.
Supported table formats are:
 tables do not use any pseudo-graphics to draw lines:
" is the default format (the default may change in future
versions). It corresponds to "
 in 
:
" follows the conventions of GitHub flavored Markdown. It
corresponds to the "
 format without alignment colons:
" is like tables formatted by Emacs'
"
" package. It corresponds to
"
 in Pandoc Markdown extensions:
 draws a grid using box-drawing characters:
 is like tables formatted by Presto cli:
" attempts to be close to the format emitted by the PrettyTables
library:"
 is like tables formatted by Postgres' psql cli:
 follows the conventions of 
" extension.
It corresponds to "
" in Pandoc. This format uses colons to
indicate column alignment:"
" follows the conventions of Emacs
"
", and is editable also
in the minor orgtbl-mode. Hence its name:"
 follows the conventions of Atlassian Jira markup language:
" formats data like a simple table of the
"
"
format:"
" format produces a table markup used in
"
" and on other
MediaWiki-based sites:"
" format produces a table markup used in
"
 wikis:
 format produces a table markup used in Youtrack tickets:
" format produces a table markup used in
"
 format:
" produces standard HTML markup as an html.escape'd str
with a ."
" method so that Jupyter Lab and Notebook display the HTML
and a .str property so that the raw HTML remains accessible.
"
 table format can be used if an unescaped HTML is required:
 format creates a 
" environment for LaTeX markup,
replacing special characters like "
 or 
" to their LaTeX
correspondents:"
 behaves like 
" but does not escape LaTeX commands and
special characters."
 creates a 
" environment for LaTeX markup using
spacing and style from the "
 package.
" creates a table that can stretch along multiple pages,
using the "
 package.
" is smart about column alignment. It detects columns which
contain only numbers, and aligns them by a decimal point (or flushes
them to the right if they appear to be integers). Text columns are
flushed to the left."
You can override the default alignment with 
 and 
"
named arguments. Possible column alignments are: "
", "
",
"
", "
" (only for numbers), and "
 (to disable alignment).
"Aligning by a decimal point works best when you need to compare numbers
at a glance:"
Compare this with a more common right alignment:
For 
", anything which can be parsed as a number is a number.
Even numbers represented as strings are aligned properly. This feature
comes in handy when reading a mixed table of text and numbers from a
file:"
To disable this feature use 
.
" allows a custom column alignment to override the above. The
"
 argument can be a list or a tuple of 
" named
arguments. Possible column alignments are: "
", "
", "
",
"
" (only for numbers), and "
" (to disable alignment).
Omitting an alignment uses the default. For example:"
" allows to define custom number formatting applied to all
columns of decimal numbers. Use "
 named argument:
" argument can be a list or a tuple of format strings, one per
column, in which case every column may have different number formatting:"
"By default, "
" removes leading and trailing whitespace from text
columns. To disable whitespace removal, set the global module-level flag
"
:
"To properly align tables which contain wide characters (typically
fullwidth glyphs from Chinese, Japanese or Korean languages), the user
should install "
" library. To install it together with
"
:
Wide character support is enabled automatically if 
" library is
already installed. To disable wide characters support without
uninstalling "
", set the global module-level flag
"
:
"Most table formats support multiline cell text (text containing newline
characters). The newline characters are honored as line break
characters."
Multiline cells are supported for data rows and for header rows.
"Further automatic line breaks are not inserted. Of course, some output
formats such as latex or html handle automatic formatting of the cell
content on their own, but for those that don't, the newline characters
in the input cell text are the only means to break a line in cell text."
"Note that some output formats (e.g. simple, or plain) do not represent
row delimiters, so that the representation of multiline cells in such
formats may be ambiguous to the reader."
"The following examples of formatted output use the following table with
a multiline cell, and headers with a multiline cell:"
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
 tables:
Multiline cells are not well supported for the other table formats.
"Such features as decimal point alignment and trying to parse everything
as a number imply that "
:
"It may not be suitable for serializing really big tables (but who's
going to do that, anyway?) or printing tables in performance sensitive
applications. "
" is about two orders of magnitude slower than
simply joining lists of values with a tab, comma, or other separator."
"At the same time, "
" is comparable to other table
pretty-printers. Given a 10x10 table (a list of lists) of mixed text and
numeric data, "
 appears to be slower than 
", and
faster than "
 and 
" The following mini-benchmark
was run in Python 3.8.3 in Windows 10 x64:"
The full version history can be found at the 
.
"Contributions should include tests and an explanation for the changes
they propose. Documentation (examples, docstrings, README.md) should be
updated accordingly."
This project uses 
" testing
framework and "
" to automate testing in
different environments. Add tests to one of the files in the "
"
folder."
"To run tests on all supported Python versions, make sure all Python
interpreters, "
 and 
" are installed, then run "
" in the root
of the project source tree."
On Linux 
 expects to find executables like 
",
"
", "
" etc. On Windows it looks for
"
", "
" and
"
 respectively.
"To test only some Python environments, use "
" option. For example, to
test only against Python 2.7 and Python 3.8, run:"
in the root of the project source tree.
"To enable NumPy and Pandas tests, run:"
"(this may take a long time the first time, because NumPy and Pandas will
have to be installed in the new virtual environments)"
To fix code formatting:
See 
" file to learn how to use to test
individual Python versions."
"Sergey Astanin, Pau Tallada Crespí, Erwin Marsi, Mik Kocikowski, Bill
Ryder, Zach Dwiel, Frederik Rietdijk, Philipp Bogensberger, Greg
(anonymous), Stefan Tatschner, Emiel van Miltenburg, Brandon Bennett,
Amjith Ramanujam, Jan Schulz, Simon Percivall, Javier Santacruz
López-Cepero, Sam Denton, Alexey Ziyangirov, acaird, Cesar Sanchez,
naught101, John Vandenberg, Zack Dever, Christian Clauss, Benjamin
Maier, Andy MacKinlay, Thomas Roten, Jue Wang, Joe King, Samuel Phan,
Nick Satterly, Daniel Robbins, Dmitry B, Lars Butler, Andreas Maier,
Dick Marinus, Sébastien Celles, Yago González, Andrew Gaul, Wim Glenn,
Jean Michel Rouly, Tim Gates, John Vandenberg, Sorin Sbarnea,
Wes Turner, Andrew Tija, Marco Gorelli, Sean McGinnis, danja100,
endolith, Dominic Davis-Foster, pavlocat, Daniel Aslau, paulc,
Felix Yan, Shane Loretz, Frank Busse, Harsh Singh, Derek Weitzel,
Vladimir Vrzić, 서승우 (chrd5273), Georgy Frolov, Christian Cwienk,
Bart Broere, Vilhelm Prytz."
