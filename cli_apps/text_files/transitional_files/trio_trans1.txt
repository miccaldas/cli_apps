

"The Trio project’s goal is to produce a production-quality, "
",
async/await-native I/O library for Python. Like all async libraries,
its main purpose is to help you write programs that do "
 with 
". A web spider that
wants to fetch lots of pages in parallel, a web server that needs to
juggle lots of downloads and websocket connections at the same time, a
process supervisor monitoring multiple subprocesses… that sort of
thing. Compared to other libraries, Trio attempts to distinguish
itself with an obsessive focus on "
" and
"
. Concurrency is complicated; we try to make it 
"
to get things "
.
Trio was built from the ground up to take advantage of the 
", and
draws inspiration from "
", in
particular Dave Beazley’s "
".
The resulting design is radically simpler than older competitors like
"
" and
"
", yet just as capable. Trio is
the Python I/O library I always wanted; I find it makes building
I/O-oriented programs easier, less error-prone, and just plain more
fun. "
.
"This project is young and still somewhat experimental: the overall
design is solid and the existing features are fully tested and
documented, but you may encounter missing functionality or rough
edges. We "
" encourage you do use it, but you should "
" to get warning and a
chance to give feedback about any compatibility-breaking changes."
Vital statistics:


"The Trio project’s goal is to produce a production-quality, "
",
async/await-native I/O library for Python. Like all async libraries,
its main purpose is to help you write programs that do "
 with 
". A web spider that
wants to fetch lots of pages in parallel, a web server that needs to
juggle lots of downloads and websocket connections at the same time, a
process supervisor monitoring multiple subprocesses… that sort of
thing. Compared to other libraries, Trio attempts to distinguish
itself with an obsessive focus on "
" and
"
. Concurrency is complicated; we try to make it 
"
to get things "
.
Trio was built from the ground up to take advantage of the 
", and
draws inspiration from "
", in
particular Dave Beazley’s "
".
The resulting design is radically simpler than older competitors like
"
" and
"
", yet just as capable. Trio is
the Python I/O library I always wanted; I find it makes building
I/O-oriented programs easier, less error-prone, and just plain more
fun. "
.
"This project is young and still somewhat experimental: the overall
design is solid and the existing features are fully tested and
documented, but you may encounter missing functionality or rough
edges. We "
" encourage you do use it, but you should "
" to get warning and a
chance to give feedback about any compatibility-breaking changes."
Vital statistics:


"The Trio project’s goal is to produce a production-quality, "
",
async/await-native I/O library for Python. Like all async libraries,
its main purpose is to help you write programs that do "
 with 
". A web spider that
wants to fetch lots of pages in parallel, a web server that needs to
juggle lots of downloads and websocket connections at the same time, a
process supervisor monitoring multiple subprocesses… that sort of
thing. Compared to other libraries, Trio attempts to distinguish
itself with an obsessive focus on "
" and
"
. Concurrency is complicated; we try to make it 
"
to get things "
.
Trio was built from the ground up to take advantage of the 
", and
draws inspiration from "
", in
particular Dave Beazley’s "
".
The resulting design is radically simpler than older competitors like
"
" and
"
", yet just as capable. Trio is
the Python I/O library I always wanted; I find it makes building
I/O-oriented programs easier, less error-prone, and just plain more
fun. "
.
"This project is young and still somewhat experimental: the overall
design is solid and the existing features are fully tested and
documented, but you may encounter missing functionality or rough
edges. We "
" encourage you do use it, but you should "
" to get warning and a
chance to give feedback about any compatibility-breaking changes."
Vital statistics:


"The Trio project’s goal is to produce a production-quality, "
",
async/await-native I/O library for Python. Like all async libraries,
its main purpose is to help you write programs that do "
 with 
". A web spider that
wants to fetch lots of pages in parallel, a web server that needs to
juggle lots of downloads and websocket connections at the same time, a
process supervisor monitoring multiple subprocesses… that sort of
thing. Compared to other libraries, Trio attempts to distinguish
itself with an obsessive focus on "
" and
"
. Concurrency is complicated; we try to make it 
"
to get things "
.
Trio was built from the ground up to take advantage of the 
", and
draws inspiration from "
", in
particular Dave Beazley’s "
".
The resulting design is radically simpler than older competitors like
"
" and
"
", yet just as capable. Trio is
the Python I/O library I always wanted; I find it makes building
I/O-oriented programs easier, less error-prone, and just plain more
fun. "
.
"This project is young and still somewhat experimental: the overall
design is solid and the existing features are fully tested and
documented, but you may encounter missing functionality or rough
edges. We "
" encourage you do use it, but you should "
" to get warning and a
chance to give feedback about any compatibility-breaking changes."
Vital statistics:
