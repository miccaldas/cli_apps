description
 is an Apache2 licensed 
",
written in pure-Python, and fast as C-extensions."
"Python’s standard library is great until you need a sorted collections
type. Many will attest that you can get really far without one, but the moment
you "
" a sorted list, sorted dict, or sorted set, you’re faced
with a dozen different implementations, most using C-extensions without great
documentation and benchmarking."
"In Python, we can do better. And we can do it in pure-Python!"
"All of the operations shown above run in faster than linear time. The above
demo also takes nearly a gigabyte of memory to run. When the sorted list is
multiplied by ten million, it stores ten million references to each of “a”
through “e”. Each reference requires eight bytes in the sorted
container. That’s pretty hard to beat as it’s the cost of a pointer to each
object. It’s also 66% less overhead than a typical binary tree implementation
(e.g. Red-Black Tree, AVL-Tree, AA-Tree, Splay-Tree, Treap, etc.) for which
every node must also store two pointers to children nodes."
" takes all of the work out of Python sorted collections -
making your deployment and use of Python easy. There’s no need to install a C
compiler or pre-build and distribute custom extensions. Performance is a
feature and testing has 100% coverage with unit tests and hours of stress."
description
 is an Apache2 licensed 
",
written in pure-Python, and fast as C-extensions."
"Python’s standard library is great until you need a sorted collections
type. Many will attest that you can get really far without one, but the moment
you "
" a sorted list, sorted dict, or sorted set, you’re faced
with a dozen different implementations, most using C-extensions without great
documentation and benchmarking."
"In Python, we can do better. And we can do it in pure-Python!"
"All of the operations shown above run in faster than linear time. The above
demo also takes nearly a gigabyte of memory to run. When the sorted list is
multiplied by ten million, it stores ten million references to each of “a”
through “e”. Each reference requires eight bytes in the sorted
container. That’s pretty hard to beat as it’s the cost of a pointer to each
object. It’s also 66% less overhead than a typical binary tree implementation
(e.g. Red-Black Tree, AVL-Tree, AA-Tree, Splay-Tree, Treap, etc.) for which
every node must also store two pointers to children nodes."
" takes all of the work out of Python sorted collections -
making your deployment and use of Python easy. There’s no need to install a C
compiler or pre-build and distribute custom extensions. Performance is a
feature and testing has 100% coverage with unit tests and hours of stress."
description
 is an Apache2 licensed 
",
written in pure-Python, and fast as C-extensions."
"Python’s standard library is great until you need a sorted collections
type. Many will attest that you can get really far without one, but the moment
you "
" a sorted list, sorted dict, or sorted set, you’re faced
with a dozen different implementations, most using C-extensions without great
documentation and benchmarking."
"In Python, we can do better. And we can do it in pure-Python!"
"All of the operations shown above run in faster than linear time. The above
demo also takes nearly a gigabyte of memory to run. When the sorted list is
multiplied by ten million, it stores ten million references to each of “a”
through “e”. Each reference requires eight bytes in the sorted
container. That’s pretty hard to beat as it’s the cost of a pointer to each
object. It’s also 66% less overhead than a typical binary tree implementation
(e.g. Red-Black Tree, AVL-Tree, AA-Tree, Splay-Tree, Treap, etc.) for which
every node must also store two pointers to children nodes."
" takes all of the work out of Python sorted collections -
making your deployment and use of Python easy. There’s no need to install a C
compiler or pre-build and distribute custom extensions. Performance is a
feature and testing has 100% coverage with unit tests and hours of stress."
description
 is an Apache2 licensed 
",
written in pure-Python, and fast as C-extensions."
"Python’s standard library is great until you need a sorted collections
type. Many will attest that you can get really far without one, but the moment
you "
" a sorted list, sorted dict, or sorted set, you’re faced
with a dozen different implementations, most using C-extensions without great
documentation and benchmarking."
"In Python, we can do better. And we can do it in pure-Python!"
"All of the operations shown above run in faster than linear time. The above
demo also takes nearly a gigabyte of memory to run. When the sorted list is
multiplied by ten million, it stores ten million references to each of “a”
through “e”. Each reference requires eight bytes in the sorted
container. That’s pretty hard to beat as it’s the cost of a pointer to each
object. It’s also 66% less overhead than a typical binary tree implementation
(e.g. Red-Black Tree, AVL-Tree, AA-Tree, Splay-Tree, Treap, etc.) for which
every node must also store two pointers to children nodes."
" takes all of the work out of Python sorted collections -
making your deployment and use of Python easy. There’s no need to install a C
compiler or pre-build and distribute custom extensions. Performance is a
feature and testing has 100% coverage with unit tests and hours of stress."
