('attrs', '[\'description\\n\', \' is the Python package that will bring back the \\n\', \' of \\n\', \' by relieving you from the drudgery of implementing object protocols (aka \\n\', \'").\\n\', \'"\\n\', \' for Mars missions since 2020!\\n\', \'Its main goal is to help you to write \\n\', \' and \\n\', \' software without slowing down your code.\\n\', \'"For that, it gives you a class decorator and a way to declaratively define the attributes on that class:"\\n\', \'After \\n\', \' your attributes \\n\', \' gives you:\\n\', \' writing dull boilerplate code again and again and \\n\', \' runtime performance penalties.\\n\', \'"!?\\n\', \'No problem!\\n\', \'Types are entirely "\\n\', \' with \\n\', \'".\\n\', \'Simply assign "\\n\', \' to the attributes instead of annotating them with types.\\n\', \'This example uses \\n\', \'"â€™s modern APIs that have been introduced in version 20.1.0, and the "\\n\', \'" package import name that has been added in version 21.3.0.\\n\', \'The classic APIs ("\\n\', \'", "\\n\', \'", plus their serious business aliases) and the "\\n\', \' package import name will remain \\n\', \'.\\n\', \'Please check out \\n\', \' for a more in-depth explanation.\\n\']', 'https://pypi.org/project/attrs\n')
('arrow', '[\'description\\n\', \'" is a Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting dates, times and timestamps. It implements and updates the datetime type, plugging gaps in functionality and providing an intelligent module API that supports many common creation scenarios. Simply put, it helps you work with dates and times with fewer imports and a lot less code."\\n\', \'Arrow is named after the \\n\', \' and is heavily inspired by \\n\', \' and \\n\', \'.\\n\']', 'https://pypi.org/project/arrow\n')
('asttokens', '[\'description\\n\', \'The \\n\', \'" module annotates Python abstract syntax trees (ASTs) with the positions of tokens\\n\', \'and text in the source code that generated them."\\n\', \'"It makes it possible for tools that work with logical AST nodes to find the particular text that\\n\', \'resulted in those nodes, for example for automated refactoring or highlighting."\\n\']', 'https://pypi.org/project/asttokens\n')
('agate_dbf', "['description\\n', 'agate-dbf adds read support for dbf files to \\n', '.\\n', 'Important links:\\n']", 'https://pypi.org/project/agate_dbf\n')
('Babel', "['description\\n', 'A collection of tools for internationalizing Python applications.\\n']", 'https://pypi.org/project/amqp\n')
('amqp', "['description\\n', ' \\n', ' \\n', ' \\n', ' \\n', ' \\n']", 'https://pypi.org/project/aiopg\n')
('aiopg', '[\'description\\n\', \' is a library for accessing a \\n\', \'" database\\n\', \'from the "\\n\', \'" (PEP-3156/tulip) framework. It wraps\\n\', \'asynchronous features of the Psycopg database driver."\\n\']', 'https://pypi.org/project/agate_sql\n')
('APScheduler', '[\'description\\n\', \'"Advanced Python Scheduler (APScheduler) is a Python library that lets you schedule your Python code\\n\', \'to be executed later, either just once or periodically. You can add new jobs or remove old ones on\\n\', \'the fly as you please. If you store your jobs in a database, they will also survive scheduler\\n\', \'restarts and maintain their state. When the scheduler is restarted, it will then run all the jobs\\n\', \'it should have run while it was offline "\\n\', \'.\\n\', \'"Among other things, APScheduler can be used as a cross-platform, application specific replacement\\n\', \'to platform specific schedulers, such as the cron daemon or the Windows task scheduler. Please\\n\', \'note, however, that APScheduler is "\\n\', \'" a daemon or service itself, nor does it come with any\\n\', \'command line tools. It is primarily meant to be run inside existing applications. That said,\\n\', \'APScheduler does provide some building blocks for you to build a scheduler service or to run a\\n\', \'dedicated scheduler process."\\n\', \'APScheduler has three built-in scheduling systems you can use:\\n\', \'"You can mix and match scheduling systems and the backends where the jobs are stored any way you\\n\', \'like. Supported backends for storing jobs include:"\\n\', \'"APScheduler also integrates with several common Python frameworks, like:"\\n\', \'There are third party solutions for integrating APScheduler with other frameworks:\\n\']', 'https://pypi.org/project/agate\n')
('agate_sql', "['description\\n', 'agate-sql adds SQL read/write support to \\n', '.\\n', 'Important links:\\n']", 'https://pypi.org/project/async_timeout\n')
('agate', "['description\\n', 'agate is a Python data analysis library that is optimized for humans instead of machines. It is an alternative to numpy and pandas that solves real-world problems with readable code.\\n', 'agate was previously known as journalism.\\n', 'Important links:\\n']", 'https://pypi.org/project/agate_excel\n')
