content
"(['jrfonseca/gprof2dot', 'Name already in use', 'About ', 'Status', 'Example', 'Requirements', 'Download', 'Documentation', 'Links', 'gprof2dot', 'gprof2dot', 'gprof2dot', 'not', 'Trace', 'Load Symbols', 'Configure Symbol Paths', 'CPU sampling graph', 'Summary Table', 'Columns', 'Stack', 'Export Full Table', 'output.csv', 'total time %', 'self time %', 'total calls', 'total time %', 'calls', 'total time %', 'total time %', 'total time %', 'temperature-like', 'partial', 'essential', 'If', 'should', 'should', 'may', 'expects'], ['\n        Converts profiling output to a dot graph.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'This is a Python script to convert the output from many profilers into a ', '.', 'It can:', "" currently fulfills my needs, and I have little or no time for its\nmaintenance.  So I'm afraid that any requested features are unlikely to be\nimplemented, and I might be slow processing issue reports or pull requests."", 'This is the result from the ', ' in the ', ' with the default settings:', 'On Debian/Ubuntu run:', 'On RedHat/Fedora run', ""If you're not familiar with xperf then read "", ' first. Then do:', 'Start xperf as', 'Run your application.', 'Save the data.\n`\nxperf -d output.etl', 'Start the visualizer:', 'In ', ' menu, select ', '. ', ' if necessary.', 'Select an area of interest on the ', ', right-click, and select ', '.', 'In the ', ' menu, make sure the ', ' column is enabled and visible.', 'Right click on a row, choose ', ', and save to ', '.', 'Then invoke gprof2dot as', 'Collect profile data as (also can be done from GUI):', 'Visualize profile data as:', 'See also ', '.', 'See ', ' for details.', 'A node in the output graph represents a function and has the following layout:', 'where:', 'An edge represents the calls between two functions and has the following layout:', 'Where:', 'Note that in recursive cycles, the ', ' in the node is the same for the whole functions in the cycle, and there is no ', ' figure in the edges inside the cycle, since such figure would make no sense.', 'The color of the nodes and edges varies according to the ', ' value. In the default ', ' color-map, functions where most time is spent (hot-spots) are marked as saturated red, and functions where little time is spent are marked as dark blue. Note that functions where negligible or no time is spent do not appear in the graph by default.', 'The flag ', ' permits listing the function entries found in the ', ' input.\nThis is intended as a tool to prepare for utilisations with the ', ' (', ')\nor ', ' (', ') flags.', 'The selector argument is used with Unix/Bash globbing/pattern matching, in the same\nfashion as performed by the ', ' and ', ' flags.', ""Entries are formatted '<pkg>:<linenum>:<function>'."", 'When selector argument starts with \'%\', a dump of all available information is\nperformed for selected entries,   after removal of selector\'s leading \'%\'. If\nselector is ""+"" or ""*"", the full list of functions is printed.', 'By default ', ' generates a ', ' call graph, excluding nodes and edges with little or no impact in the total computation time. If you want the full call graph then set a zero threshold for nodes and edges via the ', ' / ', '  and ', ' / ', ' options, as:', 'The node labels can get very wide when profiling C++ code, due to inclusion of scope, function arguments, and template arguments in demangled C++ function names.', 'If you do not need function and template arguments information, then pass the ', ' / ', ' option to strip them.', 'If you want to keep all that information, or if the labels are still too wide, then you can pass the ', ' / ', ', to wrap the labels. Note that because ', ' does not wrap labels automatically the label margins will not be perfectly aligned.', 'Likely, the total execution time is too short, so there is not enough precision in the profile to determine where time is being spent.', 'You can still force displaying the whole graph by setting a zero threshold for nodes and edges via the ', ' / ', '  and ', ' / ', ' options, as:', 'But to get meaningful results you will need to find a way to run the program for a longer time period (aggregate results from multiple runs).', 'You likely have an execution time too short, causing the round-off errors to be large.', 'See question above for ways to increase execution time.', 'Options which are ', ' to produce suitable results are:', "" you're using gprof you will also need "", ' option, but nowadays you can get much better results with other profiling tools, most of which require no special code instrumentation when compiling.', 'You want the code you are profiling to be as close as possible as the code that you will\nbe releasing. So you ', ' include all options that you use in your release code, typically:', 'However many of the optimizations performed by gcc interfere with the accuracy/granularity of the profiling results.  You ', ' pass these options to disable those particular optimizations:', 'If the granularity is still too low, you ', ' pass these options to achieve finer granularity:', 'See the ', ' for more information.', 'See the ', ' for external resources, including complementary/alternative tools.', '\n      Converts profiling output to a dot graph.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'read output from:\n', 'prof, ', '\n', 'prune nodes and edges below a certain threshold;', 'use an heuristic to propagate time inside mutually recursive functions;', 'use color efficiently to draw attention to hot-spots;', 'work on any platform where Python and Graphviz is available, i.e, virtually anywhere.', ': known to work with version 2.7 and 3.3; it will most likely ', ' work with earlier releases.', ': tested with version 2.26.3, but should work fine with other versions.', 'Download and install ', 'Download and install ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', ' is the percentage of the running time spent in this function and all its children;', ' is the percentage of the running time spent in this function alone;', ' is the total number of times this function was called (including recursive calls).', ' is the percentage of the running time transfered from the children to this parent (if available);', ' is the number of calls the parent function called the children.', '\n', '\n', '\n', '\n', '\n', '\n', ' : produce debugging information', ' : use the frame pointer (frame pointer usage is disabled by default in some architectures like x86_64 and for some optimization levels; it is impossible to walk the call stack without it)', ' : optimizations that do not involve a space-speed tradeoff', ' : disable debugging code in the standard library (such as the assert macro)', ' : do not inline functions into their parents (otherwise the time spent on these functions will be attributed to the caller)', ' : similar to above', ' : do not optimize sibling and tail recursive calls (otherwise tail calls may be attributed to the parent function)', ' : do not make member functions inline by default merely because they are defined inside the class scope', ' : do not pay attention to the inline keyword\nNote however that with these last options the timings of functions called many times will be distorted due to the function call overhead. This is particularly true for typical C++ code which ', ' that these optimizations to be done for decent performance.', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    '])"
