content
"(['jaraco/inflect', 'Name already in use', 'not', 'singular', 'plural', 'does', 'singular', 'singular', 'singular', 'singular', 'plural', 'No.', 'not', 'not'], ['\n        Correctly generate plurals, ordinals, indefinite articles; convert numbers to words\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'inflect.py - Correctly generate plurals, singular nouns, ordinals, indefinite articles; convert numbers to words.', 'The methods of the class ', ' in module ', ' provide plural\ninflections, singular noun inflections, ""a""/""an"" selection for English words,\nand manipulation of numbers as words.', 'Plural forms of all nouns, most verbs, and some adjectives are\nprovided. Where appropriate, ""classical"" variants (for example: ""brother"" ->\n""brethren"", ""dogma"" -> ""dogmata"", etc.) are also provided.', 'Single forms of nouns are also provided. The gender of singular pronouns\ncan be chosen (for example ""they"" -> ""it"" or ""she"" or ""he"" or ""they"").', 'Pronunciation-based ""a""/""an"" selection is provided for all English\nwords, and most initialisms.', 'It is also possible to inflect numerals (1,2,3) to ordinals (1st, 2nd, 3rd)\nand to English words (""one"", ""two"", ""three"").', 'In generating these inflections, ', "" follows the Oxford\nEnglish Dictionary and the guidelines in Fowler's Modern English\nUsage, preferring the former where the two disagree."", 'The module is built around standard British spelling, but is designed\nto cope with common American variants as well. Slang, jargon, and\nother English dialects are ', ' explicitly catered for.', 'Where two or more inflected forms exist for a single word (typically a\n""classical"" form and a ""modern"" form), ', ' prefers the\nmore common form (typically the ""modern"" one), unless ""classical""\nprocessing has been specified\n(see MODERN VS CLASSICAL INFLECTIONS).', 'All of the ', ' plural inflection methods take the word to be\ninflected as their first argument and return the corresponding inflection.\nNote that all such methods expect the ', ' form of the word. The\nresults of passing a plural form are undefined (and unlikely to be correct).\nSimilarly, the ', ' singular inflection method expects the ', '\nform of the word.', 'The ', ' methods also take an optional second argument,\nwhich indicates the grammatical ""number"" of the word (or of another word\nwith which the word being inflected must agree). If the ""number"" argument is\nsupplied and is not ', ' (or ', ' or ', ', or some other adjective that\nimplies the singular), the plural form of the word is returned. If the\n""number"" argument ', ' indicate singularity, the (uninflected) word\nitself is returned. If the number argument is omitted, the plural form\nis returned unconditionally.', 'The ', ' method takes a second argument in a similar fashion. If it is\nsome form of the number ', ', or is omitted, the singular form is returned.\nOtherwise the plural is returned unaltered.', 'The various methods of ', ' are:', 'The method ', ' takes a ', ' English noun,\npronoun, verb, or adjective and returns its plural form. Where a word\nhas more than one inflection depending on its part of speech (for\nexample, the noun ""thought"" inflects to ""thoughts"", the verb ""thought""\nto ""thought""), the (singular) noun sense is preferred to the (singular)\nverb sense.', 'Hence ', ' will return ""knives"" (""knife"" having been treated\nas a singular noun), whereas ', ' will return ""knife""\n(""knifes"" having been treated as a 3rd person singular verb).', 'The inherent ambiguity of such cases suggests that,\nwhere the part of speech is known, ', ', ', ', and\n', ' should be used in preference to ', '.', 'Note that all these methods ignore any whitespace surrounding the\nword being inflected, but preserve that whitespace when the result is\nreturned. For example, ', ' returns "" cats  "".', 'The ', ' methods return only the inflected word, not the count that\nwas used to inflect it. Thus, in order to produce ""I saw 3 ducks"", it\nis necessary to use:', 'Since the usual purpose of producing a plural is to make it agree with\na preceding count, inflect.py provides a method\n(', ') which, given a word and a(n optional) count, returns the\ncount followed by the correctly inflected word. Hence the previous\nexample can be rewritten:', 'In addition, if the count is zero (or some other term which implies\nzero, such as ', ', ', ', etc.) the count is replaced by the\nword ""no"". Hence, if ', ' had the value zero, the previous example\nwould print (the somewhat more elegant):', 'rather than:', 'Note that the name of the method is a pun: the method\nreturns either a number (a ', ') or a ', ', in front of the\ninflected word.', 'In some contexts, the need to supply an explicit count to the various\n', ' methods makes for tiresome repetition. For example:', 'inflect.py therefore provides a method\n(', ') which may be used to set a persistent ""default number""\nvalue. If such a value is set, it is subsequently used whenever an\noptional second ""number"" argument is omitted. The default value thus set\ncan subsequently be removed by calling ', ' with no arguments.\nHence we could rewrite the previous example:', 'Normally, ', ' returns its first argument, so that it may also\nbe ""inlined"" in contexts like:', 'However, in certain contexts (see INTERPOLATING INFLECTIONS IN STRINGS)\nit is preferable that ', ' return an empty string. Hence ', '\nprovides an optional second argument. If that argument is supplied (that is, if\nit is defined) and evaluates to false, ', ' returns an empty string\ninstead of its first argument. For example:', 'inflect.py also provides a solution to the problem\nof comparing words of differing plurality through the methods\n', ', ', ',\n', ', and ', '.\nEach  of these methods takes two strings, and  compares them\nusing the corresponding plural-inflection method (', ', ', ',\n', ', and ', ' respectively).', 'The comparison returns true if:', 'Hence all of the following return true:', 'As indicated by the comments in the previous example, the actual value\nreturned by the various ', ' methods encodes which of the\nthree equality rules succeeded: ""eq"" is returned if the strings were\nidentical, ""s:p"" if the strings were singular and plural respectively,\n""p:s"" for plural and singular, and ""p:p"" for two distinct plurals.\nInequality is indicated by returning an empty string.', 'It should be noted that two distinct singular words which happen to take\nthe same plural form are ', "" considered equal, nor are cases where\none (singular) word's plural is the other (plural) word's singular.\nHence all of the following return false:"", 'Note too that, although the comparison is ""number-insensitive"" it is ', '\ncase-insensitive (that is, ', ' returns false. To obtain\nboth number and case insensitivity, use the ', ' method on both strings\n(that is, ', ' returns true).', 'Shout out to these libraries that provide related functionality:', 'Available as part of the Tidelift Subscription.', 'This project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.', '.', 'To report a security vulnerability, please use the\n', '.\nTidelift will coordinate the fix and disclosure.', '\n      Correctly generate plurals, ordinals, indefinite articles; convert numbers to words\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n        ', '\n      ', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'the strings are equal, or', 'one string is equal to a plural form of the other, or', 'the strings are two different plural forms of the one word.', '\nparses identifiers like variable names into sets of words suitable for re-assembling\nin another form.', ' converts words to\na number.', '\n          ', '\n          ', '\n        ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    '])"
