content
"(['tiangolo/typer', 'Name already in use', 'Typer, build great CLIs. Easy to code. Based on Python type hints.', 'display', 'CLI arguments', 'CLI options'], ['\n        Typer, build great CLIs. Easy to code. Based on Python type hints.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', '\n  ', '\n', '\n    ', '\n', '\n', '\n', '\n', '\n', ': ', ': ', 'Typer is a library for building CLI applications that users will ', ' and developers will ', '. Based on Python 3.6+ type hints.', 'The key features are:', ' is ', ""'s little sibling."", ""And it's intended to be the FastAPI of CLIs."", 'Python 3.6+', ' stands on the shoulders of a giant. Its only internal dependency is ', '.', ': that will include ', '. Rich is the recommended library to ', "" information on the terminal, it is optional, but when installed, it's deeply integrated into "", ' to display beautiful output.', 'Run your application:', ': auto-completion works when you create a Python package and run it with ', ' or when you use ', '.', 'This was the simplest example possible.', ""Now let's see one a bit more complex."", 'Modify the file ', '.', 'Create a ', ' app, and create two subcommands with their parameters.', 'And that will:', 'Check the new help:', 'Now check the help for the ', ' command:', 'And now check the help for the ', ' command:', 'Now you can try out the new command line application:', 'In summary, you declare ', ' the types of parameters (', ' and ', ') as function parameters.', 'You do that with standard modern Python types.', ""You don't have to learn a new syntax, the methods or classes of a specific library, etc."", 'Just standard ', '.', 'For example, for an ', ':', 'or for a ', ' flag:', 'And similarly for ', ', ', ', ', ' (choices), etc. And there are tools to create ', ', add metadata, extra ', ', etc.', ': great editor support, including ', ' and ', ' everywhere.', ': automatic ', ', ', ' in their terminal (Bash, Zsh, Fish, PowerShell) when they install your package or when using ', '.', 'For a more complete example including more features, see the ', '.', 'Typer uses ', "" internally. That's the only dependency."", 'But you can also install extras:', 'You can install ', ' with ', ' and ', ' with ', '.', 'This project is licensed under the terms of the MIT license.', '\n      Typer, build great CLIs. Easy to code. Based on Python type hints.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n        ', '\n      ', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ': Great editor support. Completion everywhere. Less time debugging. Designed to be easy to use and learn. Less time reading docs.', "": It's easy to use for the final users. Automatic help, and automatic completion for all shells."", ': Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.', ': The simplest example adds only 2 lines of code to your app: ', '.', ': Grow in complexity as much as you want, create arbitrarily complex trees of commands and groups of subcommands, with options and arguments.', 'Create a file ', ' with:', 'Explicitly create a ', ' app.\n', 'The previous ', ' actually creates one implicitly for you.', '\n', 'Add two subcommands with ', '.', 'Execute the ', ' itself, as if it was a function (instead of ', ').', ': and Typer will show nicely formatted errors automatically.', ': and Typer will automatically detect the current shell when installing completion.\n', 'With ', ' you can just use ', '.', 'Without ', ', you have to pass the name of the shell to install completion for, e.g. ', '.', '\n', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
content
"(['tiangolo/typer', 'Name already in use', 'Typer, build great CLIs. Easy to code. Based on Python type hints.', 'display', 'CLI arguments', 'CLI options'], ['\n        Typer, build great CLIs. Easy to code. Based on Python type hints.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', '\n  ', '\n', '\n    ', '\n', '\n', '\n', '\n', '\n', ': ', ': ', 'Typer is a library for building CLI applications that users will ', ' and developers will ', '. Based on Python 3.6+ type hints.', 'The key features are:', ' is ', ""'s little sibling."", ""And it's intended to be the FastAPI of CLIs."", 'Python 3.6+', ' stands on the shoulders of a giant. Its only internal dependency is ', '.', ': that will include ', '. Rich is the recommended library to ', "" information on the terminal, it is optional, but when installed, it's deeply integrated into "", ' to display beautiful output.', 'Run your application:', ': auto-completion works when you create a Python package and run it with ', ' or when you use ', '.', 'This was the simplest example possible.', ""Now let's see one a bit more complex."", 'Modify the file ', '.', 'Create a ', ' app, and create two subcommands with their parameters.', 'And that will:', 'Check the new help:', 'Now check the help for the ', ' command:', 'And now check the help for the ', ' command:', 'Now you can try out the new command line application:', 'In summary, you declare ', ' the types of parameters (', ' and ', ') as function parameters.', 'You do that with standard modern Python types.', ""You don't have to learn a new syntax, the methods or classes of a specific library, etc."", 'Just standard ', '.', 'For example, for an ', ':', 'or for a ', ' flag:', 'And similarly for ', ', ', ', ', ' (choices), etc. And there are tools to create ', ', add metadata, extra ', ', etc.', ': great editor support, including ', ' and ', ' everywhere.', ': automatic ', ', ', ' in their terminal (Bash, Zsh, Fish, PowerShell) when they install your package or when using ', '.', 'For a more complete example including more features, see the ', '.', 'Typer uses ', "" internally. That's the only dependency."", 'But you can also install extras:', 'You can install ', ' with ', ' and ', ' with ', '.', 'This project is licensed under the terms of the MIT license.', '\n      Typer, build great CLIs. Easy to code. Based on Python type hints.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n        ', '\n      ', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ': Great editor support. Completion everywhere. Less time debugging. Designed to be easy to use and learn. Less time reading docs.', "": It's easy to use for the final users. Automatic help, and automatic completion for all shells."", ': Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.', ': The simplest example adds only 2 lines of code to your app: ', '.', ': Grow in complexity as much as you want, create arbitrarily complex trees of commands and groups of subcommands, with options and arguments.', 'Create a file ', ' with:', 'Explicitly create a ', ' app.\n', 'The previous ', ' actually creates one implicitly for you.', '\n', 'Add two subcommands with ', '.', 'Execute the ', ' itself, as if it was a function (instead of ', ').', ': and Typer will show nicely formatted errors automatically.', ': and Typer will automatically detect the current shell when installing completion.\n', 'With ', ' you can just use ', '.', 'Without ', ', you have to pass the name of the shell to install completion for, e.g. ', '.', '\n', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
