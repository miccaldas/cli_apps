content
"(['powerline/powerline', 'Name already in use', 'Powerline', 'But I hate Python / I don’t need shell prompts / this is just too much\nhassle for me / what happened to the original vim-powerline project / …'], ['\n        Powerline is a statusline plugin for vim, and provides statuslines and prompts for several other applications, including zsh, bash, tmux, IPython, Awesome and Qtile.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'You should check out some of the Powerline derivatives. The most lightweight\nand feature-rich alternative is currently the ', ' project.', 'Basic powerline configuration is done via JSON files located at .config/powerline/. It is a good idea to start by copying the default configuration located at powerline_root/powerline/config_files/ to .config/powerline/.\nIf you installed the powerline from the AUR or via pip, powerline_root should be /usr/lib/python3.6/site-packages/ or something similar, depending on your python version.', ""If you installed powerline via apt-get 'powerline_root' should be '/usr/share/powerline/'."", 'This should yield you the following directory structure:', 'The files in the subdirectories of themes are used to specify which segments shall be shown; the files in subdirectories of colorschemes are used to specify which colors (as defined in colors.json) shall be used to display a segment.', ""Note that your local configuration only overrides the global configuration, it does not replace it, i.e. if you don't configure something locally, the global default will be used instead."", 'The font in the screenshots is ', ' by Fabrizio Schiavi.', '\n      Powerline is a statusline plugin for vim, and provides statuslines and prompts for several other applications, including zsh, bash, tmux, IPython, Awesome and Qtile.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ' Powerline was\ncompletely rewritten in Python to get rid of as much vimscript as\npossible. This has allowed much better extensibility, leaner and better\nconfig files, and a structured, object-oriented codebase with no mandatory\nthird-party dependencies other than a Python interpreter.', ' Using Python has allowed unit testing\nof all the project code. The code is tested to work in Python 3.6+.', ' Originally\ncreated exclusively for vim statuslines, the project has evolved to\nprovide statuslines in tmux and several WMs, and prompts for shells like\nbash/zsh and other applications. It’s simple to write renderers for any\nother applications that Powerline doesn’t yet support.', ' JSON is\na standardized, simple and easy to use file format that allows for easy\nuser configuration across all of Powerline’s supported applications.', '\nAlthough the code base spans a couple of thousand lines of code with no\ngoal of “less than X lines of code”, the main focus is on good performance\nand as little code as possible while still providing a rich set of\nfeatures. The new daemon also ensures that only one Python instance is\nlaunched for prompts and statuslines, which provides excellent\nperformance.', 'Consult the ', ' for more details. See also the ', ' for available segments and their configuration.', 'Check out ', ' for\npre-patched versions of popular, open source coding fonts.', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n      ', '\n    '])"
content
"(['powerline/powerline', 'Name already in use', 'Powerline', 'But I hate Python / I don’t need shell prompts / this is just too much\nhassle for me / what happened to the original vim-powerline project / …'], ['\n        Powerline is a statusline plugin for vim, and provides statuslines and prompts for several other applications, including zsh, bash, tmux, IPython, Awesome and Qtile.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'You should check out some of the Powerline derivatives. The most lightweight\nand feature-rich alternative is currently the ', ' project.', 'Basic powerline configuration is done via JSON files located at .config/powerline/. It is a good idea to start by copying the default configuration located at powerline_root/powerline/config_files/ to .config/powerline/.\nIf you installed the powerline from the AUR or via pip, powerline_root should be /usr/lib/python3.6/site-packages/ or something similar, depending on your python version.', ""If you installed powerline via apt-get 'powerline_root' should be '/usr/share/powerline/'."", 'This should yield you the following directory structure:', 'The files in the subdirectories of themes are used to specify which segments shall be shown; the files in subdirectories of colorschemes are used to specify which colors (as defined in colors.json) shall be used to display a segment.', ""Note that your local configuration only overrides the global configuration, it does not replace it, i.e. if you don't configure something locally, the global default will be used instead."", 'The font in the screenshots is ', ' by Fabrizio Schiavi.', '\n      Powerline is a statusline plugin for vim, and provides statuslines and prompts for several other applications, including zsh, bash, tmux, IPython, Awesome and Qtile.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ' Powerline was\ncompletely rewritten in Python to get rid of as much vimscript as\npossible. This has allowed much better extensibility, leaner and better\nconfig files, and a structured, object-oriented codebase with no mandatory\nthird-party dependencies other than a Python interpreter.', ' Using Python has allowed unit testing\nof all the project code. The code is tested to work in Python 3.6+.', ' Originally\ncreated exclusively for vim statuslines, the project has evolved to\nprovide statuslines in tmux and several WMs, and prompts for shells like\nbash/zsh and other applications. It’s simple to write renderers for any\nother applications that Powerline doesn’t yet support.', ' JSON is\na standardized, simple and easy to use file format that allows for easy\nuser configuration across all of Powerline’s supported applications.', '\nAlthough the code base spans a couple of thousand lines of code with no\ngoal of “less than X lines of code”, the main focus is on good performance\nand as little code as possible while still providing a rich set of\nfeatures. The new daemon also ensures that only one Python instance is\nlaunched for prompts and statuslines, which provides excellent\nperformance.', 'Consult the ', ' for more details. See also the ', ' for available segments and their configuration.', 'Check out ', ' for\npre-patched versions of popular, open source coding fonts.', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n      ', '\n    '])"
