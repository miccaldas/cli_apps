content
"(['python-trio/trio', 'Name already in use', 'easy', 'right', 'do'], ['\n        Trio – a friendly Python library for async concurrency and I/O\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'The Trio project aims to produce a production-quality,\n', ',\nasync/await-native I/O library for Python. Like all async libraries,\nits main purpose is to help you write programs that do ', ' with ', '. A web spider that\nwants to fetch lots of pages in parallel, a web server that needs to\njuggle lots of downloads and websocket connections simultaneously, a\nprocess supervisor monitoring multiple subprocesses... that sort of\nthing. Compared to other libraries, Trio attempts to distinguish\nitself with an obsessive focus on ', ' and\n', '. Concurrency is complicated; we try to make it ', '\nto get things ', '.', 'Trio was built from the ground up to take advantage of the ', ', and\ndraws inspiration from ', "", in\nparticular Dave Beazley's "", '.\nThe resulting design is radically simpler than older competitors like\n', ' and\n', ', yet just as capable. Trio is\nthe Python I/O library I always wanted; I find it makes building\nI/O-oriented programs easier, less error-prone, and just plain more\nfun. ', '.', 'This project is young and still somewhat experimental: the overall\ndesign is solid, and the existing features are fully tested and\ndocumented, but you may encounter missing functionality or rough\nedges. We ', ' encourage you to use it, but you should ', ' to get a warning and a\nchance to give feedback about any compatibility-breaking changes.', ' Awesome! We have a ', ' to get you\nstarted; no prior experience with async coding is required.', "" If you're\nimpatient, then here's a "", ',\nan ', ',\nand an ', '.', ' Trio is based on a new way of thinking that we\ncall ""structured concurrency"". The best theoretical introduction is\nthe article ', '.\nOr, ', ' to see a\ndemonstration of implementing the ""Happy Eyeballs"" algorithm in an\nolder library versus Trio.', ' Probably! As long as you have\nsome kind of Python 3.7-or-better (CPython or the latest PyPy3 are\nboth fine), and are using Linux, macOS, Windows, or FreeBSD, then Trio\nwill work. Other environments might work too, but those\nare the ones we test on. And all of our dependencies are pure Python,\nexcept for CFFI on Windows, which has wheels available, so\ninstallation should be easy (no C compiler needed).', ' Sorry to hear that! You can try\nasking for help in our ', ' or ', ', ', ', or ', "",\nand we'll do our best to help you out."", "" You're\nthe best! There's tons of work to do – filling in missing\nfunctionality, building up an ecosystem of Trio-using libraries,\nusability testing (e.g., maybe try teaching yourself or a friend to\nuse Trio and make a list of every error message you hit and place\nwhere you got confused?), improving the docs, ... check out our "", '!', "" That's a little weird? But let's be\nhonest, you'll fit in great around here. We have a "", ' (developers\nof other systems welcome!). Or check out our ', ',\n', ', and\n', '.', ' No\nworries, Trio is permissively licensed under your choice of MIT or\nApache 2. See ', ' for details.', 'Contributors are requested to follow our ', ' in all\nproject spaces.', '\n      Trio – a friendly Python library for async concurrency and I/O\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n        ', '\n      ', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n              ', '\n              ', '\n            ', '\n          ', '\n          ', '\n        ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
