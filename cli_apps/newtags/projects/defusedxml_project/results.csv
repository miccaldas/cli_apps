content
"(['tiran/defusedxml', 'Name already in use', 'defusedxml -- defusing XML bombs and other exploits', 'Changelog', 'DTDForbidden', 'EntitiesForbidden', 'ExternalReferenceForbidden', 'experimental', 'example', 'Release date: 4-Mar-2021', 'Release date: 12-Jan-2021', 'Release date: 04-May-2020', 'Release date: 17-Apr-2019', 'Release date: 14-Apr-2019', 'html', 'Release date: 07-Feb-2017', 'Release date: 28-Jan-2017', 'Release date: 28-Mar-2013', 'Release date: 25-Feb-2013', 'Release date: 19-Feb-2013', 'Release date: 15-Feb-2013', 'Release date: 08-Feb-2013'], ['\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', '\n', '\n', '\n', '\n', '\n', 'Christian Heimes <', '>', 'The results of an attack on a vulnerable XML library can be fairly\ndramatic. With just a few hundred ', ' of XML data an attacker can\noccupy several ', ' of memory within ', '. An attacker\ncan also keep CPUs busy for a long time with a small to medium size\nrequest. Under some circumstances it is even possible to access local\nfiles on your server, to circumvent a firewall, or to abuse services to\nrebound attacks to third parties.', 'The attacks use and abuse less common features of XML and its parsers.\nThe majority of developers are unacquainted with features such as\nprocessing instructions and entity expansions that XML inherited from\nSGML. At best they know about ', ' from experience with HTML but\nthey are not aware that a document type definition (DTD) can generate an\nHTTP request or load a file from the file system.', ""None of the issues is new. They have been known for a long time. Billion\nlaughs was first reported in 2003. Nevertheless some XML libraries and\napplications are still vulnerable and even heavy users of XML are\nsurprised by these features. It's hard to say whom to blame for the\nsituation. It's too short sighted to shift all blame on XML parsers and\nXML libraries for using insecure default settings. After all they\nproperly implement XML specifications. Application developers must not\nrely that a library is always configured for security and potential\nharmful data by default."", 'Table of Contents', 'The ', '\nattack -- also known as exponential entity expansion --uses multiple\nlevels of nested entities. The original example uses 9 levels of 10\nexpansions in each level to expand the string ', ' to a string of 3 *\n10 ', ' bytes, hence the name ""billion laughs"". The resulting\nstring occupies 3 GB (2.79 GiB) of memory; intermediate strings require\nadditional memory. Because most parsers don\'t cache the intermediate\nstep for every expansion it is repeated over and over again. It\nincreases the CPU load even more.', 'An XML document of just a few hundred bytes can disrupt all services on\na machine within seconds.', 'Example XML:', 'A quadratic blowup attack is similar to a ', "" attack; it abuses\nentity expansion, too. Instead of nested entities it repeats one large\nentity with a couple of thousand chars over and over again. The attack\nisn't as efficient as the exponential case but it avoids triggering\ncountermeasures of parsers against heavily nested entities. Some parsers\nlimit the depth and breadth of a single entity but not the total amount\nof expanded text throughout an entire XML document."", 'A medium-sized XML document with a couple of hundred kilobytes can\nrequire a couple of hundred MB to several GB of memory. When the attack\nis combined with some level of nested expansion an attacker is able to\nachieve a higher ratio of success.', 'Entity declarations can contain more than just text for replacement.\nThey can also point to external resources by public identifiers or\nsystem identifiers. System identifiers are standard URIs. When the URI\nis a URL (e.g. a ', ' locator) some parsers download the resource\nfrom the remote location and embed them into the XML document verbatim.', 'Simple example of a parsed external entity:', 'The case of parsed external entities works only for valid XML content.\nThe XML standard also supports unparsed external entities with a ', '.', 'External entity expansion opens the door to plenty of exploits. An\nattacker can abuse a vulnerable XML library and application to rebound\nand forward network requests with the IP address of the server. It\nhighly depends on the parser and the application what kind of exploit is\npossible. For example:', ""External entities with references to local files are a sub-case of\nexternal entity expansion. It's listed as an extra attack because it\ndeserves extra attention. Some XML libraries such as lxml disable\nnetwork access by default but still allow entity expansion with local\nfile access by default. Local files are either referenced with a\n"", ' URL or by a file path (either relative or absolute).', 'An attacker may be able to access and download all files that can be\nread by the application process. This may include critical configuration\nfiles, too.', ""This case is similar to external entity expansion, too. Some XML\nlibraries like Python's xml.dom.pulldom retrieve document type\ndefinitions from remote or local locations. Several attack scenarios\nfrom the external entity case apply to this issue as well."", 'vulnerabilities and features', 'feature_external_ges\n(', ')', '\ndisables external entity expansion', 'feature_external_pes\n(', ')', ""\nthe option is ignored and doesn't modify any functionality"", 'external_parameter_entities', '\nignored', 'external_general_entities', '\nignored', 'external_dtd_subset', '\nignored', 'entities', '\nunsure', 'The ', '\n(', "") contains\nseveral Python-only workarounds and fixes for denial of service and\nother vulnerabilities in Python's XML libraries. In order to benefit\nfrom the protection you just have to import and use the listed functions\n/ classes from the right defusedxml module instead of the original\nmodule. Merely "", ' is implemented as\nmonkey patch.', 'Instead of:', 'alter code to:', 'Additionally the package has an ', ' function to monkey patch\nall stdlib modules with ', '.', 'All functions and parser classes accept three additional keyword\narguments. They return either the same objects as the original functions\nor compatible subclasses.', 'forbid_dtd (default: False)', '\ndisallow XML with a ', ' processing instruction and raise a\n', ' exception when a DTD processing instruction is found.', 'forbid_entities (default: True)', '\ndisallow XML with ', ' declarations inside the DTD and raise\nan ', ' exception when an entity is declared.', 'forbid_external (default: True)', '\ndisallow any access to remote or local resources in external\nentities or DTD and raising an ', '\nexception when a DTD or entity references an external resource.', 'DefusedXmlException, DTDForbidden, EntitiesForbidden,\nExternalReferenceForbidden, NotSupportedError', 'defuse_stdlib() (', ')', ' ', ' is deprecated and will be removed in\na future release. Import from ', ' instead.', 'parse(), iterparse(), fromstring(), XMLParser', 'parse(), iterparse(), fromstring(), XMLParser', 'create_parser(), DefusedExpatParser', 'parse(), parseString(), make_parser()', 'parse(), parseString(), DefusedExpatBuilder, DefusedExpatBuilderNS', 'parse(), parseString()', 'parse(), parseString()', ""The fix is implemented as monkey patch for the stdlib's xmlrpc package\n(3.x) or xmlrpclib module (2.x). The function\n"", ' enables the fixes,\n', ' removes the patch and\nputs the code in its former state.', 'The monkey patch protects against XML related attacks as well as\ndecompression bombs and excessively large requests or responses. The\ndefault setting is 30 MB for requests, responses and gzip decompression.\nYou can modify the default by changing the module variable\n', '. A value of\n', ' disables the limit.', ' The module is deprecated and will be removed in a future\nrelease.', 'The module acts as an ', ' how you could protect code that uses\nlxml.etree. It implements a custom Element class that filters out Entity\ninstances, a custom parser factory and a thread local storage for parser\ninstances. It also has a check_docinfo() function which inspects a tree\nfor internal or external DTDs and entity declarations. In order to check\nfor entities lxml > 3.0 is required.', 'parse(), fromstring() RestrictedElement, GlobalParserTLS,\ngetDefaultParser(), check_docinfo()', 'The ', '\n(', ')\ncomes with binary extensions and a ', ' library instead of the standard\n', "". It's basically a\nstand-alone version of the patches for Python's standard library C\nextensions."", 'new definitions:', 'new XML_FeatureEnum members:', 'new XML_Error members:', 'new API functions:', 'XML_FEATURE_MAX_ENTITY_INDIRECTIONS', '\nLimit the amount of indirections that are allowed to occur during\nthe expansion of a nested entity. A counter starts when an entity\nreference is encountered. It resets after the entity is fully\nexpanded. The limit protects the parser against exponential entity\nexpansion attacks (aka billion laughs attack). When the limit is\nexceeded the parser stops and fails with\n', '. A\nvalue of 0 disables the protection.', 'Supported range', '\n0 .. UINT_MAX', 'Default', '\n40', 'XML_FEATURE_MAX_ENTITY_EXPANSIONS', '\nLimit the total length of all entity expansions throughout the\nentire document. The lengths of all entities are accumulated in a\nparser variable. The setting protects against quadratic blowup\nattacks (lots of expansions of a large entity declaration). When the\nsum of all entities exceeds the limit, the parser stops and fails\nwith ', '. A\nvalue of 0 disables the protection.', 'Supported range', '\n0 .. UINT_MAX', 'Default', '\n8 MiB', 'XML_FEATURE_RESET_DTD', '\nReset all DTD information after the <!DOCTYPE> block has been\nparsed. When the flag is set (default: false) all DTD information\nafter the endDoctypeDeclHandler has been called. The flag can be set\ninside the endDoctypeDeclHandler. Without DTD information any entity\nreference in the document body leads to\n', '.', 'Supported range', '\n0, 1', 'Default', '\n0', ""(based on Brad Hill's "", ')', 'XML, XML parsers and processing libraries have more features and\npossible issue that could lead to DoS vulnerabilities or security\nexploits in applications. I have compiled an incomplete list of\ntheoretical issues that need further research and more attention. The\nlist is deliberately pessimistic and a bit paranoid, too. It contains\nthings that might go wrong under daffy circumstances.', 'XML parsers may use an algorithm with quadratic runtime O(n\n', ') to handle attributes and namespaces. If it uses hash\ntables (dictionaries) to store attributes and namespaces the\nimplementation may be vulnerable to hash collision attacks, thus\nreducing the performance to O(n ', ') again. In either case an\nattacker is able to forge a denial of service attack with an XML\ndocument that contains thousands upon thousands of attributes in a\nsingle node.', ""I haven't researched yet if expat, pyexpat or libxml2 are vulnerable."", 'The issue of decompression bombs (aka ', ') apply to all XML\nlibraries that can parse compressed XML stream like gzipped HTTP streams\nor LZMA-ed files. For an attacker it can reduce the amount of\ntransmitted data by three magnitudes or more. Gzip is able to compress 1\nGiB zeros to roughly 1 MB, lzma is even better:', ""None of Python's standard XML libraries decompress streams except for\n"", '. The module is vulnerable\n<', '> to decompression bombs.', ""lxml can load and process compressed data through libxml2 transparently.\nlibxml2 can handle even very large blobs of compressed data efficiently\nwithout using too much memory. But it doesn't protect applications from\ndecompression bombs. A carefully written SAX or iterparse-like approach\ncan be safe."", ""'s like:"", 'may impose more threats for XML processing. It depends if and how a\nprocessor handles processing instructions. The issue of URL retrieval\nwith network or local file access apply to processing instructions, too.', ' has more\nfeatures like ', "". I haven't researched how these features may\nbe a security threat."", 'XPath statements may introduce DoS vulnerabilities. Code should never\nexecute queries from untrusted sources. An attacker may also be able to\ncreate an XML document that makes certain XPath queries costly or\nresource hungry.', 'XPath injeciton attacks pretty much work like SQL injection attacks.\nArguments to XPath queries must be quoted and validated properly,\nespecially when they are taken from the user. The page ', '\nlist some ramifications of XPath injections.', ""Python's standard library doesn't have XPath support. Lxml supports\nparameterized XPath queries which does proper quoting. You just have to\nuse its xpath() method correctly:"", ' is\nanother way to load and include external files:', ""This feature should be disabled when XML files from an untrusted source\nare processed. Some Python XML libraries and libxml2 support XInclude\nbut don't have an option to sandbox inclusion and limit it to allowed\ndirectories."", 'A validating XML parser may download schema files from the information\nin a ', ' attribute.', ""You should keep in mind that XSLT is a Turing complete language. Never\nprocess XSLT code from unknown or untrusted source! XSLT processors may\nallow you to interact with external resources in ways you can't even\nimagine. Some processors even support extensions that allow read/write\naccess to file system, access to JRE objects or scripting with Jython."", 'Example from ', '\nfor Xalan-J:', 'CVE-2013-1664', '\nUnrestricted entity expansion induces DoS vulnerabilities in Python\nXML libraries (XML bomb)', 'CVE-2013-1665', '\nExternal entity expansion in Python XML libraries inflicts potential\nsecurity flaws and DoS vulnerabilities', 'Several other programming languages and frameworks are vulnerable as\nwell. A couple of them are affected by the fact that libxml2 up to 2.9.0\nhas no protection against quadratic blowup attacks. Most of them have\npotential dangerous default settings for entity expansion and external\nentities, too.', ""Perl's XML::Simple is vulnerable to quadratic entity expansion and\nexternal entity expansion (both local and remote)."", ""Ruby's REXML document parser is vulnerable to entity expansion attacks\n(both quadratic and exponential) but it doesn't do external entity\nexpansion by default. In order to counteract entity expansion you have\nto disable the feature:"", ""libxml-ruby and hpricot don't expand entities in their default\nconfiguration."", ""PHP's SimpleXML API is vulnerable to quadratic entity expansion and\nloads entities from local and remote resources. The option\n"", ' disables network access but still allows local file\naccess. ', ' seems to have no effect on entity expansion in\nPHP 5.4.6.', 'Information in ', ' suggest\nthat .NET is vulnerable with its default settings. The article contains\ncode snippets how to create a secure XML reader:', 'Untested. The documentation of Xerces and its ', '\nsounds like Xerces is also vulnerable to billion laugh attacks with its\ndefault settings. It also does entity resolving when an\n', "" is configured. I'm not yet sure about the\ndefault setting here."", 'Java specialists suggest to have a custom builder factory:', 'Copyright (c) 2013-2017 by Christian Heimes <', '>', 'Licensed to PSF under a Contributor Agreement.', 'See ', ' for licensing details.', 'Brett Cannon (Python Core developer)', '\nreview and code cleanup', 'Antoine Pitrou (Python Core developer)', '\ncode review', 'Aaron Patterson, Ben Murphy and Michael Koziarski (Ruby community)', '\nMany thanks to Aaron, Ben and Michael from the Ruby community for\ntheir report and assistance.', 'Thierry Carrez (OpenStack)', '\nMany thanks to Thierry for his report to the Python Security\nResponse Team on behalf of the OpenStack security team.', 'Carl Meyer (Django)', '\nMany thanks to Carl for his report to PSRT on behalf of the Django\nsecurity team.', 'Daniel Veillard (libxml2)', '\nMany thanks to Daniel for his insight and assistance with libxml2.', 'semantics GmbH (', ')', ""\nMany thanks to my employer semantics for letting me work on the\nissue during working hours as part of semantics's open source\ninitiative."", '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'An attacker can circumvent firewalls and gain access to restricted\nresources as all the requests are made from an internal and\ntrustworthy IP address, not from the outside.', 'An attacker can abuse a service to attack, spy on or DoS your\nservers but also third party services. The attack is disguised with\nthe IP address of the server and the attacker is able to utilize the\nhigh bandwidth of a big machine.', ""An attacker can exhaust additional resources on the machine, e.g.\nwith requests to a service that doesn't respond or responds with\nvery large files."", 'An attacker may gain knowledge, when, how often and from which IP\naddress an XML document is accessed.', 'An attacker could send mail from inside your network if the URL\nhandler supports ', ' URIs.', ""Lxml is protected against billion laughs attacks and doesn't do\nnetwork lookups by default."", ""libxml2 and lxml are not directly vulnerable to gzip decompression\nbombs but they don't protect you against them either."", ""xml.etree doesn't expand entities and raises a ParserError when an\nentity occurs."", ""minidom doesn't expand entities and simply returns the unexpanded\nentity verbatim."", ""genshi.input of genshi 0.6 doesn't support entity expansion and\nraises a ParserError when an entity occurs."", 'Library has (limited) XInclude support but requires an additional\nstep to process inclusion.', 'These are features but they may introduce exploitable holes, see\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', ""Don't allow DTDs"", ""Don't expand entities"", ""Don't resolve externals"", 'Limit parse depth', 'Limit total input size', 'Limit parse time', 'Favor a SAX or iterparse-like parser for potential large data', 'Validate and properly quote arguments to XSL transformations and\nXPath queries', ""Don't use XPath expression from untrusted sources"", ""Don't apply XSL transformations that come untrusted sources"", '\n', '\n', '\n', '\n', 'DOM: Use xml.dom.xmlbuilder options for entity handling', 'SAX: take feature_external_ges and feature_external_pes (?) into\naccount', 'test experimental monkey patching of stdlib modules', 'improve documentation', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', ' on\nWikipedia', ' on Wikipedia', 'Drop support for Python 2.7, 3.4, and 3.5.', 'Add ', 'Fix regression ', ' (#63) The\n', ' exception is now the same class object as\n', ' again.', 'No changes', 'Re-add and deprecate ', 'Use GitHub Actions instead of TravisCI', 'Restore ', ' attribute of ', ' module after patching', 'Add support for Python 3.9', ' is not available with Python 3.9.', 'Python 2 is deprecate. Support for Python 2 will be removed in\n0.8.0.', 'Increase test coverage.', 'Add badges to README.', 'Test on Python 3.7 stable and 3.8-dev', 'Drop support for Python 3.4', 'No longer pass ', "" argument to XMLParse. It has been deprecated\nand ignored for a long time. The DefusedXMLParser still takes a html\nargument. A deprecation warning is issued when the argument is False\nand a TypeError when it's True."", 'defusedxml now fails early when pyexpat stdlib module is not\navailable or broken.', 'defusedxml.ElementTree.__all__ now lists ParseError as public\nattribute.', 'The defusedxml.ElementTree and defusedxml.cElementTree modules had a\ntypo and used XMLParse instead of XMLParser as an alias for\nDefusedXMLParser. Both the old and fixed name are now available.', 'No changes', 'Add compatibility with Python 3.6', 'Drop support for Python 2.6, 3.1, 3.2, 3.3', 'Fix lxml tests (XMLSyntaxError: Detected an entity reference loop)', 'Add more demo exploits, e.g. python_external.py and Xalan XSLT\ndemos.', 'Improved documentation.', 'As per ', ' please REJECT\nCVE-2013-0278, CVE-2013-0279 and CVE-2013-0280 and use\nCVE-2013-1664, CVE-2013-1665 for OpenStack/etc.', 'Add missing parser_list argument to sax.make_parser(). The\nargument is ignored, though. (thanks to Florian Apolloner)', ""Add demo exploit for external entity attack on Python's SAX parser,\nXML-RPC and WebDAV."", 'Improve documentation', 'Rename ExternalEntitiesForbidden to ExternalReferenceForbidden', 'Rename defusedxml.lxml.check_dtd() to check_docinfo()', 'Unify argument names in callbacks', 'Add arguments and formatted representation to exceptions', 'Add forbid_external argument to all functions and classes', 'More tests', 'LOTS of documentation', 'Add example code for other languages (Ruby, Perl, PHP) and parsers\n(Genshi)', 'Add protection against XML and gzip attacks to xmlrpclib', 'Initial and internal release for PSRT review', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
