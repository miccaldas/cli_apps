content
"(['kjd/idna', 'Name already in use', 'Internationalized Domain Names in Applications (IDNA)', 'LATIN\nCAPITAL LETTER K', 'LATIN SMALL LETTER SHARP S', 'LATIN SMALL LETTER S'], ['\n        Internationalized Domain Names for Python (IDNA 2008 and UTS #46)\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Support for the Internationalized Domain Names in\nApplications (IDNA) protocol as specified in ', '. This is the latest version of\nthe protocol and is sometimes referred to as “IDNA 2008”.', 'This library also provides support for Unicode Technical\nStandard 46, ', '.', 'This acts as a suitable replacement for the “encodings.idna”\nmodule that comes with the Python standard library, but which\nonly supports the older superseded IDNA specification (', ').', 'Basic functions are simply executed:', 'This package is available for installation from PyPI:', 'For typical usage, the ', ' and ', ' functions will take a\ndomain name argument and perform a conversion to A-labels or U-labels\nrespectively.', 'You may use the codec encoding and decoding methods using the\n', ' module:', 'Conversions can be applied at a per-label basis using the ', ' or\n', ' functions if necessary:', 'As described in ', ', the\nIDNA specification does not normalize input from different potential\nways a user may input a domain name. This functionality, known as\na “mapping”, is considered by the specification to be a local\nuser-interface issue distinct from IDNA conversion functionality.', 'This library provides one such mapping, that was developed by the\nUnicode Consortium. Known as ', ', it provides for both a regular\nmapping for typical applications, as well as a transitional mapping to\nhelp migrate from older IDNA 2003 applications.', 'For example, “Königsgäßchen” is not a permissible label as ', ' is not allowed (nor are capital letters in general).\nUTS 46 will convert this into lower case prior to applying the IDNA\nconversion.', 'Transitional processing provides conversions to help transition from\nthe older 2003 standard to the current standard. For example, in the\noriginal IDNA specification, the ', ' (ß) was\nconverted into two ', ' (ss), whereas in the current\nIDNA specification this conversion is not performed.', 'Implementors should use transitional processing with caution, only in\nrare cases where conversion from legacy labels to current labels must be\nperformed (i.e. IDNA implementations that pre-date 2008). For typical\napplications that just need to convert labels, transitional processing\nis unlikely to be beneficial and could produce unexpected incompatible\nresults.', 'Function calls from the Python built-in ', ' module are\nmapped to their IDNA 2008 equivalents using the ', ' module.\nSimply substitute the ', ' clause in your code to refer to the new\nmodule name.', 'All errors raised during the conversion following the specification\nshould raise an exception derived from the ', ' base\nclass.', 'More specific exceptions that may be generated as ', '\nwhen the error reflects an illegal combination of left-to-right and\nright-to-left characters in a label; ', ' when\na specific codepoint is an illegal character in an IDN label (i.e.\nINVALID); and ', ' when the codepoint is\nillegal based on its positional context (i.e. it is CONTEXTO or CONTEXTJ\nbut the contextual requirements are not satisfied.)', 'The IDNA and UTS 46 functionality relies upon pre-calculated lookup\ntables for performance. These tables are derived from computing against\neligibility criteria in the respective standards. These tables are\ncomputed using the command-line script ', '.', 'This tool will fetch relevant codepoint data from the Unicode repository\nand perform the required calculations to identify eligibility. There are\nthree main modes:', 'The tool accepts a number of arguments, described using ', '. Most notably, the ', ' argument allows the specification\nof the version of Unicode to use in computing the table data. For\nexample, ', ' will generate\nlibrary data against Unicode 9.0.0.', '\n      Internationalized Domain Names for Python (IDNA 2008 and UTS #46)\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '. Generates ', ' and\n', ', the pre-calculated lookup tables using for IDNA and\nUTS 46 conversions. Implementors who wish to track this library against\na different Unicode version may use this tool to manually generate a\ndifferent version of the ', ' and ', ' files.', '. Generate a table of the IDNA disposition\n(e.g. PVALID, CONTEXTJ, CONTEXTO) in the format found in Appendix\nB.1 of RFC 5892 and the pre-computed tables published by ', '.', '. Prints debugging output on the various\nproperties associated with an individual Unicode codepoint (in this\ncase, U+0061), that are used to assess the IDNA and UTS 46 status of a\ncodepoint. This is helpful in debugging or analysis.', '. The latest tagged release version is published in the\n', '.', '. This library supports Python 3.5 and higher.\nAs this library serves as a low-level toolkit for a variety of\napplications, many of which strive for broad compatibility with older\nPython versions, there is no rush to remove older intepreter support.\nRemoving support for older versions should be well justified in that the\nmaintenance burden has become too high.', '. Python 2 is supported by version 2.x of this library.\nWhile active development of the version 2.x series has ended, notable\nissues being corrected may be backported to 2.x. Use ""idna<3"" in your\nrequirements file if you need this library for a Python 2 application.', '. The library has a test suite based on each rule of the\nIDNA specification, as well as tests that are provided as part of the\nUnicode Technical Standard 46, ', '.', '. It is an occasional request to support emoji domains in\nthis library. Encoding of symbols like emoji is expressly prohibited by\nthe technical standard IDNA 2008 and emoji domains are broadly phased\nout across the domain industry due to associated security risks. For\nnow, applications that wish need to support these non-compliant labels\nmay wish to consider trying the encode/decode operation in this library\nfirst, and then falling back to using encodings.idna. See ', ' for more discussion.', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    '])"
