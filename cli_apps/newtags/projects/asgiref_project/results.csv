content
"(['django/asgiref', 'Name already in use', 'asgiref'], ['\n        ASGI specification and utilities\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'ASGI is a standard for Python asynchronous web apps and servers to communicate\nwith each other, and positioned as an asynchronous successor to WSGI. You can\nread more at ', 'This package includes ASGI base libraries, such as:', 'These allow you to wrap or decorate async or sync functions to call them from\nthe other style (so you can call async functions from a synchronous thread,\nor vice-versa).', 'In particular:', ""The idea is to make it easier to call synchronous APIs from async code and\nasynchronous APIs from synchronous code so it's easier to transition code from\none style to the other. In the case of Channels, we wrap the (synchronous)\nDjango view system with SyncToAsync to allow it to run inside the (asynchronous)\nASGI server."", 'Note that exactly what threads things run in is very specific, and aimed to\nkeep maximum compatibility with old synchronous code. See\n""Synchronous code & Threads"" below for a full explanation. By default,\n', ' will run all synchronous code in the program in the same\nthread for safety reasons; you can disable this for more performance with\n', ', but make sure that your code does\nnot rely on anything bound to threads (like database connections) when you do.', 'This is a drop-in replacement for ', ' that works with both\nthreads and asyncio Tasks. Even better, it will proxy values through from a\ntask-local context to a thread-local context when you use ', '\nto run things in a threadpool, and vice-versa for ', '.', 'If you instead want true thread- and task-safety, you can set\n', ' on the Local object to ensure this instead.', 'Includes a ', ' class which provides all the hard work of\nwriting a stateless server (as in, does not handle direct incoming sockets\nbut instead consumes external streams or sockets to work out what is happening).', 'An example of such a server would be a chatbot server that connects out to\na central chat server and provides a ""connection scope"" per user chatting to\nit. There\'s only one actual connection, but the server has to separate things\ninto several scopes for easier writing of the code.', 'You can see an example of this being used in ', '.', 'Allows you to wrap a WSGI application so it appears as a valid ASGI application.', 'Simply wrap it around your WSGI application like so:', 'The WSGI application will be run in a synchronous threadpool, and the wrapped\nASGI application will be one that accepts ', ' class messages.', 'Please note that not all extended features of WSGI may be supported (such as\nfile handles for incoming POST bodies).', ' requires Python 3.7 or higher.', 'Please refer to the\n', '.', 'To run tests, make sure you have installed the ', ' extra with the package:', 'The documentation uses ', ':', 'To build the docs, you can use the default tools:', '...or you can use ', ' to run a server and rebuild/reload\nyour documentation changes automatically:', 'To release, first add details to CHANGELOG.txt and update the version number in ', '.', 'Then, build and push the packages:', 'The ', ' module provides two wrappers that let you go between\nasynchronous and synchronous code at will, while taking care of the rough edges\nfor you.', 'Unfortunately, the rough edges are numerous, and the code has to work especially\nhard to keep things in the same thread as much as possible. Notably, the\nrestrictions we are working with are:', 'The first compromise you get to might be that ', ' code should\njust run in the same thread and not spawn in a sub-thread, fulfilling the first\nrestriction, but that immediately runs you into the second restriction.', 'The only real solution is to essentially have a variant of ThreadPoolExecutor\nthat executes any ', ' code on the outermost synchronous\nthread - either the main thread, or a single spawned subthread.', 'This means you now have two basic states:', 'Crucially, this means that in both cases there is a thread which is a shared\nresource that all ', ' code must run on, and there is a chance\nthat this thread is currently blocked on its own ', ' call. Thus,\n', "" needs to act as an executor for thread code while it's blocking."", 'The ', ' class provides this functionality; rather than\nsimply waiting on a Future, you can call its ', ' method and\nit will run submitted code until that Future is done. This means that code\ninside the call can then run code on your thread.', 'To report security issues, please contact ', '. For GPG\nsignatures and more security process information, see\n', '.', 'To report bugs or request new features, please open a new GitHub issue.', 'This repository is part of the Channels project. For the shepherd and maintenance team, please see the\n', '.', '\n      ASGI specification and utilities\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'Sync-to-async and async-to-sync function wrappers, ', 'Server base classes, ', 'A WSGI-to-ASGI adapter, in ', ""AsyncToSync lets a synchronous subthread stop and wait while the async\nfunction is called on the main thread's event loop, and then control is\nreturned to the thread when the async function is finished."", 'SyncToAsync lets async code call a synchronous function, which is run in\na threadpool and control returned to the async coroutine when the synchronous\nfunction completes.', 'All synchronous code called through ', ' and marked with\n', ' should run in the same thread as each other (and if the\nouter layer of the program is synchronous, the main thread)', 'If a thread already has a running async loop, ', "" can't run things\non that loop if it's blocked on synchronous code that is above you in the\ncall stack."", 'If the outermost layer of your program is synchronous, then all async code\nrun through ', ' will run in a per-call event loop in arbitrary\nsub-threads, while all ', ' code will run in the main thread.', ""If the outermost layer of your program is asynchronous, then all async code\nruns on the main thread's event loop, and all "", ' synchronous\ncode will run in a single shared sub-thread.', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    ', '\n        ', '\n    '])"
