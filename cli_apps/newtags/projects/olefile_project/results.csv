content
"([], ['(formerly OleFileIO_PL) is a Python package to parse, read and write ', ' (also called Structured Storage, Compound File Binary Format or Compound Document File Format), such as ', ', vbaProject.bin in MS Office 2007+ files, Image Composer and FlashPix files, Outlook MSG files, StickyNotes, several Microscopy file formats, McAfee antivirus quarantine files, etc.', ': ', ' - ', ' - ', ' - ', ' - ', ' - ', 'If you have pip or setuptools installed (pip is included in Python 2.7.9+), you may simply run ', ' or ', ' for the first installation.', 'To update olefile, run ', '.', 'Otherwise, see ', 'olefile can be used as an independent module or with PIL/Pillow.', 'olefile is mostly meant for developers. If you are looking for tools to analyze OLE files or to extract data (especially for security purposes such as malware analysis and forensics), then please also check my ', ', which are built upon olefile and provide a higher-level interface.', '\xa0', '\xa0', 'Please see the ', ' for more information.', 'See ', '\xa0', '\xa0', '\xa0', 'My question is: Can I extract all images from MS OLE2 documents with OleFileIO_PL ?', 'Not directly: images are not always stored the same way, and it also depends on the format.', 'For example in Powerpoint presentations, you may find a stream named ""Pictures"" when running ""OleFileIO_PL yourfile.ppt"". You may extract the stream by using the openstream() method on the OleFileIO object, but you will usually get a binary stream containing several picture files. You may also extract it manually using tools such as SSView (', ').', ""Then the only way I've found so far is to use file carving tools which are able to determine the beginning and the end of each picture in a binary file. These tools are not always easy to use but if you're interested have a look at "", ' and ', '.', 'If you really need to automate the process then you have to study Microsoft specifications (at ', ') and find the right way to parse MS Office documents...', 'A lot of people (including me) would be very interested if you find a solution! ;-)', 'I am trying to extract MS documents (xls,doc,ppt) embedded inside  as their original documents , How can i achieve this?', 'here is what i get:', 'n [6]: ole.dumpdirectory()', ""\n'Root Entry' (root) 2816 bytes"", '\n{00020820-0000-0000-C000-000000000046}', ""\n  '\\x01CompObj' (stream) 114 bytes"", ""\n  '\\x05DocumentSummaryInformation' (stream) 676 bytes"", ""\n  '\\x05SummaryInformation' (stream) 200 bytes"", ""\n  'MBD0005263B' (storage)"", '\n  {B801CA65-A1FC-11D0-85AD-444553540000}', ""\n    '\\x01CompObj' (stream) 93 bytes"", ""\n    '\\x01Ole' (stream) 20 bytes"", ""\n    'CONTENTS' (stream) 66833 bytes"", ""\n  'MBD00053027' (storage)"", '\n  {00020906-0000-0000-C000-000000000046}', ""\n    '\\x01CompObj' (stream) 121 bytes"", ""\n    '\\x01Ole' (stream) 20 bytes"", ""\n    '\\x05DocumentSummaryInformation' (stream) 5640 bytes"", ""\n    '\\x05SummaryInformation' (stream) 384 bytes"", ""\n    '1Table' (stream) 8095 bytes"", ""\n    'Data' (stream) 4563 bytes"", ""\n    'ObjectPool' (storage)"", ""\n      '_1347688647' (storage)"", '\n      {00020820-0000-0000-C000-000000000046}', ""\n        '\\x01CompObj' (stream) 114 bytes"", ""\n        '\\x01Ole' (stream) 20 bytes"", ""\n        '\\x03ObjInfo' (stream) 6 bytes"", ""\n        '\\x05DocumentSummaryInformation' (stream) 244 bytes"", ""\n        '\\x05SummaryInformation' (stream) 200 bytes"", ""\n        'MBD000465A6' (storage)"", '\n        {B801CA65-A1FC-11D0-85AD-444553540000}', ""\n          '\\x01CompObj' (stream) 93 bytes"", ""\n          '\\x01Ole' (stream) 20 bytes"", ""\n          'CONTENTS' (stream) 66833 bytes"", ""\n        'Workbook' (stream) 36816 bytes"", ""\n    'WordDocument' (stream) 15924 bytes"", ""\n  'Workbook' (stream) 175989 bytes"", 'Unfortunately there is currently no way to extract embedded MS Office documents with OleFileIO alone, because they are not stored as a single stream but as a collection of streams in a storage object (see the ones starting with ""MBD"" in your example). So extracting them requires to create a new OLE document from scratch, and to rebuild their structure with several streams.', 'There might be alternative solutions: see the message about Excel below, or try the ', ' modules if your code runs on Windows (see ', ' and then maybe the EnumElements, OpenStorage and CopyTo methods of the ', ' object). ', 'def extract_embedded_ole()', '\n\t\tole = OleFileIO_PL.OleFileIO( fname )', '\n\t\ti = 0', '\n\t\tfor stream in ole.listdir():', '\n\t\t\tfor s in stream:', '\n\t\t\t\tif type( stream ) == type( [] ) and len( stream ) > 1:', '\n\t\t\t\t\ti += 1', '\n\t\t\t\t\tif ole.get_type( stream ) == 2 and s in [\'Workbook\', \'WordDocument\', \'Package\', \'WordDocument\',\'VisioDocument\' ,\'PowerPoint Document\', ""Book"", ""CONTENTS""]:', '\n\t\t\t\t\t\tole_stream = ole.openstream( stream )', ""\n\t\t\t\t\t\tole_props = ole.getproperties( ['\\x05SummaryInformation'] )"", '\n\t\t\t\t\t\tout_dir = fname + "".embeddings/"" + ""/"".join( stream[:-1] )', '\n\t\t\t\t\t\ttry:', '\n\t\t\t\t\t\t\tos.makedirs( out_dir )', '\n\t\t\t\t\t\texcept OSError:', '\n\t\t\t\t\t\t\tpass', '\t\t\t\t\t\t#Write out Streams', '\n\t\t\t\t\t\tout_name = out_dir + ""/"" + os.path.split( fname )[1] + ""-emb-"" + s + ""-"" + str( i ) + "".ole""', ""\n\t\t\t\t\t\tout_file = open( out_name, 'w+b' )"", '\n\t\t\t\t\t\tout_file.write( ole_stream.read() )', '\n\t\t\t\t\t\tout_file.close()', ""On 64-bit systems, array.array('L', ...) expects the buffer to be 64-bit aligned, so OleFileIO_PL doesn't work there."", ""The fix is to change all calls like array.array('L', ...) to array.array('I', ...)."", 'Hoi,', 'Nice library. Did find a problem with it while using it on a 64-bit system. The construct', 'a = array.array(""L"", string)', 'is used often and doesn\'t work on 64-bit system where for some reason the above eats chunks of 8-bytes. Replacing all the occurrences with array.array(""I"", string) fixes the issue.', 'Works perfectly otherwise.', 'Thanks a lot Ben and Martijn for reporting that bug.', 'I have made the suggested change in v0.19. Please tell me if it works.', 'Philippe.', 'On the 64-bit systems I have access to it works fine, thanks.', 'Hi,', 'First, thanks for writing this, it is much helpful.', 'I need to get the data values (sheet) from MSGraph.', '\nI did:', ""\nf=OleFileIO_PL.OleFileIO('mygraphfile')"", '\nf.listdir()', ""\noutput: [['\\x01CompObj'], ['\\x01Ole'], ['Workbook']]"", 'and now:', ""\nf.openstream('Workbook').read()"", '\ngave me a binary stream, where I recognized the data in.', '\nIs there a way to grep the data from the binary stream?', 'Thanks again,', 'Naor.', 'Naor, OleFileIO is only meant to parse the OLE2 structure, not the binary streams inside which are different for each application (MS Word, Excel, Powerpoint, etc). Here are a few potential solutions:', ""I'm interested in just extracting all the text for .doc files, for the purpose of building a search index.  Any ideas on how to do this?"", 'When I read a docfile and I go to print ole.openstream(""WordDocument""), I get the text, as well as tons of other binary gibberish.  Is there another format inside this stream I\'d have to parse to just extract the text?', 'I am trying to use this plugin for reading in a ZVI file format for Zeiss Microscopy products, which is based upon OLE2.  ', 'In the process I discovered what I think is a bug based upon the assumption that the sectorsize is 512 bytes.', 'line 1274 was', '\nself.directory_fp = self._open(sect)', '\nnow i have it', '\nself.directory_fp = self._open(sect,sectorsize=self.SectorSize)', 'line 1330 was', '\n def _open(self, start, size = 0x7FFFFFFF, force_FAT=False)', '\nnow i have it', '\n def _open(self, start, size = 0x7FFFFFFF, force_FAT=False,sectorsize=512):', 'lines 1359-1360 were', '\n return _OleStream(self.fp, start, size, sectorsize,', '\n                              512, self.fat)', '\nnow i have', '\n return _OleStream(self.fp, start, size, sectorsize,', '\n                              self.sectorsize, self.fat)', 'This made the basic test program given above go from failing to working on a test zvi file format which has a 4096 byte sectorsize.', ""I'm still playing around with using it further, but I hope that the success of reading the directory structure means the rest will work as designed."", 'Forrest', 'Thanks a lot for reporting the bug and providing a solution, Forrest. I will publish an updated version soon, with other improvements. In the meantime, could you please send me sample ZVI files by e-mail, so that I check if everything works fine?', 'Hello decleage', 'I want to detect if ole file is Outlook MSG or not (in case of  MS Outlooks with changed extensions) .', 'i do this :', '\nole = OleFileIO_PL.OleFileIO(""./ol-msg.msg "")', '\nole.listdir()', '\n>>[]', ' it gives empty List', 'what i need to do to list out contents?', 'i tested with 7zip . ', '7z -l ol-msg.msg', 'and it prints out contents fine :', 'Listing archive: ID0020.msg', '--', '\nPath = ID0020.msg', '\nType = Compound', '\nCluster Size = 4096', '\nSector Size = 64', '   Date      Time    Attr         Size   Compressed  Name', '\n------------------- ----- ------------ ------------  ------------------------', '\n2011-07-16 02:28:00 D....                            __recip_version1.0_#00000003', '\n2011-07-16 02:28:00 D....                            __recip_version1.0_#00000002', '\n2011-07-16 02:28:00 D....                            __recip_version1.0_#00000001', '\n...', 'Is this awesome project already dead or abandoned?', 'If you abandoned can you host your code at github or bitbucket so people can clone easy and contiue supporting it.', ""This project is not dead, but that's true I haven't touched the code for a while. I just created a repository on bitbucket for it, so that it is easier to contribute: "", 'See the ', ' for known bugs and enhancements that have not yet been fixed in the code. Please use it to report any other bug you might have found.', 'I\'m looking to write some python code that picks up TAGs that I\'ll embed within a word document. These Tags will serve as placeholders to insert content. In my case, I\'m trying to develop a ""survey/Questionnaire"" Python script, that takes as input a word document that serves as a ""template"" (has all the formatting I want). I want my python code to read the word document, find the tags, and then execute appropriate handlers. For instance, one handler will be simply to look up the associated content from a database, and then inserting that content into the file. ', 'Can anyone show a snippet of code that would read for a string, and replace that string with another? Should I simply be using Win32Com instead? ', ""(yes, I'm a newb - trying to quickly come up to speed)"", ""I'd like to also manage more complex formatting from Python - such as creating tables - setting margins, etc. But that's down the road... but, can anyone comment if such a thing is possible?"", ""Unfortunately you can't do that with OleFileIO, because it is currently still a parser (no editing), and it only parses the OLE2 structure, not the specific Word content."", 'However, maybe you can achieve this using python-docx? : ', 'You may also try win32com, by using OLE to control the MS Word application.', 'On a similar topic, I just published a new module to parse MS Word forms with tags, called ', '.', 'Hello, ', 'I passed a file() to OleFileIO() and got an error in this line 979:', '\n        filesize = os.path.getsize(filename)', '\nbut in line 847 you check for a file object', ""\n        if hasattr(filename, 'read'):"", 'just for your information.', '\nthanks for this module!', 'Thanks a lot for reporting this bug, indeed OleFileIO should support file-like objects.', 'I opened a ticket for this, will fix the code soon: ', ""This your library is really easy to get up and running to look at the structure of a Word doc, but what I am mainly interested in is the actual text.  I'd like to be able to get the 'WordDocument' portion of the stream and discard anything that isn't actual content so I'm left with just a plain text version of the document."", 'Following the examples it is easy to get the document to parse but outputting pieces of the stream still includes binary data.  Is there a way to get only the text?', ""I'm trying to parse uploaded documents to pull out key words for search indexing.  I have PDF and DOCX working using (PyPDF and python-docx) but old school DOC files are troublesome and unfortunately still extremely commonly used.  This library is one of the few I have found that will handle old DOC formats."", 'Any advice would be appreciated!', 'Hey,', ""to replace data inside an OLE file I'd like to get a list of where each sector starts and ends for a specific stream of the OLE."", 'I started by collecting ""offset + sectorsize * sect"" in _OleStream under ""for i in range(nb_sectors):"", but that doesn\'t work for all OLE files, as apparently _OleStream is sometimes used to read somehow pre-processed data.', 'So, let\'s say the OLE includes a stream ""example.txt"", and it\'s 600 bytes long; I\'d like to get a list that might look, for example, like this:', '\n[', '\n    [2048, 2175], # 128 bytes', '\n    [2176, 2303], # 128 bytes', '\n    [2304, 2431], # 128 bytes', '\n    [2560, 2687], # 128 bytes', '\n    [17408, 17495] # 88 bytes', '\n]', ""This would enable anyone to quite easily write new data into an OLE file, as long as the size and structure of things remain the same. I'm aware I might be breaking some checksums somewhere or something, but that's not an important issue in my case."", 'Can I get some help?', 'Hi Rudolf, adding the possibility to write sectors and streams back to an OLE file is something that I plan to implement for a long time. I think it would be easier to provide methods to overwrite a single sector, and then to overwrite an existing stream by data of the same size. This is recorded in this ticket: ', ' - Would that cover your needs?', '\r\nExcept where otherwise noted, all content on this site ', ' is licensed by ', ' under a ', '.', ': OleFileIO can now be used as a context manager (with…as), to close the file automatically (see ', '). Improved handling of malformed files, fixed several bugs.', '2018-01-24 v0.45: olefile can now overwrite streams of any size, improved handling of malformed files, fixed several ', ', end of support for Python 2.6 and 3.3.', '2017-01-06 v0.44: several bugfixes, removed support for Python 2.5 (olefile2), added support for incomplete streams and incorrect directory entries (to read malformed documents), added getclsid, improved ', ' with API reference.', '2017-01-04: moved the documentation to ', '2016-05-20: moved olefile repository to ', '2016-02-02 v0.43: fixed issues ', ' and ', ', better handling of malformed files, use python logging.', '2015-01-25 v0.42: improved handling of special characters in stream/storage names on Python 2.x (using UTF-8 instead of Latin-1), fixed bug in listdir with empty storages.', '2014-11-25 v0.41: OleFileIO.open and isOleFile now support OLE files stored in byte strings, fixed installer for python 3, added support for Jython (Niko Ehrenfeuchter)', '2014-10-01 v0.40: renamed OleFileIO_PL to olefile, added initial write support for streams >4K, updated doc and license, improved the setup script.', 'Parse/read/write any OLE file such as Microsoft Office 97-2003 legacy document formats (Word .doc, Excel .xls, PowerPoint .ppt, Visio .vsd, Project .mpp), Image Composer and FlashPix files, Outlook messages, StickyNotes, Zeiss AxioVision ZVI files, ...', 'List all the streams and storages contained in an OLE file', 'Open streams as files', 'Parse and read property streams, containing metadata of the file', ': a package of python tools to analyze OLE files and MS Office documents, mainly for malware analysis and debugging. It includes olebrowse, a graphical tool to browse and extract OLE streams, oleid to quickly identify characteristics of malicious documents, olevba to detect/extract/analyze VBA macros, and pyxswf to extract Flash objects (SWF) from OLE files.', ': a tool to analyze malicious MS Office documents and extract VBA macros', ': to\xa0scan and clean active content in file formats (e.g. MS Office VBA macros)', ':\xa0 to display records inside Excel and PowerPoint files', ': a malware analysis tool', ': a malware analysis tool', ': to extract images from PowerPoint presentations', ': to parse MS Outlook MSG files', ': hwp file format python parser', ': a tool to crack MS\xa0Office files using RC4 40-bit encryption', ': a tool to extract files from McAfee antivirus quarantine files (.bup)', ': a framework to store, classify and investigate binary files of any sort for malware analysis (also includes code from ', ')', ': the friendly fork of ', ', the Python Image Library', ': a digital image forensics tool', ': A distributed fuzzing testing suite, using olefile to fuzz OLE streams and write them back to OLE files.', 'Write your own parser on top of OleFileIO, following ', '.', ' - to create and read Excel files', ' (a new fork of pyExcelerator) - not sure it can parse files', ' - to read Excel files', ' - tools based on xlrd and xlwt', 'or ask your question on '])"
