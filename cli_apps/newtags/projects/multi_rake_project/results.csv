content
"(['vgrabovets/multi_rake', 'Name already in use', 'Multilingual Rapid Automatic Keyword Extraction (RAKE) for Python', 'Default 3', 'Default 3', 'Default 1', 'Default None', 'Default None', 'Default 50', 'Default 2', 'Default 80', 'Default 3', 'Default 2'], ['\n        Multilingual Rapid Automatic Keyword Extraction (RAKE) for Python\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'If installation fails due to ', ' error ', ', than it can be installed with', ""English text, we don't specify explicitly language nor list of stopwords (built-in list is used)."", 'Text written in Esperanto (article about ', ').\nThere is no list of stopwords for this language, they will be generated from provided text.', ' consists of three first paragraphs of introduction. ', ' - all other text.', 'So, we are able to get decent result without explicit set of stopwords.', 'Initialize rake object', ' - word is selected to be part of keyword if its length is >= min_chars. ', ' - maximum number of words in phrase considered to be a keyword. ', ' - minimum number of occurences of a phrase to be considered a keyword. ', ' - provide language code as string to use built-in set of stopwords. See list of available languages. If language is not specified algorithm will try to determine language with ', ' and use corresponding set of built-in stopwords. ', ' - provide own collection of stopwords (preferably as set, lowercased). Overrides ', ' if it was specified. ', 'Keep ', ' and ', ' as ', ' and stopwords will be generated from provided text.', ' - threshold for probability of detected language in ', ' (0-100). ', ' - the same as ', ' but will be used if language is unknown and stopwords are generated from provided text. Usually the best result is obtained when specifically crafted set of stopwords is used, in case of its absence and usage of generated stopwords resulting keywords may not be as pretty and it may be good idea, for example, to produce 2-word keywords for unknown languages and 3-word keywords for languages with predefined sets of stopwords. ', ' - to generate stopwords we create distribution of every word in text by frequency. Words above this percentile (0 - 100) will be considered candidates to become stopwords. ', ' - maximum character length of generated stopwords. ', ' - minimum frequency of generated stopwords in the distribution. ', 'Apply rake object to text.', ' - string containing text from which keywords should be generated.', ' - string containing text which will be used for stopwords generation alongside ', "". For example, you have article with introduction and several subsections. You know that for your purposes keywords from introduction will suffice, you don't know language of text nor you have list of stopwords. So stopwords can be generated from text itself and the more text you have, the better. Than you may specify "", '.', 'RAKE algorithm works as described in Rose, S., Engel, D., Cramer, N., & Cowley, W. (2010). Automatic Keyword Extraction from Individual Documents. In M. W. Berry & J. Kogan (Eds.), Text Mining: Theory and Applications: John Wiley & Sons', 'This implementation is different from others by its multilingual support.\nBasically you may provide text without knowing its language (it should be written with cyrillic or latin alphabets),\nwithout explicit list of stopwords and get decent result.\nThough the best result is achieved with thoroughly constructed list of stopwords.', 'What is happening under the hood:', 'We generate stopwords by creating frequency distribution of words in text and filtering them with parameters ', ', ', ', ', "". We won't be able to generate them perfectly but it is rather easy to find articles and prepositions, because usually they consist of 3-4 characters and appear frequently. These stopwords, coupled with punctuation delimiters, enable us to get decent results for languages we don't understand."", 'During RAKE initialization only language code should be used.', 'Repository has configured linter, tests and coverage.', 'Create new virtual environment inside multi_rake folder in order to use it.', 'RAKE algorithm: Rose, S., Engel, D., Cramer, N., & Cowley, W. (2010). Automatic Keyword Extraction from Individual Documents. In M. W. Berry & J. Kogan (Eds.), Text Mining: Theory and Applications: John Wiley & Sons', 'As a basis RAKE implementation by ', ' was used.', 'Stopwords: ', ', ', '\n      Multilingual Rapid Automatic Keyword Extraction (RAKE) for Python\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'Automatic keyword extraction from text written in any language', 'No need to know language of text beforehand', 'No need to have list of stopwords', '26 languages are currently available, for the rest - stopwords are generated from provided text', 'Just configure rake, plug in text and get keywords (see implementation details)', 'if stopwords are specified, then they will be used', 'if language is specified, then built-in stopwords for this language will be used, if there are no built-in stopwords --> 4', 'if language is not specified, then ', ' will try to determine language --> 2', 'stopwords are generated from ', ' and ', 'bg - Bulgarian', 'cs - Czech', 'da - Danish', 'de - German', 'el - Greek', 'en - English', 'es - Spanish', 'fa - Persian', 'fi - Finnish', 'fr - French', 'ga - Irish', 'hr - Croatian', 'hu - Hungarian', 'id - Indonesian', 'it - Italian', 'lt - Lithuanian', 'lv - latvian', 'nl - Dutch', 'no - Norwegian', 'pl - Polish', 'pt - Portuguese', 'ro - Romanian', 'ru - Russian', 'sk - Slovak', 'sv - Swedish', 'tr - Turkish', 'uk - Ukrainian', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n        ', '\n    '])"
content
"(['vgrabovets/multi_rake', 'Name already in use', 'Multilingual Rapid Automatic Keyword Extraction (RAKE) for Python', 'Default 3', 'Default 3', 'Default 1', 'Default None', 'Default None', 'Default 50', 'Default 2', 'Default 80', 'Default 3', 'Default 2'], ['\n        Multilingual Rapid Automatic Keyword Extraction (RAKE) for Python\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'If installation fails due to ', ' error ', ', than it can be installed with', ""English text, we don't specify explicitly language nor list of stopwords (built-in list is used)."", 'Text written in Esperanto (article about ', ').\nThere is no list of stopwords for this language, they will be generated from provided text.', ' consists of three first paragraphs of introduction. ', ' - all other text.', 'So, we are able to get decent result without explicit set of stopwords.', 'Initialize rake object', ' - word is selected to be part of keyword if its length is >= min_chars. ', ' - maximum number of words in phrase considered to be a keyword. ', ' - minimum number of occurences of a phrase to be considered a keyword. ', ' - provide language code as string to use built-in set of stopwords. See list of available languages. If language is not specified algorithm will try to determine language with ', ' and use corresponding set of built-in stopwords. ', ' - provide own collection of stopwords (preferably as set, lowercased). Overrides ', ' if it was specified. ', 'Keep ', ' and ', ' as ', ' and stopwords will be generated from provided text.', ' - threshold for probability of detected language in ', ' (0-100). ', ' - the same as ', ' but will be used if language is unknown and stopwords are generated from provided text. Usually the best result is obtained when specifically crafted set of stopwords is used, in case of its absence and usage of generated stopwords resulting keywords may not be as pretty and it may be good idea, for example, to produce 2-word keywords for unknown languages and 3-word keywords for languages with predefined sets of stopwords. ', ' - to generate stopwords we create distribution of every word in text by frequency. Words above this percentile (0 - 100) will be considered candidates to become stopwords. ', ' - maximum character length of generated stopwords. ', ' - minimum frequency of generated stopwords in the distribution. ', 'Apply rake object to text.', ' - string containing text from which keywords should be generated.', ' - string containing text which will be used for stopwords generation alongside ', "". For example, you have article with introduction and several subsections. You know that for your purposes keywords from introduction will suffice, you don't know language of text nor you have list of stopwords. So stopwords can be generated from text itself and the more text you have, the better. Than you may specify "", '.', 'RAKE algorithm works as described in Rose, S., Engel, D., Cramer, N., & Cowley, W. (2010). Automatic Keyword Extraction from Individual Documents. In M. W. Berry & J. Kogan (Eds.), Text Mining: Theory and Applications: John Wiley & Sons', 'This implementation is different from others by its multilingual support.\nBasically you may provide text without knowing its language (it should be written with cyrillic or latin alphabets),\nwithout explicit list of stopwords and get decent result.\nThough the best result is achieved with thoroughly constructed list of stopwords.', 'What is happening under the hood:', 'We generate stopwords by creating frequency distribution of words in text and filtering them with parameters ', ', ', ', ', "". We won't be able to generate them perfectly but it is rather easy to find articles and prepositions, because usually they consist of 3-4 characters and appear frequently. These stopwords, coupled with punctuation delimiters, enable us to get decent results for languages we don't understand."", 'During RAKE initialization only language code should be used.', 'Repository has configured linter, tests and coverage.', 'Create new virtual environment inside multi_rake folder in order to use it.', 'RAKE algorithm: Rose, S., Engel, D., Cramer, N., & Cowley, W. (2010). Automatic Keyword Extraction from Individual Documents. In M. W. Berry & J. Kogan (Eds.), Text Mining: Theory and Applications: John Wiley & Sons', 'As a basis RAKE implementation by ', ' was used.', 'Stopwords: ', ', ', '\n      Multilingual Rapid Automatic Keyword Extraction (RAKE) for Python\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'Automatic keyword extraction from text written in any language', 'No need to know language of text beforehand', 'No need to have list of stopwords', '26 languages are currently available, for the rest - stopwords are generated from provided text', 'Just configure rake, plug in text and get keywords (see implementation details)', 'if stopwords are specified, then they will be used', 'if language is specified, then built-in stopwords for this language will be used, if there are no built-in stopwords --> 4', 'if language is not specified, then ', ' will try to determine language --> 2', 'stopwords are generated from ', ' and ', 'bg - Bulgarian', 'cs - Czech', 'da - Danish', 'de - German', 'el - Greek', 'en - English', 'es - Spanish', 'fa - Persian', 'fi - Finnish', 'fr - French', 'ga - Irish', 'hr - Croatian', 'hu - Hungarian', 'id - Indonesian', 'it - Italian', 'lt - Lithuanian', 'lv - latvian', 'nl - Dutch', 'no - Norwegian', 'pl - Polish', 'pt - Portuguese', 'ro - Romanian', 'ru - Russian', 'sk - Slovak', 'sv - Swedish', 'tr - Turkish', 'uk - Ukrainian', '\n      ', '\n      ', '    ', '\n      ', '\n      ', '    ', '\n      ', '\n      ', '    ', '\n        ', '\n    '])"
