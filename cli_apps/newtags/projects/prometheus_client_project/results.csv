content
"(['prometheus/client_python', 'Name already in use', 'Prometheus Python Client'], ['\n        Prometheus instrumentation library for Python applications\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'The official Python client for ', '.', ': Install the client:', ': Paste the following into a Python interpreter:', ': Visit ', ' to view the metrics.', 'From one easy to use decorator you get:', ""Prometheus's "", ' function allows calculation of both requests per second,\nand latency over time from this data.', ""In addition if you're on Linux the "", ' metrics expose CPU, memory and\nother information about the process for free!', 'This package can be found on\n', '.', 'Four types of metric are offered: Counter, Gauge, Summary and Histogram.\nSee the documentation on ', '\nand ', '\non how to use them.', 'Counters go up, and reset when the process restarts.', 'If there is a suffix of ', ' on the metric name, it will be removed. When\nexposing the time series for counter, a ', ' suffix will be added. This is\nfor compatibility between OpenMetrics and the Prometheus text format, as OpenMetrics\nrequires the ', ' suffix.', 'There are utilities to count exceptions raised:', 'Gauges can go up and down.', 'There are utilities for common use cases:', 'A Gauge can also take its value from a callback:', 'Summaries track the size and number of events.', 'There are utilities for timing code:', ""The Python client doesn't store or expose quantile information at this time."", 'Histograms track the size and number of events in buckets.\nThis allows for aggregatable calculation of quantiles.', 'The default buckets are intended to cover a typical web/rpc request from milliseconds to seconds.\nThey can be overridden by passing ', ' keyword argument to ', '.', 'There are utilities for timing code:', 'Info tracks key-value information, usually about a whole target.', 'Enum tracks which of a set of states something is currently in.', 'All metrics can have labels, allowing grouping of related time series.', 'See the best practices on ', '\nand ', '.', 'Taking a counter as an example:', 'Labels can also be passed as keyword-arguments:', ""Metrics with labels are not initialized when declared, because the client can't\nknow what values the label can have. It is recommended to initialize the label\nvalues by calling the "", ' method alone:', 'Exemplars can be added to counter and histogram metrics. Exemplars can be\nspecified by passing a dict of label value pairs to be exposed as the exemplar.\nFor example with a counter:', 'And with a histogram:', 'By default counters, histograms, and summaries export an additional series\nsuffixed with ', ' and a value of the unix timestamp for when the metric\nwas created. If this information is not helpful, it can be disabled by setting\nthe environment variable ', '.', 'The Python client automatically exports metrics about process CPU usage, RAM,\nfile descriptors and start time. These all have the prefix ', ', and\nare only currently available on Linux.', 'The namespace and pid constructor arguments allows for exporting metrics about\nother processes, for example:', 'The client also automatically exports some metadata about Python. If using Jython,\nmetadata about the JVM in use is also included. This information is available as\nlabels on the ', ' metric. The value of the metric is 1, since it is the\nlabels that carry information.', 'By default the collected ', ', ', ', and ', ' collector metrics are exported.\nIf this information is not helpful, it can be disabled using the following:', 'There are several options for exporting metrics.', 'Metrics are usually exposed over HTTP, to be read by the Prometheus server.', 'The easiest way to do this is via ', ', which will start a HTTP\nserver in a daemon thread on the given port:', 'Visit ', ' to view the metrics.', 'To add Prometheus exposition to an existing HTTP server, see the ', ' class\nwhich provides a ', '. It also serves as a simple example of how\nto write a custom endpoint.', 'To use prometheus with ', ', there is ', ' which exposes metrics as a twisted resource.', 'To use Prometheus with ', ', there is\n', ' which creates a WSGI application.', 'Such an application can be useful when integrating Prometheus metrics with WSGI\napps.', 'The method ', ' can be used to serve the metrics through the\nWSGI reference implementation in a new thread.', 'By default, the WSGI application will respect ', ' headers used by Prometheus\nand compress the response if such a header is present. This behaviour can be disabled by passing\n', ' when creating the app, like this:', 'To use Prometheus with ', ', there is\n', ' which creates an ASGI application.', 'Such an application can be useful when integrating Prometheus metrics with ASGI\napps.', 'By default, the WSGI application will respect ', ' headers used by Prometheus\nand compress the response if such a header is present. This behaviour can be disabled by passing\n', ' when creating the app, like this:', 'To use Prometheus with ', ' we need to serve metrics through a Prometheus WSGI application. This can be achieved using ', '. Below is a working example.', 'Save the snippet below in a ', ' file', 'Run the example web application like this', 'Visit ', ' to see the metrics', 'The ', '\nallows machine-level statistics to be exported out via the Node exporter.', 'This is useful for monitoring cronjobs, or for writing cronjobs to expose metrics\nabout a machine system that the Node exporter does not support or would not make sense\nto perform at every scrape (for example, anything involving subprocesses).', 'A separate registry is used, as the default registry may contain other metrics\nsuch as those from the Process Collector.', 'The ', '\nallows ephemeral and batch jobs to expose their metrics to Prometheus.', 'A separate registry is used, as the default registry may contain other metrics\nsuch as those from the Process Collector.', 'Pushgateway functions take a grouping key. ', ' replaces metrics\nwith the same grouping key, ', ' only replaces metrics with the\nsame name and grouping key and ', ' deletes metrics with the\ngiven job and grouping key. See the\n', '\nfor more information.', "" returns a grouping key with the instance label set\nto the host's IP address."", 'If the push gateway you are connecting to is protected with HTTP Basic Auth,\nyou can use a special handler to set the Authorization header.', 'TLS Auth is also supported when using the push gateway with a special handler.', 'It is also possible to expose metrics to systems other than Prometheus.\nThis allows you to take advantage of Prometheus instrumentation even\nif you are not quite ready to fully transition to Prometheus yet.', 'Metrics are pushed over TCP in the Graphite plaintext format.', 'Graphite ', ' are also supported.', 'Sometimes it is not possible to directly instrument code, as it is not\nin your control. This requires you to proxy metrics from other systems.', 'To do so you need to create a custom collector, for example:', ', ', ' and ', ' work similarly.', 'A collector may implement a ', ' method which returns metrics in the same\nformat as ', "" (though you don't have to include the samples). This is\nused to predetermine the names of time series a "", ' exposes and\nthus to detect collisions and duplicate registrations.', 'Usually custom collectors do not have to implement ', '. If ', ' is\nnot implemented and the CollectorRegistry was created with ', '\n(which is the case for the default registry) then ', ' will be called at\nregistration time instead of ', '. If this could cause problems, either\nimplement a proper ', "", or if that's not practical have "", '\nreturn an empty list.', ""Prometheus client libraries presume a threaded model, where metrics are shared\nacross workers. This doesn't work so well for languages such as Python where\nit's common to have processes rather than threads to handle large workloads."", 'To handle this the client library can be put in multiprocess mode.\nThis comes with a number of limitations:', ""There's several steps to getting this working:"", ':', 'The ', ' environment variable must be set to a directory\nthat the client library can use for metrics. This directory must be wiped\nbetween process/Gunicorn runs (before startup is recommended).', 'This environment variable should be set from a start-up shell script,\nand not directly from Python (otherwise it may not propagate to child processes).', ':', 'The application must initialize a new ', ', and store the\nmulti-process collector inside. It is a best practice to create this registry\ninside the context of a request to avoid metrics registering themselves to a\ncollector used by a ', '. If a registry with metrics\nregistered is used by a ', ' duplicate metrics may be\nexported, one for multiprocess, and one for the process serving the request.', ':', 'The ', ' configuration file needs to include the following function:', ':', 'When ', 's are used in multiprocess applications,\nyou must decide how to handle the metrics reported by each process.\nGauges have several modes they can run in, which can be selected with the ', ' parameter.', ""Prepend 'live' to the beginning of the mode to return the same result but only considering living processes\n(e.g., 'liveall, 'livesum', 'livemax', 'livemin')."", 'The Python client supports parsing the Prometheus text format.\nThis is intended for advanced use cases where you have servers\nexposing Prometheus metrics and need to get them into some other\nsystem.', '\n      Prometheus instrumentation library for Python applications\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ': Number of times this function was called.', ': Total amount of time spent in this function.', 'Registries can not be used as normal, all instantiated metrics are exported\n', 'Registering metrics to a registry later used by a ', '\nmay cause duplicate metrics to be exported', '\n', 'Custom collectors do not work (e.g. cpu and memory metrics)', 'Info and Enum metrics do not work', 'The pushgateway cannot be used', 'Gauges cannot use the ', ' label', 'Exemplars are not supported', ""'all': Default. Return a timeseries per process (alive or dead), labelled by the process's "", ' (the label is added internally).', ""'min': Return a single timeseries that is the minimum of the values of all processes (alive or dead)."", ""'max': Return a single timeseries that is the maximum of the values of all processes (alive or dead)."", ""'sum': Return a single timeseries that is the sum of the values of all processes (alive or dead)."", ': The releases page shows the history of the project and acts as a changelog.', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    '])"
content
"(['prometheus/client_python', 'Name already in use', 'Prometheus Python Client'], ['\n        Prometheus instrumentation library for Python applications\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'The official Python client for ', '.', ': Install the client:', ': Paste the following into a Python interpreter:', ': Visit ', ' to view the metrics.', 'From one easy to use decorator you get:', ""Prometheus's "", ' function allows calculation of both requests per second,\nand latency over time from this data.', ""In addition if you're on Linux the "", ' metrics expose CPU, memory and\nother information about the process for free!', 'This package can be found on\n', '.', 'Four types of metric are offered: Counter, Gauge, Summary and Histogram.\nSee the documentation on ', '\nand ', '\non how to use them.', 'Counters go up, and reset when the process restarts.', 'If there is a suffix of ', ' on the metric name, it will be removed. When\nexposing the time series for counter, a ', ' suffix will be added. This is\nfor compatibility between OpenMetrics and the Prometheus text format, as OpenMetrics\nrequires the ', ' suffix.', 'There are utilities to count exceptions raised:', 'Gauges can go up and down.', 'There are utilities for common use cases:', 'A Gauge can also take its value from a callback:', 'Summaries track the size and number of events.', 'There are utilities for timing code:', ""The Python client doesn't store or expose quantile information at this time."", 'Histograms track the size and number of events in buckets.\nThis allows for aggregatable calculation of quantiles.', 'The default buckets are intended to cover a typical web/rpc request from milliseconds to seconds.\nThey can be overridden by passing ', ' keyword argument to ', '.', 'There are utilities for timing code:', 'Info tracks key-value information, usually about a whole target.', 'Enum tracks which of a set of states something is currently in.', 'All metrics can have labels, allowing grouping of related time series.', 'See the best practices on ', '\nand ', '.', 'Taking a counter as an example:', 'Labels can also be passed as keyword-arguments:', ""Metrics with labels are not initialized when declared, because the client can't\nknow what values the label can have. It is recommended to initialize the label\nvalues by calling the "", ' method alone:', 'Exemplars can be added to counter and histogram metrics. Exemplars can be\nspecified by passing a dict of label value pairs to be exposed as the exemplar.\nFor example with a counter:', 'And with a histogram:', 'By default counters, histograms, and summaries export an additional series\nsuffixed with ', ' and a value of the unix timestamp for when the metric\nwas created. If this information is not helpful, it can be disabled by setting\nthe environment variable ', '.', 'The Python client automatically exports metrics about process CPU usage, RAM,\nfile descriptors and start time. These all have the prefix ', ', and\nare only currently available on Linux.', 'The namespace and pid constructor arguments allows for exporting metrics about\nother processes, for example:', 'The client also automatically exports some metadata about Python. If using Jython,\nmetadata about the JVM in use is also included. This information is available as\nlabels on the ', ' metric. The value of the metric is 1, since it is the\nlabels that carry information.', 'By default the collected ', ', ', ', and ', ' collector metrics are exported.\nIf this information is not helpful, it can be disabled using the following:', 'There are several options for exporting metrics.', 'Metrics are usually exposed over HTTP, to be read by the Prometheus server.', 'The easiest way to do this is via ', ', which will start a HTTP\nserver in a daemon thread on the given port:', 'Visit ', ' to view the metrics.', 'To add Prometheus exposition to an existing HTTP server, see the ', ' class\nwhich provides a ', '. It also serves as a simple example of how\nto write a custom endpoint.', 'To use prometheus with ', ', there is ', ' which exposes metrics as a twisted resource.', 'To use Prometheus with ', ', there is\n', ' which creates a WSGI application.', 'Such an application can be useful when integrating Prometheus metrics with WSGI\napps.', 'The method ', ' can be used to serve the metrics through the\nWSGI reference implementation in a new thread.', 'By default, the WSGI application will respect ', ' headers used by Prometheus\nand compress the response if such a header is present. This behaviour can be disabled by passing\n', ' when creating the app, like this:', 'To use Prometheus with ', ', there is\n', ' which creates an ASGI application.', 'Such an application can be useful when integrating Prometheus metrics with ASGI\napps.', 'By default, the WSGI application will respect ', ' headers used by Prometheus\nand compress the response if such a header is present. This behaviour can be disabled by passing\n', ' when creating the app, like this:', 'To use Prometheus with ', ' we need to serve metrics through a Prometheus WSGI application. This can be achieved using ', '. Below is a working example.', 'Save the snippet below in a ', ' file', 'Run the example web application like this', 'Visit ', ' to see the metrics', 'The ', '\nallows machine-level statistics to be exported out via the Node exporter.', 'This is useful for monitoring cronjobs, or for writing cronjobs to expose metrics\nabout a machine system that the Node exporter does not support or would not make sense\nto perform at every scrape (for example, anything involving subprocesses).', 'A separate registry is used, as the default registry may contain other metrics\nsuch as those from the Process Collector.', 'The ', '\nallows ephemeral and batch jobs to expose their metrics to Prometheus.', 'A separate registry is used, as the default registry may contain other metrics\nsuch as those from the Process Collector.', 'Pushgateway functions take a grouping key. ', ' replaces metrics\nwith the same grouping key, ', ' only replaces metrics with the\nsame name and grouping key and ', ' deletes metrics with the\ngiven job and grouping key. See the\n', '\nfor more information.', "" returns a grouping key with the instance label set\nto the host's IP address."", 'If the push gateway you are connecting to is protected with HTTP Basic Auth,\nyou can use a special handler to set the Authorization header.', 'TLS Auth is also supported when using the push gateway with a special handler.', 'It is also possible to expose metrics to systems other than Prometheus.\nThis allows you to take advantage of Prometheus instrumentation even\nif you are not quite ready to fully transition to Prometheus yet.', 'Metrics are pushed over TCP in the Graphite plaintext format.', 'Graphite ', ' are also supported.', 'Sometimes it is not possible to directly instrument code, as it is not\nin your control. This requires you to proxy metrics from other systems.', 'To do so you need to create a custom collector, for example:', ', ', ' and ', ' work similarly.', 'A collector may implement a ', ' method which returns metrics in the same\nformat as ', "" (though you don't have to include the samples). This is\nused to predetermine the names of time series a "", ' exposes and\nthus to detect collisions and duplicate registrations.', 'Usually custom collectors do not have to implement ', '. If ', ' is\nnot implemented and the CollectorRegistry was created with ', '\n(which is the case for the default registry) then ', ' will be called at\nregistration time instead of ', '. If this could cause problems, either\nimplement a proper ', "", or if that's not practical have "", '\nreturn an empty list.', ""Prometheus client libraries presume a threaded model, where metrics are shared\nacross workers. This doesn't work so well for languages such as Python where\nit's common to have processes rather than threads to handle large workloads."", 'To handle this the client library can be put in multiprocess mode.\nThis comes with a number of limitations:', ""There's several steps to getting this working:"", ':', 'The ', ' environment variable must be set to a directory\nthat the client library can use for metrics. This directory must be wiped\nbetween process/Gunicorn runs (before startup is recommended).', 'This environment variable should be set from a start-up shell script,\nand not directly from Python (otherwise it may not propagate to child processes).', ':', 'The application must initialize a new ', ', and store the\nmulti-process collector inside. It is a best practice to create this registry\ninside the context of a request to avoid metrics registering themselves to a\ncollector used by a ', '. If a registry with metrics\nregistered is used by a ', ' duplicate metrics may be\nexported, one for multiprocess, and one for the process serving the request.', ':', 'The ', ' configuration file needs to include the following function:', ':', 'When ', 's are used in multiprocess applications,\nyou must decide how to handle the metrics reported by each process.\nGauges have several modes they can run in, which can be selected with the ', ' parameter.', ""Prepend 'live' to the beginning of the mode to return the same result but only considering living processes\n(e.g., 'liveall, 'livesum', 'livemax', 'livemin')."", 'The Python client supports parsing the Prometheus text format.\nThis is intended for advanced use cases where you have servers\nexposing Prometheus metrics and need to get them into some other\nsystem.', '\n      Prometheus instrumentation library for Python applications\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ': Number of times this function was called.', ': Total amount of time spent in this function.', 'Registries can not be used as normal, all instantiated metrics are exported\n', 'Registering metrics to a registry later used by a ', '\nmay cause duplicate metrics to be exported', '\n', 'Custom collectors do not work (e.g. cpu and memory metrics)', 'Info and Enum metrics do not work', 'The pushgateway cannot be used', 'Gauges cannot use the ', ' label', 'Exemplars are not supported', ""'all': Default. Return a timeseries per process (alive or dead), labelled by the process's "", ' (the label is added internally).', ""'min': Return a single timeseries that is the minimum of the values of all processes (alive or dead)."", ""'max': Return a single timeseries that is the maximum of the values of all processes (alive or dead)."", ""'sum': Return a single timeseries that is the sum of the values of all processes (alive or dead)."", ': The releases page shows the history of the project and acts as a changelog.', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    '])"
