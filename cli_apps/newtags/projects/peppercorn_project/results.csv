content
"(['Peppercorn'], ['A library for converting a token stream into a data structure comprised of\nsequences, mappings, and scalars, developed primarily for converting HTTP\nform post data into a richer data structure. It runs on Python 2.7, 3.4, 3.5,\n3.6 and 3.7.', 'Example ""bare"" usage:', 'A ', ' token pushes a data structure onto the stack.  Its\nvalue is composed of a name and a type, separated by a colon\n(e.g. ', ').  Four ', ' token types exist:', ': begins a sequence.  Subsequent data elements will be\nadded as positional elements in the sequence.', ': begins a mapping.  Subsequent data elements will be\nadded as key/value pairs in the mapping.', ': begins a special mode.  The value of the first\nsubsequent data element in the stream will be used within its\nparent sequence or mapping; any remaining data elements until the\ncorresponding ', ' marker are ignored.', 'If the parent is a mapping, the key used in the mapping will be the\nname of the ', ' token (when ', ', the\nkey will be ', ').  The value will be the value of the\nfirst data element.', 'If the parent is a sequence, the ', ' token name is ignored,\nand the value of the first data element is placed into the sequence.', ' is mostly for radio controls; we surround sets of radio\ncontrols in a ', ' in order to provide a surrogate naming for\na group of radio control elements.  Radio control ', '\nattributes are used by the browser to perform grouping, so each\nradio control that is a member of a the same group must share a\n', ' attribute value.  Moreover, this group name must be unique\namongst all controls on the form to prevent ""select bleeding""\nbetween radio controls.  However, on the server side, we\'re\nuninterested in participating in this disambiguation process and\nit\'s easier to not know about it when the form is posted.  We just\nwant the selected value back in the pstruct to be recorded under a\nwell-known name.  This name will be the name of the ', ' token\nsurrounding some radio controls.', ': The subsequent data elements will be ignored (not added\nto the mapping or sequence) until the next ', ' token. Useful\nwhen forms include a field designed for client side scripting, such\nas a ""select all"" checkbox in the middle of a series of checkboxes.', ' markers can be unnamed; they are unnamed when their\nvalue does not contain a colon.  For example, the start marker\n', ' begins a mapping with the implied name\n', ' (the empty string).', 'A sequence or mapping is closed when the corresponding ', '\ntoken for its ', ' token is processed.  Mappings and\nsequences can be nested arbitrarily.  The value of an ', '\ntoken is optional; it is useful as documentation, but they are\nnot required by Peppercorn.', 'The data structure returned from ', ' will always\nbe a mapping.', 'To use Peppercorn in a web application, create a form that has the\ntokens in order.  For instance, the below form will generate the above\ntoken stream:', 'Then when the web post reaches the application, call the\n', ' function with the ordered field pairs.  For a\n', ' request, this means using the ', ' method of a\nWebob MultiDict such as ', ':', 'The ', ' attribute of a Python ', ' object can\nalso be used as a source of information:', 'See ', '.', '\n          ', '\n          ', ' |', '\n          ', ' |', ' »', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n          ', '\n          ', ' |', '\n          ', ' |', ' »'])"
content
"(['Peppercorn'], ['A library for converting a token stream into a data structure comprised of\nsequences, mappings, and scalars, developed primarily for converting HTTP\nform post data into a richer data structure. It runs on Python 2.7, 3.4, 3.5,\n3.6 and 3.7.', 'Example ""bare"" usage:', 'A ', ' token pushes a data structure onto the stack.  Its\nvalue is composed of a name and a type, separated by a colon\n(e.g. ', ').  Four ', ' token types exist:', ': begins a sequence.  Subsequent data elements will be\nadded as positional elements in the sequence.', ': begins a mapping.  Subsequent data elements will be\nadded as key/value pairs in the mapping.', ': begins a special mode.  The value of the first\nsubsequent data element in the stream will be used within its\nparent sequence or mapping; any remaining data elements until the\ncorresponding ', ' marker are ignored.', 'If the parent is a mapping, the key used in the mapping will be the\nname of the ', ' token (when ', ', the\nkey will be ', ').  The value will be the value of the\nfirst data element.', 'If the parent is a sequence, the ', ' token name is ignored,\nand the value of the first data element is placed into the sequence.', ' is mostly for radio controls; we surround sets of radio\ncontrols in a ', ' in order to provide a surrogate naming for\na group of radio control elements.  Radio control ', '\nattributes are used by the browser to perform grouping, so each\nradio control that is a member of a the same group must share a\n', ' attribute value.  Moreover, this group name must be unique\namongst all controls on the form to prevent ""select bleeding""\nbetween radio controls.  However, on the server side, we\'re\nuninterested in participating in this disambiguation process and\nit\'s easier to not know about it when the form is posted.  We just\nwant the selected value back in the pstruct to be recorded under a\nwell-known name.  This name will be the name of the ', ' token\nsurrounding some radio controls.', ': The subsequent data elements will be ignored (not added\nto the mapping or sequence) until the next ', ' token. Useful\nwhen forms include a field designed for client side scripting, such\nas a ""select all"" checkbox in the middle of a series of checkboxes.', ' markers can be unnamed; they are unnamed when their\nvalue does not contain a colon.  For example, the start marker\n', ' begins a mapping with the implied name\n', ' (the empty string).', 'A sequence or mapping is closed when the corresponding ', '\ntoken for its ', ' token is processed.  Mappings and\nsequences can be nested arbitrarily.  The value of an ', '\ntoken is optional; it is useful as documentation, but they are\nnot required by Peppercorn.', 'The data structure returned from ', ' will always\nbe a mapping.', 'To use Peppercorn in a web application, create a form that has the\ntokens in order.  For instance, the below form will generate the above\ntoken stream:', 'Then when the web post reaches the application, call the\n', ' function with the ordered field pairs.  For a\n', ' request, this means using the ', ' method of a\nWebob MultiDict such as ', ':', 'The ', ' attribute of a Python ', ' object can\nalso be used as a source of information:', 'See ', '.', '\n          ', '\n          ', ' |', '\n          ', ' |', ' »', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n          ', '\n          ', ' |', '\n          ', ' |', ' »'])"
