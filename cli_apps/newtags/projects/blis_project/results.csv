content
"(['explosion/cython-blis', 'Name already in use', 'Cython BLIS: Fast BLAS-like operations from Python and Cython, without the tears'], ['\n        ', ' Fast matrix-multiplication as a self-contained Python library – no system dependencies!\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'This repository provides the ', '\nroutines as a self-contained Python C-extension.', 'Currently, we only supports single-threaded execution, as this is actually best for our workloads (ML inference).', '\n', '\n', '\n', 'You can install the package via pip, first making sure that ', ', ', ',\nand ', ' are up-to-date:', ""Wheels should be available, so installation should be fast. If you want to install from source and you're on Windows, you'll need to install LLVM."", ""The provided wheels should work on x86_64 and osx/arm64 architectures. Unfortunately we do not currently know a way to provide different wheels for alternative architectures, and we cannot provide a single binary that works everywhere. So if the wheel doesn't work for your CPU, you'll need to specify source distribution, and tell Blis your CPU architecture using the "", ' environment variable.', 'Provide an architecture from the ', '.', ' ', ' is not optimized for any particular CPU and is extremely slow. Only recommended for testing!', 'In order to compile Blis, ', ' bundles makefile scripts for specific architectures, that are compiled by running the Blis build system and logging the commands. We do not yet have logs for every architecture, as there are some architectures we have not had access to.', "" for list of\narchitectures. For example, here's how to build support for the Intel architecture "", ':', 'Fingers crossed, this will build you a wheel that supports your platform. You\ncould then ', ' with\nthe ', ' and\n', ' files so that you can run:', 'Two APIs are provided: a high-level Python API, and direct\n', ' access, which provides fused-type, nogil\nCython bindings to the underlying Blis linear algebra library. Fused\ntypes are a simple template mechanism, allowing just a touch of\ncompile-time generic programming:', ""Bindings have been added as we've needed them. Please submit pull requests if\nthe library is missing some functions you require."", 'To build the source package, you should run the following command:', 'This populates the ', ' folder for the various architectures, using the\n', ' submodule.', ""In order to compile the Blis sources, we use jsonl files that provide the\nexplicit compiler flags. We build these jsonl files by running Blis's build\nsystem, and then converting the log. This avoids us having to replicate the\nbuild system within Python: we just use the jsonl to make a bunch of subprocess\ncalls. To support a new OS/architecture combination, we have to provide the\njsonl file and the header."", 'The Linux build files need to be produced from within the manylinux2014\nDocker container, so that they will be compatible with the wheel building\nprocess.', 'First, install docker. Then do the following to start the container:', 'Once within the container, the following commands should check out the repo and\nbuild the jsonl files for the generic arch:', 'Then from a new terminal, retrieve the two files we need out of the container:', '\n      ', ' Fast matrix-multiplication as a self-contained Python library – no system dependencies!\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
content
"(['explosion/cython-blis', 'Name already in use', 'Cython BLIS: Fast BLAS-like operations from Python and Cython, without the tears'], ['\n        ', ' Fast matrix-multiplication as a self-contained Python library – no system dependencies!\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'This repository provides the ', '\nroutines as a self-contained Python C-extension.', 'Currently, we only supports single-threaded execution, as this is actually best for our workloads (ML inference).', '\n', '\n', '\n', 'You can install the package via pip, first making sure that ', ', ', ',\nand ', ' are up-to-date:', ""Wheels should be available, so installation should be fast. If you want to install from source and you're on Windows, you'll need to install LLVM."", ""The provided wheels should work on x86_64 and osx/arm64 architectures. Unfortunately we do not currently know a way to provide different wheels for alternative architectures, and we cannot provide a single binary that works everywhere. So if the wheel doesn't work for your CPU, you'll need to specify source distribution, and tell Blis your CPU architecture using the "", ' environment variable.', 'Provide an architecture from the ', '.', ' ', ' is not optimized for any particular CPU and is extremely slow. Only recommended for testing!', 'In order to compile Blis, ', ' bundles makefile scripts for specific architectures, that are compiled by running the Blis build system and logging the commands. We do not yet have logs for every architecture, as there are some architectures we have not had access to.', "" for list of\narchitectures. For example, here's how to build support for the Intel architecture "", ':', 'Fingers crossed, this will build you a wheel that supports your platform. You\ncould then ', ' with\nthe ', ' and\n', ' files so that you can run:', 'Two APIs are provided: a high-level Python API, and direct\n', ' access, which provides fused-type, nogil\nCython bindings to the underlying Blis linear algebra library. Fused\ntypes are a simple template mechanism, allowing just a touch of\ncompile-time generic programming:', ""Bindings have been added as we've needed them. Please submit pull requests if\nthe library is missing some functions you require."", 'To build the source package, you should run the following command:', 'This populates the ', ' folder for the various architectures, using the\n', ' submodule.', ""In order to compile the Blis sources, we use jsonl files that provide the\nexplicit compiler flags. We build these jsonl files by running Blis's build\nsystem, and then converting the log. This avoids us having to replicate the\nbuild system within Python: we just use the jsonl to make a bunch of subprocess\ncalls. To support a new OS/architecture combination, we have to provide the\njsonl file and the header."", 'The Linux build files need to be produced from within the manylinux2014\nDocker container, so that they will be compatible with the wheel building\nprocess.', 'First, install docker. Then do the following to start the container:', 'Once within the container, the following commands should check out the repo and\nbuild the jsonl files for the generic arch:', 'Then from a new terminal, retrieve the two files we need out of the container:', '\n      ', ' Fast matrix-multiplication as a self-contained Python library – no system dependencies!\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
