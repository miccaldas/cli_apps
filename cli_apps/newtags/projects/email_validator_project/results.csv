content
"(['JoshData/python-email-validator', 'Name already in use', 'email-validator: Validate Email Addresses', 'local'], ['\n        A robust email syntax and deliverability validation library for Python.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'A robust email address syntax and deliverability validation library for\nPython 3.7+ by ', '.', 'This library validates that a string is of the form ', '\nand optionally checks that the domain name is set up to receive email.\nThis is the sort of validation you would want when you are identifying\nusers by their email address like on a registration/login form (but not\nnecessarily for composing an email message, see below).', 'Key features:', 'This library does NOT permit obsolete forms of email addresses, so\nif you need strict validation against the email specs exactly, use\n', ' or try\n', ' if you are parsing the\nTo: line of an email.', 'View the ', ' for the version history of changes in the library. Occasionally this README is ahead of the latest published package --- see the CHANGELOG for details.', 'This package ', ', so:', '(You might need to use ', ' depending on your local environment.)', ""If you're validating a user's email address before creating a user\naccount in your application, you might do this:"", 'This validates the address and gives you its normalized form. You should\n', ' and always normalize before\nchecking if an address is in your database. When using this in a login form,\nset ', ' to ', ' to avoid unnecessary DNS queries.', 'The module provides a function ', ' which\ntakes an email address and:', 'When an email address is not valid, ', ' raises either an\n', ' if the form of the address is invalid or an\n', ' if the domain name fails DNS checks. Both\nexception classes are subclasses of ', ', which in turn\nis a subclass of ', '.', 'But when an email address is valid, an object is returned containing\na normalized form of the email address (which you should use!) and\nother information.', ""The validator doesn't permit obsoleted forms of email addresses that no\none uses anymore even though they are still valid and deliverable, since\nthey will probably give you grief if you're using email for login. (See\nlater in the document about that.)"", ""The validator checks that the domain name in the email address has a\nDNS MX record (except a NULL MX record) indicating that it can receive\nemail (or a fallback A-record, see below).\nThere is nothing to be gained by trying to actually contact an SMTP\nserver, so that's not done here. For privacy, security, and practicality\nreasons servers are good at not giving away whether an address is\ndeliverable or not: email addresses that appear to accept mail at first\ncan bounce mail after a delay, and bounced mail may indicate a temporary\nfailure of a good email address (sometimes an intentional failure, like\ngreylisting)."", 'The ', ' function also accepts the following keyword arguments\n(defaults are as shown below):', ': If true, a DNS query is made to check that a non-null MX record is present for the domain-part of the email address (or if not, an A/AAAA record as an MX fallback can be present but in that case a reject-all SPF record must not be present). Set to ', ' to skip this DNS-based check. DNS is slow and sometimes unavailable, so consider whether these checks are useful for your use case. It is recommended to pass ', ' when performing validation for login pages (but not account creation pages) since re-validation of a previously validated domain in your database by querying DNS at every login is probably undesirable. You can also set ', ' to ', ' to turn this off for all calls by default.', ': Pass an instance of ', ' to control the DNS resolver including setting a timeout and ', '. The ', ' function shown above is a helper function to construct a dns.resolver.Resolver with a ', '. Reuse the same resolver instance across calls to ', ' to make use of the cache.', ': DNS-based deliverability checks are disabled and  ', ' and ', ' domain names are permitted (see below). You can also set ', ' to ', ' to turn it on for all calls by default.', ': Set to ', ' to prohibit internationalized addresses that would\nrequire the\n', ' extension. You can also set ', ' to ', ' to turn it off for all calls by default.', ': Set to ', ' to allow an empty local part (i.e.\n', '), e.g. for validating Postfix aliases.', 'When validating many email addresses or to control the timeout (the default is 15 seconds), create a caching ', ' to reuse in each call. The ', ' function returns one easily for you:', 'This library rejects email addresess that use the ', ' ', ', ', ', ', ', and some others by raising ', "". This is to protect your system from abuse: You probably don't want a user to be able to cause an email to be sent to "", '. However, in your non-production test environments you may want to use ', ' or ', ' email addresses. There are three ways you can allow this:', 'It is tempting to use ', ' in tests. These domains are reserved to IANA for use in documentation so there is no risk of accidentally emailing someone at those domains. But beware that this library will reject these domain names if DNS-based deliverability checks are not disabled because these domains do not resolve to domains that accept email. In tests, consider using your own domain name or ', ' or ', ' instead.', 'The email protocol SMTP and the domain name system DNS have historically\nonly allowed English (ASCII) characters in email addresses and domain names,\nrespectively. Each has adapted to internationalization in a separate\nway, creating two separate aspects to email address\ninternationalization.', 'The first is ', ', a.k.a IDNA 2008. The DNS\nsystem has not been updated with Unicode support. Instead, internationalized\ndomain names are converted into a special IDNA ASCII ""', '""\nform starting with ', '. When an email address has non-ASCII\ncharacters in its domain part, the domain part is replaced with its IDNA\nASCII equivalent form in the process of mail transmission. Your mail\nsubmission library probably does this for you transparently. (', '.) This library conforms to IDNA 2008\nusing the ', ' module by Kim Davies.', 'The second sort of internationalization is internationalization in the\n', ' part of the address (before the @-sign). In non-internationalized\nemail addresses, only English letters, numbers, and some punctuation\n(', ') are allowed. In internationalized email address\nlocal parts, a wider range of Unicode characters are allowed.', 'A surprisingly large number of Unicode characters are not safe to display,\nespecially when the email address is concatenated with other text, so this\nlibrary tries to protect you by not permitting resvered, non-, private use,\nformatting (which can be used to alter the display order of characters),\nwhitespace, and control characters, and combining characters\nas the first character (so that they cannot combine with something outside\nof the email address string). See ', ' and ', '\nfor relevant prior work. (Other than whitespace, these are checks that\nyou should be applying to nearly all user inputs in a security-sensitive\ncontext.)', 'These character checks are performed after Unicode normalization (see below),\nso you are only fully protected if you replace all user-provided email addresses\nwith the normalized email address string returned by this library. This does not\nguard against the well known problem that many Unicode characters look alike\n(or are identical), which can be used to fool humans reading displayed text.', 'Email addresses with these non-ASCII characters require that your mail\nsubmission library and the mail servers along the route to the destination,\nincluding your own outbound mail server, all support the\n', ' extension.\nSupport for SMTPUTF8 varies. See the ', ' parameter.', 'By default all internationalized forms are accepted by the validator.\nBut if you know ahead of time that SMTPUTF8 is not supported by your\nmail submission stack, then you must filter out addresses that require\nSMTPUTF8 using the ', ' keyword argument (see above).\nThis will cause the validation function to raise a ', "" if\ndelivery would require SMTPUTF8. That's just in those cases where\nnon-ASCII characters appear before the @-sign. If you do not set\n"", ', you can also check the value of the ', '\nfield in the returned object.', ""If your mail submission library doesn't support Unicode at all --- even\nin the domain part of the address --- then immediately prior to mail\nsubmission you must replace the email address with its ASCII-ized form.\nThis library gives you back the ASCII-ized form in the "", '\nfield in the returned object, which you can get like this:', 'The local part is left alone (if it has internationalized characters\n', ' will force validation to fail) and the domain\npart is converted to ', "".\n(You probably should not do this at account creation time so you don't\nchange the user's login information without telling them.)"", 'The use of Unicode in email addresses introduced a normalization\nproblem. Different Unicode strings can look identical and have the same\nsemantic meaning to the user. The ', ' field returned on successful\nvalidation provides the correctly normalized form of the given email\naddress:', 'Because an end-user might type their email address in different (but\nequivalent) un-normalized forms at different times, you ought to\nreplace what they enter with the normalized form immediately prior to\ngoing into your database (during account creation), querying your database\n(during login), or sending outbound mail. Normalization may also change\nthe length of an email address, and this may affect whether it is valid\nand acceptable by your SMTP provider.', 'The normalizations include lowercasing the domain part of the email\naddress (domain names are case-insensitive), ', ' of the\nwhole address (which turns characters plus ', ' into\nprecomposed characters where possible, replacement of ', '\nin the domain part, possibly other\n', ' mappings on the domain part,\nand conversion from Punycode to Unicode characters.', '(See ', ' and ', '.)', 'For the email address ', ', the returned object is:', 'For the fictitious but valid address ', ', which has an\ninternationalized domain but ASCII local part, the returned object is:', 'Note that the ', ' and ', ' fields provide a normalized form of the\nemail address, domain name, and (in other cases) local part (see earlier\ndiscussion of normalization), which you should use in your database.', 'Calling ', ' with the ASCII form of the above email address,\n', ', returns the exact same information (i.e., the\n', ' field always will contain Unicode characters, not Punycode).', 'For the fictitious address ', ', which has an\ninternationalized local part, the returned object is:', 'Now ', ' is ', ' and ', ' is ', ' because the local\npart of the address is internationalized. The ', ' and ', ' fields\nreturn the normalized form of the address: certain Unicode characters\n(such as angstrom and ohm) may be replaced by other equivalent code\npoints (a-with-ring and omega).', 'When an email address passes validation, the fields in the returned object\nare:', 'By design, this validator does not pass all email addresses that\nstrictly conform to the standards. Many email address forms are obsolete\nor likely to cause trouble:', 'Tests can be run using', 'Tests run with mocked DNS responses. When adding or changing tests, temporarily turn on the ', ' flag in ', ' to re-build the database of mocked responses from live queries.', 'The package is distributed as a universal wheel and as a source package.', 'To release:', '\n      A robust email syntax and deliverability validation library for Python.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ""Checks that an email address has the correct syntax --- good for\nregistration/login forms or other uses related to identifying users.\nRejects obsolete email address syntax that you'd find unexpected."", 'Gives friendly English error messages when validation fails that you\ncan display to end-users.', 'Checks deliverability (optional): Does the domain name resolve?\n(You can override the default DNS resolver to add query caching.)', 'Supports internationalized domain names and internationalized local parts.\nBlocks unsafe characters for your safety.', 'Normalizes email addresses (important for internationalized\naddresses! see below).', 'Python type annotations are used.', 'Raises a ', ' with a helpful, human-readable error\nmessage explaining why the email address is not valid, or', 'Returns an object with a normalized form of the email address (which\nyou should use!) and other information about it.', 'Add ', ' to the call to ', ' (see above).', 'Set ', ' to ', '.', 'Remove the special-use domain name that you want to use from ', ':', 'The validator assumes the email address is intended to be\nusable on the public Internet. The domain part\nof the email address must be a resolvable domain name\n(see the deliverability checks described above).\nMost ', '\nand their subdomains, as well as\ndomain names without a ', ', are rejected as a syntax error\n(except see the ', ' parameter above).', 'Obsolete email syntaxes are rejected:\nThe ""quoted string"" form of the local part of the email address (RFC\n5321 4.1.2) is not permitted.\nQuoted forms allow multiple @-signs, space characters, and other\ntroublesome conditions. The unusual ', '\nis also rejected. The ""literal"" form for the domain part of an email address (an\nIP address in brackets) is rejected. Other obsolete and deprecated syntaxes are\nrejected. No one uses these forms anymore.', 'Update CHANGELOG.md.', 'Update the version number in setup.cfg.', 'Make & push a commit with the new version number and make sure tests pass.', 'Make & push a tag (see command below).', 'Make a release at ', '.', 'Publish a source and wheel distribution to pypi (see command below).', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n      ', '\n    '])"
