content
"(['Repository patterns for Python', 'Red-Bird: Repository Patterns for Python', 'Red-Bird: Repository Patterns for Python', 'Indices and tables', 'repository', 'item'], ['\n ', '\n', 'Repository pattern is a technique to abstract the data access from\nthe domain/business logic. In other words, it decouples the database\naccess from the application code. The aim is that the code runs the\nsame regardless if the data is stored to an SQL database, NoSQL\ndatabase, file or even as an in-memory list.', 'Because it simplifies things, makes prototyping\nfaster and testing easier.', 'Typically, data access in an application looks like this:', 'In other words, querying the databases is embedded with the application\ncode, ie. the application code executes raw SQL, MongoDB queries or\nHTTP requests to APIs. This makes the application code to be data\nstore specific. In order for the application to function, it\nmust be connected to a specific type of a database.', 'For many projects this approach may not cause additional difficulities but\nthere are several problems with this approach related to readability and\nmaintainability:', 'Application code is data store specific thus later switching to another\ndata store may require a lot of work.', 'Testing the application code is non-trivial if there is no test database\nof the same type as the production.', 'Understanding the application requires understanding how the underlying\ndatabase works.', 'The code may become hard to read if multiple types of databases are used,\nie. SQL databases and MongoDB databases.', 'Repository pattern aims to separate the domain layer (application logic) from\nthe database layer (data access) by unifying the syntax for creating, fetching,\nmodifying and deleting data in the data stores. It transforms generic actions\nto the language a specific database understands.', 'In practice, this is illustrated below:', 'The repositories act as translators to transform generic actions (read,\ncreate, update, delete data) to language the specific database understands.\nThe repositories may be configured at the configuraitons of the application\nand they may easily be swapped to different database servers operating on\nthe same or different querying language or data types. The application code\nis identical regardless if the data is in an SQL database, MongoDB or in-memory\nlists.', 'This has several benefits:', 'Unit testing is easy as the repositories could be swapped to in-memory lists', 'Database migrations is trivial as it require no code changes', 'Using different databases or types of databases adds no additional maintenance costs', 'Creating separate environments operating on different connections is easy.', 'However, there are some downsides with repository pattern as well. Most notably,\nsome features in querying languages cannot be replicated in a way that works\nwith all others simply due to that these features are missing in them. Especially,\nsome optimizations are such that cannot be replicated. However, most applications\ndon’t require optimized or complex queries. Furthermore, applications that\ndo need them may still implement repository pattern and use database specific\nqueries only in places where this is unavoidable.', 'In short, Red Bird offers:', 'Identical way accross data stores of doing the following operations:', 'Create an item to the data store', 'Read items from the data store', 'Update items in the data store', 'Delete items in the data store', 'Data validation via Pydantic', 'Basic querying operations (ie. equal, greater or less than)', ' for logging to data stores', 'Supported repositories:', 'SQL (via SQLAlchemy)', 'MongoDB (via Pymongo)', 'In-memory (objects in Python list)', 'CSV (each row is an item)', 'JSON (a JSON file per item)', 'In Red Bird, the term ', ' is used to describe a\nspecific data store that is a collection of items of the\nsame type (ie. a list of cars) and ', ' is used to describe a record or\na document with some attributes (ie. a car with registration number 123-456-789).\nAn attribute consists of the name of the attribute (ie. car color) and its\nvalue for specific item (ie. color of the car with registration number 123-456-789 is red).', 'The definition of these terms between various\ndata stores are illustrated below:', 'Repository', 'Repository definition', 'Item definition', 'Attribute definition', 'Python memory', 'list', 'object', 'attribute (object) or item (dict)', 'SQL', 'table', 'row', 'column', 'MongoDB', 'collection', 'document', 'field', 'REST (HTTP)', 'URL endpoint', 'JSON object', 'field', 'There are four generic operations implemented by almost every data store:\ncreate, read, update and delete. These are often labeled CRUD. Read-only\ndata store may only have read operation and some simple data stores may\nonly have read, create and delete (such as a CSV file). For basic CRUD\nactions, Red Bird uses tems more commonly used in Python language:\nadd, get, update and delete, respectively. Red bird also adds one more\noperation that is implemented in some data stores and could be implemented\nto others by combining existing operations: replace. Replace is an update\nbut it also removes attributes that were not changed.', 'These unified methods for manipulating data (a single item) are illustrated below:', 'Repository', 'get', 'add', 'delete', 'update', 'replace', 'Python memory', 'list[…]', 'list.append', 'list.pop', 'setattr', 'list.pop & list.append', 'SQL', 'SELECT', 'INSERT', 'DELETE', 'UPDATE', 'DELETE & INSERT', 'MongoDB', 'findOne', 'insertOne', 'deleteOne', 'updateOne', 'deleteOne & insertOne', 'REST (HTTP)', 'GET', 'POST', 'DELETE', 'PATCH', 'PUT', 'In addition, operations can also be divided to those that affect only one item and\nto those that affect multiple items. If you search for a car with registration\nnumber 123-456-789 you should should only get one car or none whereas if you\nsearch for cars with a red color you may get multiple, one or none. The same applies\nfor other operations as well.', 'First we create a simple in-memory repository that has ', ' as the attribute\nthat is unique for each item:', 'Create some items to the database:', 'Get items from the database:', 'Update items in the database:', 'Delete items from the database:', 'next', 'Tutorial', '\n  \n    By Mikael Koli', '\n  \n      © Copyright 2022, Mikael Koli.', '\n', '\n  ', '\n ', '\n  ', '\n  ', '\n  ', '\n  ', '\n    ', '\n   ', '\n    ', '\n   ', '\n    ', '\n   ', '\n    ', '\n    ', '\n    ', '\n    ', '\n      ', '\n     ', '\n      ', '\n     ', '\n   ', '\n    ', '\n   ', '\n    ', '\n   ', '\n ', '\n  ', '\n ', '\n  ', '\n ', '\n  ', '\n  ', '\n  ', '\n  ', '\n    ', '\n   ', '\n    ', '\n   ', '\n    ', '\n   ', '\n    ', '\n   ', '\n ', '\n  ', '\n ', '\n  ', '\n  ', '\n  ', '\n  ', '\n    ', '\n   ', '\n    ', '\n   ', '\n ', '\n  ', '\n  ', '\n  ', '\n  ', '\n    ', '\n   ', '\n ', '\n  ', '\n ', '\n        ', '\n\n      ', '\n        ', '\n\n      ', '\n        ', '\n\n      ', '\n        \n', '\n\n      ', '\n  ', '\n  ', '\n    ', '\n   ', '\n    ', '\n   ', '\n    ', '\n    ', '\n      ', '\n     ', '\n      ', '\n     ', '\n   ', '\n    ', '\n   ', '\n ', '\n  ', '\n ', '\n  ', '\n  ', '\n    ', '\n   ', '\n    ', '\n   ', '\n    ', '\n    ', '\n      ', '\n     ', '\n      ', '\n     ', '\n   ', '\n    ', '\n   ', '\n ', '\n  ', '\n ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n'])"
content
"(['Repository patterns for Python', 'Red-Bird: Repository Patterns for Python', 'Red-Bird: Repository Patterns for Python', 'Indices and tables', 'repository', 'item'], ['\n ', '\n', 'Repository pattern is a technique to abstract the data access from\nthe domain/business logic. In other words, it decouples the database\naccess from the application code. The aim is that the code runs the\nsame regardless if the data is stored to an SQL database, NoSQL\ndatabase, file or even as an in-memory list.', 'Because it simplifies things, makes prototyping\nfaster and testing easier.', 'Typically, data access in an application looks like this:', 'In other words, querying the databases is embedded with the application\ncode, ie. the application code executes raw SQL, MongoDB queries or\nHTTP requests to APIs. This makes the application code to be data\nstore specific. In order for the application to function, it\nmust be connected to a specific type of a database.', 'For many projects this approach may not cause additional difficulities but\nthere are several problems with this approach related to readability and\nmaintainability:', 'Application code is data store specific thus later switching to another\ndata store may require a lot of work.', 'Testing the application code is non-trivial if there is no test database\nof the same type as the production.', 'Understanding the application requires understanding how the underlying\ndatabase works.', 'The code may become hard to read if multiple types of databases are used,\nie. SQL databases and MongoDB databases.', 'Repository pattern aims to separate the domain layer (application logic) from\nthe database layer (data access) by unifying the syntax for creating, fetching,\nmodifying and deleting data in the data stores. It transforms generic actions\nto the language a specific database understands.', 'In practice, this is illustrated below:', 'The repositories act as translators to transform generic actions (read,\ncreate, update, delete data) to language the specific database understands.\nThe repositories may be configured at the configuraitons of the application\nand they may easily be swapped to different database servers operating on\nthe same or different querying language or data types. The application code\nis identical regardless if the data is in an SQL database, MongoDB or in-memory\nlists.', 'This has several benefits:', 'Unit testing is easy as the repositories could be swapped to in-memory lists', 'Database migrations is trivial as it require no code changes', 'Using different databases or types of databases adds no additional maintenance costs', 'Creating separate environments operating on different connections is easy.', 'However, there are some downsides with repository pattern as well. Most notably,\nsome features in querying languages cannot be replicated in a way that works\nwith all others simply due to that these features are missing in them. Especially,\nsome optimizations are such that cannot be replicated. However, most applications\ndon’t require optimized or complex queries. Furthermore, applications that\ndo need them may still implement repository pattern and use database specific\nqueries only in places where this is unavoidable.', 'In short, Red Bird offers:', 'Identical way accross data stores of doing the following operations:', 'Create an item to the data store', 'Read items from the data store', 'Update items in the data store', 'Delete items in the data store', 'Data validation via Pydantic', 'Basic querying operations (ie. equal, greater or less than)', ' for logging to data stores', 'Supported repositories:', 'SQL (via SQLAlchemy)', 'MongoDB (via Pymongo)', 'In-memory (objects in Python list)', 'CSV (each row is an item)', 'JSON (a JSON file per item)', 'In Red Bird, the term ', ' is used to describe a\nspecific data store that is a collection of items of the\nsame type (ie. a list of cars) and ', ' is used to describe a record or\na document with some attributes (ie. a car with registration number 123-456-789).\nAn attribute consists of the name of the attribute (ie. car color) and its\nvalue for specific item (ie. color of the car with registration number 123-456-789 is red).', 'The definition of these terms between various\ndata stores are illustrated below:', 'Repository', 'Repository definition', 'Item definition', 'Attribute definition', 'Python memory', 'list', 'object', 'attribute (object) or item (dict)', 'SQL', 'table', 'row', 'column', 'MongoDB', 'collection', 'document', 'field', 'REST (HTTP)', 'URL endpoint', 'JSON object', 'field', 'There are four generic operations implemented by almost every data store:\ncreate, read, update and delete. These are often labeled CRUD. Read-only\ndata store may only have read operation and some simple data stores may\nonly have read, create and delete (such as a CSV file). For basic CRUD\nactions, Red Bird uses tems more commonly used in Python language:\nadd, get, update and delete, respectively. Red bird also adds one more\noperation that is implemented in some data stores and could be implemented\nto others by combining existing operations: replace. Replace is an update\nbut it also removes attributes that were not changed.', 'These unified methods for manipulating data (a single item) are illustrated below:', 'Repository', 'get', 'add', 'delete', 'update', 'replace', 'Python memory', 'list[…]', 'list.append', 'list.pop', 'setattr', 'list.pop & list.append', 'SQL', 'SELECT', 'INSERT', 'DELETE', 'UPDATE', 'DELETE & INSERT', 'MongoDB', 'findOne', 'insertOne', 'deleteOne', 'updateOne', 'deleteOne & insertOne', 'REST (HTTP)', 'GET', 'POST', 'DELETE', 'PATCH', 'PUT', 'In addition, operations can also be divided to those that affect only one item and\nto those that affect multiple items. If you search for a car with registration\nnumber 123-456-789 you should should only get one car or none whereas if you\nsearch for cars with a red color you may get multiple, one or none. The same applies\nfor other operations as well.', 'First we create a simple in-memory repository that has ', ' as the attribute\nthat is unique for each item:', 'Create some items to the database:', 'Get items from the database:', 'Update items in the database:', 'Delete items from the database:', 'next', 'Tutorial', '\n  \n    By Mikael Koli', '\n  \n      © Copyright 2022, Mikael Koli.', '\n', '\n  ', '\n ', '\n  ', '\n  ', '\n  ', '\n  ', '\n    ', '\n   ', '\n    ', '\n   ', '\n    ', '\n   ', '\n    ', '\n    ', '\n    ', '\n    ', '\n      ', '\n     ', '\n      ', '\n     ', '\n   ', '\n    ', '\n   ', '\n    ', '\n   ', '\n ', '\n  ', '\n ', '\n  ', '\n ', '\n  ', '\n  ', '\n  ', '\n  ', '\n    ', '\n   ', '\n    ', '\n   ', '\n    ', '\n   ', '\n    ', '\n   ', '\n ', '\n  ', '\n ', '\n  ', '\n  ', '\n  ', '\n  ', '\n    ', '\n   ', '\n    ', '\n   ', '\n ', '\n  ', '\n  ', '\n  ', '\n  ', '\n    ', '\n   ', '\n ', '\n  ', '\n ', '\n        ', '\n\n      ', '\n        ', '\n\n      ', '\n        ', '\n\n      ', '\n        \n', '\n\n      ', '\n  ', '\n  ', '\n    ', '\n   ', '\n    ', '\n   ', '\n    ', '\n    ', '\n      ', '\n     ', '\n      ', '\n     ', '\n   ', '\n    ', '\n   ', '\n ', '\n  ', '\n ', '\n  ', '\n  ', '\n    ', '\n   ', '\n    ', '\n   ', '\n    ', '\n    ', '\n      ', '\n     ', '\n      ', '\n     ', '\n   ', '\n    ', '\n   ', '\n ', '\n  ', '\n ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n'])"
