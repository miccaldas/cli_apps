content
"(['puyuan/py-nanoid', 'Name already in use', 'Nano ID'], ['\n        Python Nanoid\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'A tiny, secure, URL-friendly, unique string ID generator for Python.', 'The main module uses URL-friendly symbols (A-Za-z0-9_-) and returns an ID with 21 characters (to have a collision probability similar to UUID v4).', 'Symbols ', ' are not encoded in the URL. If used at the end of a link they could be identified as a punctuation symbol.', 'If you want to reduce ID length (and increase collisions probability), you can pass the length as an argument.', 'Don’t forget to check the safety of your ID length in ID ', '.', ""If you want to change the ID's alphabet or length you can use the internal generate module."", 'Non-secure API is also available:', '\n      Python Nanoid\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '. It uses cryptographically strong random APIs and tests distribution of symbols.', '. It uses a larger alphabet than UUID (A-Za-z0-9_-). So ID size was reduced from 36 to 21 symbols.', ' to choice smaller ID size depends on your case.\nnanoid-dictionary with popular alphabets to use with nanoid/generate.', ' with popular alphabets to use.', 'v2.0.0\n', 'Replace ~ to - in default alphabet.', 'Add non-secure fast generator.', 'Reduce default characters from 22 to 21.', '\n', 'v0.3.0\n', 'Fix array out of bound error.', '\n', 'Andrey Sitnik for ', '.', ' for main contribution to v2.0, and adding test cases.', 'Aleksandr Zhuravlev for ', '.', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    '])"
content
"(['puyuan/py-nanoid', 'Name already in use', 'Nano ID'], ['\n        Python Nanoid\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'A tiny, secure, URL-friendly, unique string ID generator for Python.', 'The main module uses URL-friendly symbols (A-Za-z0-9_-) and returns an ID with 21 characters (to have a collision probability similar to UUID v4).', 'Symbols ', ' are not encoded in the URL. If used at the end of a link they could be identified as a punctuation symbol.', 'If you want to reduce ID length (and increase collisions probability), you can pass the length as an argument.', 'Don’t forget to check the safety of your ID length in ID ', '.', ""If you want to change the ID's alphabet or length you can use the internal generate module."", 'Non-secure API is also available:', '\n      Python Nanoid\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '. It uses cryptographically strong random APIs and tests distribution of symbols.', '. It uses a larger alphabet than UUID (A-Za-z0-9_-). So ID size was reduced from 36 to 21 symbols.', ' to choice smaller ID size depends on your case.\nnanoid-dictionary with popular alphabets to use with nanoid/generate.', ' with popular alphabets to use.', 'v2.0.0\n', 'Replace ~ to - in default alphabet.', 'Add non-secure fast generator.', 'Reduce default characters from 22 to 21.', '\n', 'v0.3.0\n', 'Fix array out of bound error.', '\n', 'Andrey Sitnik for ', '.', ' for main contribution to v2.0, and adding test cases.', 'Aleksandr Zhuravlev for ', '.', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    '])"
