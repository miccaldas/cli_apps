content
"(['plaster'], [' is a loader interface around arbitrary config file formats. It exists to define a common API for applications to use when they wish to load configuration settings. The library itself does not aim to handle anything except a basic API that applications may use to find and load configuration settings. Any specific constraints should be implemented in a pluggable loader which can be registered via an entrypoint.', 'The library helps your application find an appropriate loader based on a ', ' and a desired set of ', ' identifiers.', 'Some possible ', ' formats:', 'An example application that does not care what file format the settings are sourced from, as long as they are in a section named ', ':', 'This script can support any config format so long as the application (or the user) has installed the loader they expect to use. For example, ', '. The loader is then found by ', ' based on the specific ', ' provided. The application does not need to configure the loaders. They are discovered via ', ' and registered for specific schemes.', ' supports custom loader protocols which loaders may choose to implement to provide extra functionality over the basic ', ' interface. A ', ' is intentionally very loosely defined but it basically boils down to a loader object that supports extra methods with agreed-upon signatures. Right now the only officially-supported protocol is ', ' which defines a loader that should implement the ', ' interface.', ' ', 'File types:', 'Protocols:', 'To install plaster, run this command in your terminal:', 'If you don’t have ', ' installed, this ', ' can guide you through the process.', 'The sources for plaster can be downloaded from the ', '.', 'Once you have a copy of the source, you can install it with:', 'A goal of ', ' is to allow a configuration source to be used for multiple purposes. For example, an INI file is split into separate sections which provide settings for separate applications. This works because each application can parse the INI file easily and pull out only the section it cares about. In order to load settings, use the ', '.', 'The application may accept a path to a config file, allowing the user to specify the name of the section (', ') to be loaded:', 'Alternatively, the application may depend on a specifically named section:', ' requires a ', ' to provide a way to configure Python’s stdlib logging module. In order to utilize this feature, simply call ', ' from your application.', 'At the heart of ', ' is the ', ' format. This format is basically ', ' with a few variations. The ', ' is used to find an ', '.', 'A ', ' may be a file path or an ', ' URI. In the case of a file path, the file extension is used as the scheme. In either case the scheme and the protocols are the only items that ', ' cares about with respect to finding an ', '.', 'It’s also possible to lookup the exact loader by prefixing the scheme with the name of the package containing the loader:', ' finds loaders registered for the ', ' entry point in your ', ':', 'In this example the importable ', ' class will be used as ', ' for creating ', ' objects. Each loader is passed a ', ' instance, the result of parsing the ', ' to determine the scheme and fragment.', 'If the loader should be found automatically via file extension then it should broadcast support for the special ', ' scheme. For example, to support ', ' instead of ', ' the loader should be registered for the ', ' scheme.', 'This loader may then be used:', 'By default, loaders are exposed via the ', ' entry point. In order to register a loader that supports a custom protocol it should register itself on a ', ' entry point.', 'A scheme ', ' point to the same loader factory for every protocol, including the default (empty) protocol. If it does not then no compatible loader will be found if the end-user requests a loader satisfying both protocols.', 'This API is heavily inspired by conversations, contributions, and design put forth in ', ' and ', '.', '\n          ', '\n          ', ' |', '\n          ', ' |', ' »', '\n', '\n', ', ', ', ', ', ', '\n', '\n', ' - ', '\n', '\n', '\n', '\n', '\n', '\n          ', '\n          ', ' |', '\n          ', ' |', ' »'])"
content
"(['plaster'], [' is a loader interface around arbitrary config file formats. It exists to define a common API for applications to use when they wish to load configuration settings. The library itself does not aim to handle anything except a basic API that applications may use to find and load configuration settings. Any specific constraints should be implemented in a pluggable loader which can be registered via an entrypoint.', 'The library helps your application find an appropriate loader based on a ', ' and a desired set of ', ' identifiers.', 'Some possible ', ' formats:', 'An example application that does not care what file format the settings are sourced from, as long as they are in a section named ', ':', 'This script can support any config format so long as the application (or the user) has installed the loader they expect to use. For example, ', '. The loader is then found by ', ' based on the specific ', ' provided. The application does not need to configure the loaders. They are discovered via ', ' and registered for specific schemes.', ' supports custom loader protocols which loaders may choose to implement to provide extra functionality over the basic ', ' interface. A ', ' is intentionally very loosely defined but it basically boils down to a loader object that supports extra methods with agreed-upon signatures. Right now the only officially-supported protocol is ', ' which defines a loader that should implement the ', ' interface.', ' ', 'File types:', 'Protocols:', 'To install plaster, run this command in your terminal:', 'If you don’t have ', ' installed, this ', ' can guide you through the process.', 'The sources for plaster can be downloaded from the ', '.', 'Once you have a copy of the source, you can install it with:', 'A goal of ', ' is to allow a configuration source to be used for multiple purposes. For example, an INI file is split into separate sections which provide settings for separate applications. This works because each application can parse the INI file easily and pull out only the section it cares about. In order to load settings, use the ', '.', 'The application may accept a path to a config file, allowing the user to specify the name of the section (', ') to be loaded:', 'Alternatively, the application may depend on a specifically named section:', ' requires a ', ' to provide a way to configure Python’s stdlib logging module. In order to utilize this feature, simply call ', ' from your application.', 'At the heart of ', ' is the ', ' format. This format is basically ', ' with a few variations. The ', ' is used to find an ', '.', 'A ', ' may be a file path or an ', ' URI. In the case of a file path, the file extension is used as the scheme. In either case the scheme and the protocols are the only items that ', ' cares about with respect to finding an ', '.', 'It’s also possible to lookup the exact loader by prefixing the scheme with the name of the package containing the loader:', ' finds loaders registered for the ', ' entry point in your ', ':', 'In this example the importable ', ' class will be used as ', ' for creating ', ' objects. Each loader is passed a ', ' instance, the result of parsing the ', ' to determine the scheme and fragment.', 'If the loader should be found automatically via file extension then it should broadcast support for the special ', ' scheme. For example, to support ', ' instead of ', ' the loader should be registered for the ', ' scheme.', 'This loader may then be used:', 'By default, loaders are exposed via the ', ' entry point. In order to register a loader that supports a custom protocol it should register itself on a ', ' entry point.', 'A scheme ', ' point to the same loader factory for every protocol, including the default (empty) protocol. If it does not then no compatible loader will be found if the end-user requests a loader satisfying both protocols.', 'This API is heavily inspired by conversations, contributions, and design put forth in ', ' and ', '.', '\n          ', '\n          ', ' |', '\n          ', ' |', ' »', '\n', '\n', ', ', ', ', ', ', '\n', '\n', ' - ', '\n', '\n', '\n', '\n', '\n', '\n          ', '\n          ', ' |', '\n          ', ' |', ' »'])"
