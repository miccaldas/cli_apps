content
"(['al45tair/netifaces', 'Name already in use', 'netifaces 0.10.8', 'you can have more than one address of\nthe same type associated with each interface', 'Asking for ""the"" address of a particular interface doesn\'t make sense.', 'peer', 'may not', 'very'], ['\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Warning', 'netifaces needs a new maintainer.  al45tair is no longer able to maintain it\nor make new releases due to work commitments.', ""It's been annoying me for some time that there's no easy way to get the\naddress(es) of the machine's network interfaces from Python.  There is\na good reason for this difficulty, which is that it is virtually impossible\nto do so in a portable manner.  However, it seems to me that there should\nbe a package you can easy_install that will take care of working out the\ndetails of doing so on the machine you're using, then you can get on with\nwriting Python code without concerning yourself with the nitty gritty of\nsystem-dependent low-level networking APIs."", 'This package attempts to solve that problem.', 'First you need to install it, which you can do by typing:', ',\nas netifaces is written in C and installing this way will compile the extension.', ""Once that's done, you'll need to start Python and do something like the\nfollowing:"", 'Then if you enter', ""you'll see the list of interface identifiers for your machine."", 'You can ask for the addresses of a particular interface by doing', ""Hmmmm.  That result looks a bit cryptic; let's break it apart and explain\nwhat each piece means.  It returned a dictionary, so let's look there first:"", 'Each of the numbers refers to a particular address family.  In this case, we\nhave three address families listed; on my system, 18 is ', ' (which means\nthe link layer interface, e.g. Ethernet), 2 is ', ' (normal Internet\naddresses), and 30 is ', ' (IPv6).', ""But wait!  Don't use these numbers in your code.  The numeric values here are\nsystem dependent; fortunately, I thought of that when writing netifaces, so\nthe module declares a range of values that you might need.  e.g."", 'Again, on your system, the number may be different.', ""So, what we've established is that the dictionary that's returned has one\nentry for each address family for which this interface has an address.  Let's\ntake a look at the "", ' addresses now:', ""You might be wondering why this value is a list.  The reason is that it's\npossible for an interface to have more than one address, even within the\nsame family.  I'll say that again: "", '.', ""Right, so, we can see that this particular interface only has one address,\nand, because it's a loopback interface, it's point-to-point and therefore\nhas a "", ' address rather than a broadcast address.', ""Let's look at a more interesting interface."", 'This interface has two addresses (see, I told you...)  Both of them are\nregular IPv4 addresses, although in one case the netmask has been changed\nfrom its default.  The netmask ', "" appear on your system if it's set\nto the default for the address range."", ""Because this interface isn't point-to-point, it also has broadcast addresses."", 'Now, say we want, instead of the IP addresses, to get the MAC address; that\nis, the hardware address of the Ethernet adapter running this interface.  We\ncan do', 'Note that this may not be available on platforms without getifaddrs(), unless\nthey happen to implement ', "".  Note also that you just get the\naddress; it's unlikely that you'll see anything else with an "", "" address.\nOh, and don't assume that all "", ' addresses are Ethernet; you might, for\ninstance, be on a Mac, in which case:', ""No, that isn't an exceptionally long Ethernet MAC address---it's a FireWire\naddress."", 'As of version 0.10.0, you can also obtain a list of gateways on your\nmachine:', 'This dictionary is keyed on address family---in this case, ', '---and\neach entry is a list of gateways as ', ' tuples.\nNotice that here we have two separate gateways for IPv4 (', '); some\noperating systems support configurations like this and can either route packets\nbased on their source, or based on administratively configured routing tables.', 'For convenience, we also allow you to index the dictionary with the special\nvalue ', ', which returns a dictionary mapping address families to the\ndefault gateway in each case.  Thus you can get the default IPv4 gateway with', 'Do note that there may be no default gateway for any given address family;\nthis is currently very common for IPv6 and much less common for IPv4 but it\ncan happen even for ', '.', ""BTW, if you're trying to configure your machine to have multiple gateways for\nthe same address family, it's a very good idea to check the documentation for\nyour operating system "", ' carefully, as some systems become extremely\nconfused or route packets in a non-obvious manner.', ""I'm very interested in hearing from anyone (on any platform) for whom the\n"", "" method doesn't produce the expected results.  It's quite\ncomplicated extracting this information from the operating system (whichever\noperating system we're talking about), and so I expect there's at least one\nsystem out there where this just won't work."", ""It gets regular testing on OS X, Linux and Windows.  It has also been used\nsuccessfully on Solaris, and it's expected to work properly on other UNIX-like\nsystems as well.  If you are running something that is not supported, and\nwish to contribute a patch, please use Github to send a pull request."", ""It's an MIT-style license. See "", '.', 'Because someone released a fork of netifaces with the version 0.9.0.\nHopefully skipping the version number should remove any confusion.  In\naddition starting with 0.10.0 Python 3 is now supported and other\nfeatures/bugfixes have been included as well.  See the CHANGELOG for a\nmore complete list of changes.', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
content
"(['al45tair/netifaces', 'Name already in use', 'netifaces 0.10.8', 'you can have more than one address of\nthe same type associated with each interface', 'Asking for ""the"" address of a particular interface doesn\'t make sense.', 'peer', 'may not', 'very'], ['\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Warning', 'netifaces needs a new maintainer.  al45tair is no longer able to maintain it\nor make new releases due to work commitments.', ""It's been annoying me for some time that there's no easy way to get the\naddress(es) of the machine's network interfaces from Python.  There is\na good reason for this difficulty, which is that it is virtually impossible\nto do so in a portable manner.  However, it seems to me that there should\nbe a package you can easy_install that will take care of working out the\ndetails of doing so on the machine you're using, then you can get on with\nwriting Python code without concerning yourself with the nitty gritty of\nsystem-dependent low-level networking APIs."", 'This package attempts to solve that problem.', 'First you need to install it, which you can do by typing:', ',\nas netifaces is written in C and installing this way will compile the extension.', ""Once that's done, you'll need to start Python and do something like the\nfollowing:"", 'Then if you enter', ""you'll see the list of interface identifiers for your machine."", 'You can ask for the addresses of a particular interface by doing', ""Hmmmm.  That result looks a bit cryptic; let's break it apart and explain\nwhat each piece means.  It returned a dictionary, so let's look there first:"", 'Each of the numbers refers to a particular address family.  In this case, we\nhave three address families listed; on my system, 18 is ', ' (which means\nthe link layer interface, e.g. Ethernet), 2 is ', ' (normal Internet\naddresses), and 30 is ', ' (IPv6).', ""But wait!  Don't use these numbers in your code.  The numeric values here are\nsystem dependent; fortunately, I thought of that when writing netifaces, so\nthe module declares a range of values that you might need.  e.g."", 'Again, on your system, the number may be different.', ""So, what we've established is that the dictionary that's returned has one\nentry for each address family for which this interface has an address.  Let's\ntake a look at the "", ' addresses now:', ""You might be wondering why this value is a list.  The reason is that it's\npossible for an interface to have more than one address, even within the\nsame family.  I'll say that again: "", '.', ""Right, so, we can see that this particular interface only has one address,\nand, because it's a loopback interface, it's point-to-point and therefore\nhas a "", ' address rather than a broadcast address.', ""Let's look at a more interesting interface."", 'This interface has two addresses (see, I told you...)  Both of them are\nregular IPv4 addresses, although in one case the netmask has been changed\nfrom its default.  The netmask ', "" appear on your system if it's set\nto the default for the address range."", ""Because this interface isn't point-to-point, it also has broadcast addresses."", 'Now, say we want, instead of the IP addresses, to get the MAC address; that\nis, the hardware address of the Ethernet adapter running this interface.  We\ncan do', 'Note that this may not be available on platforms without getifaddrs(), unless\nthey happen to implement ', "".  Note also that you just get the\naddress; it's unlikely that you'll see anything else with an "", "" address.\nOh, and don't assume that all "", ' addresses are Ethernet; you might, for\ninstance, be on a Mac, in which case:', ""No, that isn't an exceptionally long Ethernet MAC address---it's a FireWire\naddress."", 'As of version 0.10.0, you can also obtain a list of gateways on your\nmachine:', 'This dictionary is keyed on address family---in this case, ', '---and\neach entry is a list of gateways as ', ' tuples.\nNotice that here we have two separate gateways for IPv4 (', '); some\noperating systems support configurations like this and can either route packets\nbased on their source, or based on administratively configured routing tables.', 'For convenience, we also allow you to index the dictionary with the special\nvalue ', ', which returns a dictionary mapping address families to the\ndefault gateway in each case.  Thus you can get the default IPv4 gateway with', 'Do note that there may be no default gateway for any given address family;\nthis is currently very common for IPv6 and much less common for IPv4 but it\ncan happen even for ', '.', ""BTW, if you're trying to configure your machine to have multiple gateways for\nthe same address family, it's a very good idea to check the documentation for\nyour operating system "", ' carefully, as some systems become extremely\nconfused or route packets in a non-obvious manner.', ""I'm very interested in hearing from anyone (on any platform) for whom the\n"", "" method doesn't produce the expected results.  It's quite\ncomplicated extracting this information from the operating system (whichever\noperating system we're talking about), and so I expect there's at least one\nsystem out there where this just won't work."", ""It gets regular testing on OS X, Linux and Windows.  It has also been used\nsuccessfully on Solaris, and it's expected to work properly on other UNIX-like\nsystems as well.  If you are running something that is not supported, and\nwish to contribute a patch, please use Github to send a pull request."", ""It's an MIT-style license. See "", '.', 'Because someone released a fork of netifaces with the version 0.9.0.\nHopefully skipping the version number should remove any confusion.  In\naddition starting with 0.10.0 Python 3 is now supported and other\nfeatures/bugfixes have been included as well.  See the CHANGELOG for a\nmore complete list of changes.', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
