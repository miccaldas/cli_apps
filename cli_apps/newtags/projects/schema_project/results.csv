content
"(['keleshev/schema', 'Name already in use', 'Schema validation just got Pythonic'], ['\n        Schema validation just got Pythonic\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', ' is a library for validating Python data structures, such as those\nobtained from config-files, forms, external services or command-line\nparsing, converted from JSON/YAML (or something else) to Python data-types.', 'Here is a quick example to get a feeling of ', ', validating a list of\nentries with personal information:', 'If data is valid, ', ' will return the validated data\n(optionally converted with Use calls, see below).', 'If data is invalid, ', ' will raise ', ' exception.\nIf you just want to check that the data is valid, ', ' will\nreturn ', ' or ', '.', 'Use ', ' or easy_install:', 'Alternatively, you can just drop ', ' file into your project—it is\nself-contained.', 'If ', ' encounters a type (such as ', ', ', ', ', ',\netc.), it will check if the corresponding piece of data is an instance of that type,\notherwise it will raise ', '.', 'If ', ' encounters a callable (function, class, or object with\n', ' method) it will call it, and if its return value evaluates to\n', ' it will continue validating, else—it will raise ', '.', 'If ', ' encounters an object with method ', ' it will run\nthis method on corresponding data as ', '. This method\nmay raise ', ' exception, which will tell ', ' that that piece\nof data is invalid, otherwise—it will continue validating.', 'An example of ""validatable"" is ', ', that tries to match a string or a\nbuffer with the given regular expression (itself as a string, buffer or\ncompiled regex ', '):', 'For a more general case, you can use ', ' for creating such objects.\n', ' helps to use a function or type to convert a value while validating it:', 'Dropping the details, ', ' is basically:', 'Sometimes you need to transform and validate part of data, but keep original data unchanged.\n', ' helps to keep your data safe:', 'Now you can write your own validation-aware classes and data types.', 'If ', ' encounters an instance of ', ', ', ', ', '\nor ', ', it will validate contents of corresponding data container\nagainst all schemas listed inside that container and aggregate all errors:', 'If ', ' encounters an instance of ', ', it will validate data\nkey-value pairs:', 'You can specify keys as schemas too:', ""This is useful if you want to check certain key-values, but don't care\nabout others:"", 'You can mark a key as optional as follows:', ' keys can also carry a ', ', to be used when no key in the\ndata matches:', 'Defaults are used verbatim, not passed through any validators specified in the\nvalue.', 'default can also be a callable:', 'Also, a caveat: If you specify types, ', "" won't validate the empty dict:"", 'To do that, you need ', '. This is unlike what happens with\nlists, where ', ' will return True.', ' has classes ', ' and ', ' that help validating several schemas\nfor the same data:', 'In a dictionary, you can also combine two keys in a ""one or the other"" manner. To do\nso, use the Or class as a key:', 'You can define hooks which are functions that are executed whenever a valid key:value is found.\nThe Forbidden class is an example of this.', 'You can mark a key as forbidden as follows:', 'A few things are worth noting. First, the value paired with the forbidden\nkey determines whether it will be rejected:', ""Note: if we hadn't supplied the 'age' key here, the call would have failed too, but with\nSchemaWrongKeyError, not SchemaForbiddenKeyError."", 'Second, Forbidden has a higher priority than standard keys, and consequently than Optional.\nThis means we can do that:', 'You can also define your own hooks. The following hook will call _my_function if key is encountered.', ""Here's an example where a Deprecated class is added to log warnings whenever a key is encountered:"", 'The ', ' parameter ', ' causes validation to ignore extra keys in a dictionary, and also to not return them after validating.', 'If you would like any extra keys returned, use ', ' as one of the key/value pairs, which will match any key and any value.\nOtherwise, extra keys will raise a ', '.', 'The ', ' method accepts additional keyword arguments. The\nkeyword arguments will be propagated to the ', ' method of any\nchild validatables (including any ad-hoc ', ' objects), or the default\nvalue callable (if a callable is specified) for ', ' keys.', 'This feature can be used together with inheritance of the ', ' class\nfor customized validation.', 'Here is an example where a ""post-validation"" hook that runs after validation\nagainst a sub-schema in a larger schema:', 'Note that the additional keyword argument ', ' is necessary to\nlimit the customized behavior to the ', "" object itself so that it\nwon't affect any recursive invoke of the "", ' for the\nchild schemas (e.g., the call to ', ').', 'You can pass a keyword argument ', ' to any of validatable classes\n(such as ', ', ', ', ', ', ', ', ', ') to report this error\ninstead of a built-in one.', ""You can see all errors that occurred by accessing exception's "", '\nfor auto-generated error messages, and ', ' for errors\nwhich had ', ' text passed to them.', 'You can exit with ', ' if you want to show the messages\nto the user without traceback. ', ' messages are given precedence in that\ncase.', 'Here is a quick example: validation of\n', '\nrequest from github API.', 'Assume you are using ', ' with the following usage-pattern:', 'and you would like to validate that ', ' are readable, and that\n', ' exists, and that ', ' is either integer from 0 to 5, or\n', '.', 'Assuming ', ' returns the following dict:', 'this is how you validate it using ', ':', 'As you can see, ', ' validated data successfully, opened files and\nconverted ', ' to ', '.', 'You can also generate standard ', ' from a dict ', '.\nThis can be used to add word completion, validation, and documentation directly in code editors.\nThe output schema can also be used with JSON schema compatible libraries.', 'Just define your schema normally and call ', ' on it. The output is a Python dict, you need to dump it to JSON.', 'You can add descriptions for the schema elements using the ', ' object instead of a string. The main schema can also have a description.', 'These will appear in IDEs to help your users write a configuration.', 'The resulting JSON schema is not guaranteed to accept the same objects as the library would accept, since some validations are not implemented or\nhave no JSON schema equivalent. This is the case of the ', ' and ', ' objects for example.', 'Use a dict literal. The dict keys are the JSON schema properties.', 'Example:', 'becomes', '.', 'Please note that attributes are required by default. To create optional attributes use ', ', like so:', 'becomes', 'For example:', ' and ', 'both becomes', 'and', 'becomes', 'Use the Python type name directly. It will be converted to the JSON name:', 'Example:', 'becomes', 'Surround a schema with ', '.', 'Example:', ' means an array of string and becomes:', 'Use Or.', 'Example:', ' becomes', 'Use the value itself.', 'Example:', ' becomes', 'Use ', '.', 'Example:', ' becomes', 'You can use the ', ' and ', ' parameters of the ', ' object init method.', 'To add description to keys, replace a str with a ', ' object.', 'Example:', 'is equivalent to', 'with the description added to the resulting JSON schema.', 'Use ', 'Example:', 'becomes', 'Note that this example is not really useful in the real world, since ', ' already implies the type.', 'Use ', 'Example:', 'becomes', 'The following JSON schema validations cannot be generated from this library.', 'However, those can be implemented using ', 'However, those can be implemented using ', 'Not implemented. We suggest listing the possible keys instead. As a tip, you can use ', ' as a dict key.', 'Example:', 'additionalProperties having a different schema (true and false is supported)', 'If your JSON schema is big and has a lot of repetition, it can be made simpler and smaller by defining Schema objects as reference.\nThese references will be placed in a ""definitions"" section in the main schema.', 'This becomes really useful when using the same object several times', 'If you want to minimize the output size without using names explicitly, you can have the library generate hashes of parts of the output JSON\nschema and use them as references throughout.', 'Enable this behaviour by providing the parameter ', ' to the json_schema method.', 'Be aware that this method is less often compatible with IDEs and JSON schema libraries.\nIt produces a JSON schema that is more difficult to read by humans.', '\n      Schema validation just got Pythonic\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ' is tested with Python 2.6, 2.7, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9 and PyPy.', ' follows ', '.', 'ignore_extra_keys is True', 'at least one key is str or object', ' -> ', ' -> ', ' -> ', ' -> ', ' -> ', ' -> ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    '])"
