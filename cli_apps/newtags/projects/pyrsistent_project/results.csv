content
"(['tobgu/pyrsistent', 'Name already in use', 'Pyrsistent', 'InvariantException', 'InvariantException', 'Mapping', 'evolvers'], ['\n        Persistent/Immutable/Functional data structures for Python\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Pyrsistent is a number of persistent collections (by some referred to as functional data structures). Persistent in\nthe sense that they are immutable.', 'All methods on a data structure that would normally mutate it instead return a new copy of the structure containing the\nrequested updates. The original structure is left untouched.', 'This will simplify the reasoning about what a program does since no hidden side effects ever can take place to these\ndata structures. You can rest assured that the object you hold a reference to will remain the same throughout its\nlifetime and need not worry that somewhere five stack levels below you in the darkest corner of your application\nsomeone has decided to remove that element that you expected to be there.', 'Pyrsistent is influenced by persistent data structures such as those found in the standard library of Clojure. The\ndata structures are designed to share common elements through path copying.\nIt aims at taking these concepts and make them as pythonic as possible so that they can be easily integrated into any python\nprogram without hassle.', 'If you want use literal syntax to define them in your code rather\nthan function calls check out ', '. Be aware, that one is experimental, unmaintained and alpha software.', ""If you cannot find the persistent data structure you're looking for here you may want to take a look at\n"", "" which is maintained by @mingmingrr. If you still don't find what you're looking for please\nopen an issue for discussion. If we agree that functionality is missing you may want to go ahead and create\na Pull Request implement the missing functionality."", 'The collection types and key features currently implemented are:', 'Below are examples of common usage patterns for some of the structures and features. More information and\nfull documentation for all data structures is available in the ', '.', 'With full support for the ', ' protocol PVector is meant as a drop in replacement to the built in list from a readers\npoint of view. Write operations of course differ since no in place mutation is done but naming should be in line\nwith corresponding operations on the built in list.', 'Support for the ', ' protocol also means that it can be used as key in ', '.', 'Appends are amortized O(1). Random access and insert is log32(n) where n is the size of the vector.', 'With full support for the ', ' protocol PMap is meant as a drop in replacement to the built in dict from a readers point\nof view. Support for the ', ' protocol also means that it can be used as key in other ', '.', 'Random access and insert is log32(n) where n is the size of the map.', 'With full support for the ', ' protocol PSet is meant as a drop in replacement to the built in set from a readers point\nof view. Support for the ', ' protocol also means that it can be used as key in ', '.', 'Random access and insert is log32(n) where n is the size of the set.', 'A PRecord is a PMap with a fixed set of specified fields. Records are declared as python classes inheriting\nfrom PRecord. Because it is a PMap it has full support for all Mapping methods such as iteration and element\naccess using subscript notation.', 'It is possible to add type information to the record to enforce type checks. Multiple allowed types can be specified\nby providing an iterable of types.', 'Custom types (classes) that are iterable should be wrapped in a tuple to prevent their\nmembers being added to the set of valid types.  Although Enums in particular are now\nsupported without wrapping, see #83 for more information.', 'Fields are not mandatory by default but can be specified as such. If fields are missing an\n', ' will be thrown which contains information about the missing fields.', 'It is possible to add invariants that must hold when evolving the record. Invariants can be\nspecified on both field and record level. If invariants fail an ', ' will be\nthrown which contains information about the failing invariants. An invariant function should\nreturn a tuple consisting of a boolean that tells if the invariant holds or not and an object\ndescribing the invariant. This object can later be used to identify which invariant that failed.', 'The global invariant function is only executed if all field invariants hold.', 'Global invariants are inherited to subclasses.', 'Invariants may also contain multiple assertions. For those cases the invariant function should\nreturn a tuple of invariant tuples as described above. This structure is reflected in the\ninvariant_errors attribute of the exception which will contain tuples with data from all failed\ninvariants. Eg:', ""It's possible to specify factory functions for fields. The factory function receives whatever\nis supplied as field value and the actual returned by the factory is assigned to the field\ngiven that any type and invariant checks hold.\nPRecords have a default factory specified as a static function on the class, create(). It takes\na "", ' as argument and returns an instance of the specific record.\nIf a record has fields of type PRecord the create() method of that record will\nbe called to create the ""sub record"" if no factory has explicitly been specified to override\nthis behaviour.', 'It is also possible to have fields with ', ' collections.', 'PRecords support serialization back to dicts. Default serialization will take keys and values\n""as is"" and output them into a dict. It is possible to specify custom serialization functions\nto take care of fields that require special treatment.', 'A PClass is a python class with a fixed set of specified fields. PClasses are declared as python classes inheriting\nfrom PClass. It is defined the same way that PRecords are and behaves like a PRecord in all aspects except that it\nis not a PMap and hence not a collection but rather a plain Python object.', 'Checked collections currently come in three flavors: CheckedPVector, CheckedPMap and CheckedPSet.', 'Transformations are inspired by the cool library ', ' for Clojure. They let you evolve PMaps and PVectors\nwith arbitrarily deep/complex nesting using simple syntax and flexible matching syntax.', 'The first argument to transformation is the path that points out the value to transform. The\nsecond is the transformation to perform. If the transformation is callable it will be applied\nto the value(s) matching the path. The path may also contain callables. In that case they are\ntreated as matchers. If the matcher returns True for a specific key it is considered for transformation.', 'PVector, PMap and PSet all have support for a concept dubbed ', '. An evolver acts like a mutable\nview of the underlying persistent data structure with ""transaction like"" semantics. No updates of the original\ndata structure is ever performed, it is still fully immutable.', 'The evolvers have a very limited API by design to discourage excessive, and inappropriate, usage as that would\ntake us down the mutable road. In principle only basic mutation and element access functions are supported.\nCheck out the ', ' of each data structure for specific examples.', 'Examples of when you may want to use an evolver instead of working directly with the data structure include:', 'These functions are great when your cozy immutable world has to interact with the evil mutable world outside.', 'By default, freeze will also recursively convert values inside PVectors and PMaps. This behaviour can be changed by providing freeze with the flag strict=False.', 'In this regard, thaw operates as the inverse of freeze so will thaw values inside native data structures unless passed the strict=False flag.', 'Pyrsistent is developed and tested on Python 3.7+ and PyPy3.', 'Pyrsistent is developed with performance in mind. Still, while some operations are nearly on par with their built in,\nmutable, counterparts in terms of speed, other operations are slower. In the cases where attempts at\noptimizations have been done, speed has generally been valued over space.', 'Pyrsistent comes with two API compatible flavors of PVector (on which PMap and PSet are based), one pure Python\nimplementation and one implemented as a C extension. The latter generally being 2 - 20 times faster than the former.\nThe C extension will be used automatically when possible.', 'The pure python implementation is fully PyPy compatible. Running it under PyPy speeds operations up considerably if\nthe structures are used heavily (if JITed), for some cases the performance is almost on par with the built in counterparts.', 'PEP 561 style type hints for use with mypy and various editors are available for most types and functions in pyrsistent.', 'Type classes for annotating your own code with pyrsistent types are also available under pyrsistent.typing.', 'pip install pyrsistent', 'Available at ', 'Brief presentation available at ', 'Tobias Gustafsson ', 'Christopher Armstrong ', 'Anders Hovm√∂ller ', 'Itamar Turner-Trauring ', 'Jonathan Lange ', 'Richard Futrell ', 'Jakob Hollenstein ', 'David Honour ', 'David R. MacIver ', 'Marcus Ewert ', 'Jean-Paul Calderone ', 'Douglas Treadwell ', 'Travis Parker ', 'Julian Berman ', 'Dennis Tomas ', 'Neil Vyas ', 'doozr ', 'Kamil Galuszka ', 'Tsuyoshi Hombashi ', 'nattofriends ', 'agberk ', 'Waleed Khan ', 'Jean-Louis Fuchs ', 'Carlos Corbacho ', 'Felix Yan ', 'benrg ', 'Jere Lahelma ', 'Max Taggart ', 'Vincent Philippon ', 'Semen Zhydenko ', 'Till Varoquaux  ', 'Michal Kowalik ', 'ossdev07 ', 'Kerry Olesen ', 'johnthagen ', 'Bastien Vallet ', 'Ram Rachum  ', 'Vincent Philippon ', 'Andrey Bienkowski ', 'Ethan McCue ', 'Jason R. Coombs ', 'Nathan ', 'Geert Barentsen ', 'phil-arh ', 'Tam√°s Nepusz ', 'Hugo van Kemenade ', 'Ben Beasley ', 'Noah C. Benson ', 'dscrofts ', 'Andy Reagan ', 'Aaron Durant ', ""Want to contribute? That's great! If you experience problems please log them on GitHub. If you want to contribute code,\nplease fork the repository and submit a pull request."", 'Tests can be executed using ', '.', 'Install tox: ', 'Run test for Python 3.8: ', ""Pyrsistent can be considered stable and mature (who knows, there may even be a 1.0 some day :-)). The project is\nmaintained, bugs fixed, PRs reviewed and merged and new releases made. I currently do not have time for development\nof new features or functionality which I don't have use for myself. I'm more than happy to take PRs for new\nfunctionality though!"", 'There are a bunch of issues marked with ', ' and ', "" that contain requests for new functionality\nthat would be nice to include. The level of difficulty and extend of the issues varies, please reach out to me if you're\ninterested in working on any of them."", ""If you feel that you have a grand master plan for where you would like Pyrsistent to go and have the time to put into\nit please don't hesitate to discuss this with me and submit PRs for it. If all goes well I'd be more than happy to add\nadditional maintainers to the project!"", '\n      Persistent/Immutable/Functional data structures for Python\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ', similar to a python list', ', similar to dict', ', similar to set', ', a PMap on steroids with fixed fields, optional type and invariant checking and much more', ', a Python class fixed fields, optional type and invariant checking and much more', ', PVector, PMap and PSet with optional type and invariance checks and more', 'PBag, similar to collections.Counter', 'PList, a classic singly linked list', 'PDeque, similar to collections.deque', 'Immutable object type (immutable) built on the named tuple', ' and ', ' functions to convert between pythons standard collections and pyrsistent collections.', 'Flexible ', ' of arbitrarily complex structures built from PMaps and PVectors.', 'Multiple updates are done to the same data structure and the intermediate results are of no\ninterest. In this case using an evolver may be a more efficient and easier to work with.', 'You need to pass a vector into a legacy function or a function that you have no control\nover which performs in place mutations. In this case pass an evolver instance\ninstead and then create a new pvector from the evolver once the function returns.', 'pip install -r requirements.txt', 'Update CHANGES.txt', 'Update README.rst with any new contributors and potential info needed.', 'Update _pyrsistent_version.py', ""Commit and tag with new version: git add -u . && git commit -m 'Prepare version vX.Y.Z' && git tag -a vX.Y.Z -m 'vX.Y.Z'"", 'Push commit and tags: git push --follow-tags', 'Build new release using Github actions', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
content
"(['tobgu/pyrsistent', 'Name already in use', 'Pyrsistent', 'InvariantException', 'InvariantException', 'Mapping', 'evolvers'], ['\n        Persistent/Immutable/Functional data structures for Python\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Pyrsistent is a number of persistent collections (by some referred to as functional data structures). Persistent in\nthe sense that they are immutable.', 'All methods on a data structure that would normally mutate it instead return a new copy of the structure containing the\nrequested updates. The original structure is left untouched.', 'This will simplify the reasoning about what a program does since no hidden side effects ever can take place to these\ndata structures. You can rest assured that the object you hold a reference to will remain the same throughout its\nlifetime and need not worry that somewhere five stack levels below you in the darkest corner of your application\nsomeone has decided to remove that element that you expected to be there.', 'Pyrsistent is influenced by persistent data structures such as those found in the standard library of Clojure. The\ndata structures are designed to share common elements through path copying.\nIt aims at taking these concepts and make them as pythonic as possible so that they can be easily integrated into any python\nprogram without hassle.', 'If you want use literal syntax to define them in your code rather\nthan function calls check out ', '. Be aware, that one is experimental, unmaintained and alpha software.', ""If you cannot find the persistent data structure you're looking for here you may want to take a look at\n"", "" which is maintained by @mingmingrr. If you still don't find what you're looking for please\nopen an issue for discussion. If we agree that functionality is missing you may want to go ahead and create\na Pull Request implement the missing functionality."", 'The collection types and key features currently implemented are:', 'Below are examples of common usage patterns for some of the structures and features. More information and\nfull documentation for all data structures is available in the ', '.', 'With full support for the ', ' protocol PVector is meant as a drop in replacement to the built in list from a readers\npoint of view. Write operations of course differ since no in place mutation is done but naming should be in line\nwith corresponding operations on the built in list.', 'Support for the ', ' protocol also means that it can be used as key in ', '.', 'Appends are amortized O(1). Random access and insert is log32(n) where n is the size of the vector.', 'With full support for the ', ' protocol PMap is meant as a drop in replacement to the built in dict from a readers point\nof view. Support for the ', ' protocol also means that it can be used as key in other ', '.', 'Random access and insert is log32(n) where n is the size of the map.', 'With full support for the ', ' protocol PSet is meant as a drop in replacement to the built in set from a readers point\nof view. Support for the ', ' protocol also means that it can be used as key in ', '.', 'Random access and insert is log32(n) where n is the size of the set.', 'A PRecord is a PMap with a fixed set of specified fields. Records are declared as python classes inheriting\nfrom PRecord. Because it is a PMap it has full support for all Mapping methods such as iteration and element\naccess using subscript notation.', 'It is possible to add type information to the record to enforce type checks. Multiple allowed types can be specified\nby providing an iterable of types.', 'Custom types (classes) that are iterable should be wrapped in a tuple to prevent their\nmembers being added to the set of valid types.  Although Enums in particular are now\nsupported without wrapping, see #83 for more information.', 'Fields are not mandatory by default but can be specified as such. If fields are missing an\n', ' will be thrown which contains information about the missing fields.', 'It is possible to add invariants that must hold when evolving the record. Invariants can be\nspecified on both field and record level. If invariants fail an ', ' will be\nthrown which contains information about the failing invariants. An invariant function should\nreturn a tuple consisting of a boolean that tells if the invariant holds or not and an object\ndescribing the invariant. This object can later be used to identify which invariant that failed.', 'The global invariant function is only executed if all field invariants hold.', 'Global invariants are inherited to subclasses.', 'Invariants may also contain multiple assertions. For those cases the invariant function should\nreturn a tuple of invariant tuples as described above. This structure is reflected in the\ninvariant_errors attribute of the exception which will contain tuples with data from all failed\ninvariants. Eg:', ""It's possible to specify factory functions for fields. The factory function receives whatever\nis supplied as field value and the actual returned by the factory is assigned to the field\ngiven that any type and invariant checks hold.\nPRecords have a default factory specified as a static function on the class, create(). It takes\na "", ' as argument and returns an instance of the specific record.\nIf a record has fields of type PRecord the create() method of that record will\nbe called to create the ""sub record"" if no factory has explicitly been specified to override\nthis behaviour.', 'It is also possible to have fields with ', ' collections.', 'PRecords support serialization back to dicts. Default serialization will take keys and values\n""as is"" and output them into a dict. It is possible to specify custom serialization functions\nto take care of fields that require special treatment.', 'A PClass is a python class with a fixed set of specified fields. PClasses are declared as python classes inheriting\nfrom PClass. It is defined the same way that PRecords are and behaves like a PRecord in all aspects except that it\nis not a PMap and hence not a collection but rather a plain Python object.', 'Checked collections currently come in three flavors: CheckedPVector, CheckedPMap and CheckedPSet.', 'Transformations are inspired by the cool library ', ' for Clojure. They let you evolve PMaps and PVectors\nwith arbitrarily deep/complex nesting using simple syntax and flexible matching syntax.', 'The first argument to transformation is the path that points out the value to transform. The\nsecond is the transformation to perform. If the transformation is callable it will be applied\nto the value(s) matching the path. The path may also contain callables. In that case they are\ntreated as matchers. If the matcher returns True for a specific key it is considered for transformation.', 'PVector, PMap and PSet all have support for a concept dubbed ', '. An evolver acts like a mutable\nview of the underlying persistent data structure with ""transaction like"" semantics. No updates of the original\ndata structure is ever performed, it is still fully immutable.', 'The evolvers have a very limited API by design to discourage excessive, and inappropriate, usage as that would\ntake us down the mutable road. In principle only basic mutation and element access functions are supported.\nCheck out the ', ' of each data structure for specific examples.', 'Examples of when you may want to use an evolver instead of working directly with the data structure include:', 'These functions are great when your cozy immutable world has to interact with the evil mutable world outside.', 'By default, freeze will also recursively convert values inside PVectors and PMaps. This behaviour can be changed by providing freeze with the flag strict=False.', 'In this regard, thaw operates as the inverse of freeze so will thaw values inside native data structures unless passed the strict=False flag.', 'Pyrsistent is developed and tested on Python 3.7+ and PyPy3.', 'Pyrsistent is developed with performance in mind. Still, while some operations are nearly on par with their built in,\nmutable, counterparts in terms of speed, other operations are slower. In the cases where attempts at\noptimizations have been done, speed has generally been valued over space.', 'Pyrsistent comes with two API compatible flavors of PVector (on which PMap and PSet are based), one pure Python\nimplementation and one implemented as a C extension. The latter generally being 2 - 20 times faster than the former.\nThe C extension will be used automatically when possible.', 'The pure python implementation is fully PyPy compatible. Running it under PyPy speeds operations up considerably if\nthe structures are used heavily (if JITed), for some cases the performance is almost on par with the built in counterparts.', 'PEP 561 style type hints for use with mypy and various editors are available for most types and functions in pyrsistent.', 'Type classes for annotating your own code with pyrsistent types are also available under pyrsistent.typing.', 'pip install pyrsistent', 'Available at ', 'Brief presentation available at ', 'Tobias Gustafsson ', 'Christopher Armstrong ', 'Anders Hovm√∂ller ', 'Itamar Turner-Trauring ', 'Jonathan Lange ', 'Richard Futrell ', 'Jakob Hollenstein ', 'David Honour ', 'David R. MacIver ', 'Marcus Ewert ', 'Jean-Paul Calderone ', 'Douglas Treadwell ', 'Travis Parker ', 'Julian Berman ', 'Dennis Tomas ', 'Neil Vyas ', 'doozr ', 'Kamil Galuszka ', 'Tsuyoshi Hombashi ', 'nattofriends ', 'agberk ', 'Waleed Khan ', 'Jean-Louis Fuchs ', 'Carlos Corbacho ', 'Felix Yan ', 'benrg ', 'Jere Lahelma ', 'Max Taggart ', 'Vincent Philippon ', 'Semen Zhydenko ', 'Till Varoquaux  ', 'Michal Kowalik ', 'ossdev07 ', 'Kerry Olesen ', 'johnthagen ', 'Bastien Vallet ', 'Ram Rachum  ', 'Vincent Philippon ', 'Andrey Bienkowski ', 'Ethan McCue ', 'Jason R. Coombs ', 'Nathan ', 'Geert Barentsen ', 'phil-arh ', 'Tam√°s Nepusz ', 'Hugo van Kemenade ', 'Ben Beasley ', 'Noah C. Benson ', 'dscrofts ', 'Andy Reagan ', 'Aaron Durant ', ""Want to contribute? That's great! If you experience problems please log them on GitHub. If you want to contribute code,\nplease fork the repository and submit a pull request."", 'Tests can be executed using ', '.', 'Install tox: ', 'Run test for Python 3.8: ', ""Pyrsistent can be considered stable and mature (who knows, there may even be a 1.0 some day :-)). The project is\nmaintained, bugs fixed, PRs reviewed and merged and new releases made. I currently do not have time for development\nof new features or functionality which I don't have use for myself. I'm more than happy to take PRs for new\nfunctionality though!"", 'There are a bunch of issues marked with ', ' and ', "" that contain requests for new functionality\nthat would be nice to include. The level of difficulty and extend of the issues varies, please reach out to me if you're\ninterested in working on any of them."", ""If you feel that you have a grand master plan for where you would like Pyrsistent to go and have the time to put into\nit please don't hesitate to discuss this with me and submit PRs for it. If all goes well I'd be more than happy to add\nadditional maintainers to the project!"", '\n      Persistent/Immutable/Functional data structures for Python\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ', similar to a python list', ', similar to dict', ', similar to set', ', a PMap on steroids with fixed fields, optional type and invariant checking and much more', ', a Python class fixed fields, optional type and invariant checking and much more', ', PVector, PMap and PSet with optional type and invariance checks and more', 'PBag, similar to collections.Counter', 'PList, a classic singly linked list', 'PDeque, similar to collections.deque', 'Immutable object type (immutable) built on the named tuple', ' and ', ' functions to convert between pythons standard collections and pyrsistent collections.', 'Flexible ', ' of arbitrarily complex structures built from PMaps and PVectors.', 'Multiple updates are done to the same data structure and the intermediate results are of no\ninterest. In this case using an evolver may be a more efficient and easier to work with.', 'You need to pass a vector into a legacy function or a function that you have no control\nover which performs in place mutations. In this case pass an evolver instance\ninstead and then create a new pvector from the evolver once the function returns.', 'pip install -r requirements.txt', 'Update CHANGES.txt', 'Update README.rst with any new contributors and potential info needed.', 'Update _pyrsistent_version.py', ""Commit and tag with new version: git add -u . && git commit -m 'Prepare version vX.Y.Z' && git tag -a vX.Y.Z -m 'vX.Y.Z'"", 'Push commit and tags: git push --follow-tags', 'Build new release using Github actions', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
