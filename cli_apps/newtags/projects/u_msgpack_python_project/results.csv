content
"(['vsergeev/u-msgpack-python', 'Name already in use', 'u-msgpack-python ', ' ', ' '], ['\n        A portable, lightweight MessagePack serializer and deserializer written in pure Python, compatible with Python 2, Python 3, CPython, PyPy / msgpack.org[Python] \n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'u-msgpack-python is a lightweight ', ' serializer and deserializer module written in pure Python, compatible with both Python 2 and 3, as well CPython and PyPy implementations of Python. u-msgpack-python is fully compliant with the latest ', '. In particular, it supports the new binary, UTF-8 string, application-defined ext, and timestamp types.', 'u-msgpack-python is currently distributed on ', ' and as a single file: ', '.', 'With pip:', 'With easy_install:', 'or simply drop ', ' into your project!', 'Basic Example:', 'A more complicated example:', 'Streaming serialization with file-like objects:', 'Serializing and deserializing a raw Ext type:', 'Serializing and deserializing application-defined types with ', ':', 'Serializing and deserializing application-defined types with Ext handlers:', 'Python standard library style names ', ', ', ', ', ', ', ' are also available:', 'The ', ' decorator registers application classes for automatic\npacking and unpacking with the specified Ext type.  The decorator accepts the\nExt type code as an argument. The application class should implement a\n', ' method that returns serialized bytes, and an ', ' class method\nor static method that accepts serialized bytes and returns an instance of the\napplication class.', 'Example for registering, packing, and unpacking a custom class with Ext type\ncode 0x10:', 'The packing functions accept an optional ', ' dictionary that maps\ncustom types to callables that pack the type into an Ext object. The callable\nshould accept the custom type object as an argument and return a packed\n', ' object.', 'Example for packing ', ', ', ', and ', ' types into Ext\nobjects with type codes 0x20, 0x30, and 0x40, respectively:', 'Similarly, the unpacking functions accept an optional ', ' dictionary\nthat maps Ext type codes to callables that unpack the Ext into a custom object.\nThe callable should accept a ', ' object as an argument and return an\nunpacked custom type object.', 'Example for unpacking Ext objects with type codes 0x20, 0x30, and 0x40, into\n', ', ', ', and ', ' typed objects, respectively:', 'Example for packing and unpacking a custom class:', 'The streaming ', '/', ' and ', '/', ' functions allow packing and unpacking objects directly to and from a stream, respectively. Streaming may be necessary when unpacking serialized bytes whose size is unknown in advance, or it may be more convenient and efficient when working directly with stream objects (e.g. files or stream sockets).', ' / ', ' serialize Python object ', ' to a ', ' supporting file-like object ', '.', ' / ', ' deserialize a Python object from a ', ' supporting file-like object ', '.', 'The unpacking functions provide a ', ' option to unpack MessagePack maps into the ', ' type, rather than the unordered ', ' type, to preserve the order of deserialized MessagePack maps.', 'The unpacking functions provide a ', ' option to unpack MessagePack arrays into tuples, rather than lists.', 'The unpacking functions provide an ', ' option to unpack MessagePack strings with invalid UTF-8 into the ', ' type, instead of throwing an exception. The ', ' type is a subclass of ', ', and can be used like any other ', ' object.', 'The packing functions provide a ', ' option to force packing of floats into the specified precision: ', ' for IEEE-754 single-precision floats, or ', ' for IEEE-754 double-precision floats.', 'The compatibility mode supports the ""raw"" bytes MessagePack type from the ', '. When the module-wide ', ' option is enabled, both unicode strings and bytes will be serialized into the ""raw"" MessagePack type, and the ""raw"" MessagePack type will be deserialized into bytes.', 'If an error occurs during packing, umsgpack will raise an exception derived from ', '. All possible packing exceptions are described below.', ': Object type not supported for packing.', ': Ext serializable class is missing implementation of ', '.', 'If a non-byte-string argument is passed to ', ', it will raise a ', ' exception. If an error occurs during unpacking, umsgpack will raise an exception derived from ', '. All possible unpacking exceptions are described below.', ': Packed data is not type ', ' (Python 2), or not type ', ' (Python 3).', ': Insufficient data to unpack the serialized object.', ': Invalid UTF-8 string encountered during unpacking.', 'String bytes are strictly decoded with UTF-8. This exception is thrown if\nUTF-8 decoding of string bytes fails. Use the ', ' option\nto unpack invalid MessagePack strings into byte strings.', ': Unsupported timestamp encountered during unpacking.', 'The official timestamp extension type supports 32-bit, 64-bit and 96-bit\nformats. This exception is thrown if a timestamp extension type with an\nunsupported format is encountered.', ': Reserved code encountered during unpacking.', ': Unhashable key encountered during map unpacking. The packed map cannot be unpacked into a Python dictionary.', 'Python dictionaries only support keys that are instances of ', ', so while the map ', ' has a MessagePack serialization, it cannot be unpacked into a valid Python dictionary.', ': Duplicate key encountered during map unpacking.', 'Python dictionaries do not support duplicate keys, but MessagePack maps may be serialized with duplicate keys.', ': Ext serializable class is missing implementation of ', '.', 'The included unit tests may be run with ', ', under your favorite interpreter.', 'Alternatively, you can use ', ' or ', ' to test multiple Python versions at once.', 'u-msgpack-python is MIT licensed. See the included ', ' file for more details.', '\n      A portable, lightweight MessagePack serializer and deserializer written in pure Python, compatible with Python 2, Python 3, CPython, PyPy / msgpack.org[Python] \n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'Python 2\n', ' type objects are packed into, and unpacked from, the msgpack ', ' format', ' type objects are packed into, and unpacked from, the msgpack ', ' format', '\n', 'Python 3\n', ' type objects are packed into, and unpacked from, the msgpack ', ' format', ' type objects are packed into, and unpacked from, the msgpack ', ' format', '\n', 'The msgpack string format is strictly decoded with UTF-8 â€” an exception is thrown if the string bytes cannot be decoded into a valid UTF-8 string, unless the ', ' option is enabled', 'The msgpack array format is unpacked into a Python list, unless it is the key of a map, in which case it is unpacked into a Python tuple', 'Python tuples and lists are both packed into the msgpack array format', ""Python float types are packed into the msgpack float32 or float64 format depending on the system's "", 'The Python ', ' type is packed into, and unpacked from, the msgpack ', ' format\n', 'Note that this Python type only supports microsecond resolution, while the msgpack ', ' format supports nanosecond resolution. Timestamps with finer than microsecond resolution will lose precision during unpacking. Users may override the packing and unpacking of the msgpack ', ' format with a custom type for alternate behavior.', 'Both naive and aware timestamp are supported. Naive timestamps are packed as if they are in the UTC timezone. Timestamps are always unpacked as aware ', ' objects in the UTC timezone.', '\n', 'Ext type handlers specified in the optional ', ' dictionary will override ', ' classes during packing and unpacking', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    '])"
content
"(['vsergeev/u-msgpack-python', 'Name already in use', 'u-msgpack-python ', ' ', ' '], ['\n        A portable, lightweight MessagePack serializer and deserializer written in pure Python, compatible with Python 2, Python 3, CPython, PyPy / msgpack.org[Python] \n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'u-msgpack-python is a lightweight ', ' serializer and deserializer module written in pure Python, compatible with both Python 2 and 3, as well CPython and PyPy implementations of Python. u-msgpack-python is fully compliant with the latest ', '. In particular, it supports the new binary, UTF-8 string, application-defined ext, and timestamp types.', 'u-msgpack-python is currently distributed on ', ' and as a single file: ', '.', 'With pip:', 'With easy_install:', 'or simply drop ', ' into your project!', 'Basic Example:', 'A more complicated example:', 'Streaming serialization with file-like objects:', 'Serializing and deserializing a raw Ext type:', 'Serializing and deserializing application-defined types with ', ':', 'Serializing and deserializing application-defined types with Ext handlers:', 'Python standard library style names ', ', ', ', ', ', ', ' are also available:', 'The ', ' decorator registers application classes for automatic\npacking and unpacking with the specified Ext type.  The decorator accepts the\nExt type code as an argument. The application class should implement a\n', ' method that returns serialized bytes, and an ', ' class method\nor static method that accepts serialized bytes and returns an instance of the\napplication class.', 'Example for registering, packing, and unpacking a custom class with Ext type\ncode 0x10:', 'The packing functions accept an optional ', ' dictionary that maps\ncustom types to callables that pack the type into an Ext object. The callable\nshould accept the custom type object as an argument and return a packed\n', ' object.', 'Example for packing ', ', ', ', and ', ' types into Ext\nobjects with type codes 0x20, 0x30, and 0x40, respectively:', 'Similarly, the unpacking functions accept an optional ', ' dictionary\nthat maps Ext type codes to callables that unpack the Ext into a custom object.\nThe callable should accept a ', ' object as an argument and return an\nunpacked custom type object.', 'Example for unpacking Ext objects with type codes 0x20, 0x30, and 0x40, into\n', ', ', ', and ', ' typed objects, respectively:', 'Example for packing and unpacking a custom class:', 'The streaming ', '/', ' and ', '/', ' functions allow packing and unpacking objects directly to and from a stream, respectively. Streaming may be necessary when unpacking serialized bytes whose size is unknown in advance, or it may be more convenient and efficient when working directly with stream objects (e.g. files or stream sockets).', ' / ', ' serialize Python object ', ' to a ', ' supporting file-like object ', '.', ' / ', ' deserialize a Python object from a ', ' supporting file-like object ', '.', 'The unpacking functions provide a ', ' option to unpack MessagePack maps into the ', ' type, rather than the unordered ', ' type, to preserve the order of deserialized MessagePack maps.', 'The unpacking functions provide a ', ' option to unpack MessagePack arrays into tuples, rather than lists.', 'The unpacking functions provide an ', ' option to unpack MessagePack strings with invalid UTF-8 into the ', ' type, instead of throwing an exception. The ', ' type is a subclass of ', ', and can be used like any other ', ' object.', 'The packing functions provide a ', ' option to force packing of floats into the specified precision: ', ' for IEEE-754 single-precision floats, or ', ' for IEEE-754 double-precision floats.', 'The compatibility mode supports the ""raw"" bytes MessagePack type from the ', '. When the module-wide ', ' option is enabled, both unicode strings and bytes will be serialized into the ""raw"" MessagePack type, and the ""raw"" MessagePack type will be deserialized into bytes.', 'If an error occurs during packing, umsgpack will raise an exception derived from ', '. All possible packing exceptions are described below.', ': Object type not supported for packing.', ': Ext serializable class is missing implementation of ', '.', 'If a non-byte-string argument is passed to ', ', it will raise a ', ' exception. If an error occurs during unpacking, umsgpack will raise an exception derived from ', '. All possible unpacking exceptions are described below.', ': Packed data is not type ', ' (Python 2), or not type ', ' (Python 3).', ': Insufficient data to unpack the serialized object.', ': Invalid UTF-8 string encountered during unpacking.', 'String bytes are strictly decoded with UTF-8. This exception is thrown if\nUTF-8 decoding of string bytes fails. Use the ', ' option\nto unpack invalid MessagePack strings into byte strings.', ': Unsupported timestamp encountered during unpacking.', 'The official timestamp extension type supports 32-bit, 64-bit and 96-bit\nformats. This exception is thrown if a timestamp extension type with an\nunsupported format is encountered.', ': Reserved code encountered during unpacking.', ': Unhashable key encountered during map unpacking. The packed map cannot be unpacked into a Python dictionary.', 'Python dictionaries only support keys that are instances of ', ', so while the map ', ' has a MessagePack serialization, it cannot be unpacked into a valid Python dictionary.', ': Duplicate key encountered during map unpacking.', 'Python dictionaries do not support duplicate keys, but MessagePack maps may be serialized with duplicate keys.', ': Ext serializable class is missing implementation of ', '.', 'The included unit tests may be run with ', ', under your favorite interpreter.', 'Alternatively, you can use ', ' or ', ' to test multiple Python versions at once.', 'u-msgpack-python is MIT licensed. See the included ', ' file for more details.', '\n      A portable, lightweight MessagePack serializer and deserializer written in pure Python, compatible with Python 2, Python 3, CPython, PyPy / msgpack.org[Python] \n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'Python 2\n', ' type objects are packed into, and unpacked from, the msgpack ', ' format', ' type objects are packed into, and unpacked from, the msgpack ', ' format', '\n', 'Python 3\n', ' type objects are packed into, and unpacked from, the msgpack ', ' format', ' type objects are packed into, and unpacked from, the msgpack ', ' format', '\n', 'The msgpack string format is strictly decoded with UTF-8 â€” an exception is thrown if the string bytes cannot be decoded into a valid UTF-8 string, unless the ', ' option is enabled', 'The msgpack array format is unpacked into a Python list, unless it is the key of a map, in which case it is unpacked into a Python tuple', 'Python tuples and lists are both packed into the msgpack array format', ""Python float types are packed into the msgpack float32 or float64 format depending on the system's "", 'The Python ', ' type is packed into, and unpacked from, the msgpack ', ' format\n', 'Note that this Python type only supports microsecond resolution, while the msgpack ', ' format supports nanosecond resolution. Timestamps with finer than microsecond resolution will lose precision during unpacking. Users may override the packing and unpacking of the msgpack ', ' format with a custom type for alternate behavior.', 'Both naive and aware timestamp are supported. Naive timestamps are packed as if they are in the UTC timezone. Timestamps are always unpacked as aware ', ' objects in the UTC timezone.', '\n', 'Ext type handlers specified in the optional ', ' dictionary will override ', ' classes during packing and unpacking', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    '])"
