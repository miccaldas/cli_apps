content
"(['Python Object Graphs', 'lot'], [' is a module that lets you visually explore Python object graphs.', 'You’ll need ', ' if you want to draw\nthe pretty graphs.', 'I recommend ', ' for interactive use.\n', ' should suffice; objgraph will automatically look for it\nin your ', '.', ' or ', '.', 'Documentation lives at ', '.', 'Try this in a Python shell:', '(If you’ve installed ', ', omit the filename argument to get the\ninteractive viewer.)', 'You should see a graph like this:', 'If you prefer to handle your own file output, you can provide a file object to\nthe ', ' parameter of ', ' and ', ' instead of a\nfilename. The contents of this file will contain the graph source in DOT format.', 'Now try', 'and you’ll see', 'The original purpose of ', ' was to help me find memory leaks.\nThe idea was to pick an object in memory that shouldn’t be there and then\nsee what references are keeping it alive.', 'To get a quick overview of the objects in memory, use the imaginatively-named\n', ':', 'But that’s looking for a small needle in a large haystack.  Can we limit\nour haystack to objects that were created recently?  Perhaps.', 'Let’s define a function that “leaks” memory', 'We take a snapshot of all the objects counts that are alive before\nwe call our function', 'and see what changes after we call it', 'It’s easy to see ', ' instances that appeared and were\nnot freed.  I can pick one of them at random and trace the reference chain\nback to one of the garbage collector’s roots.', 'For simplicity’s sake let’s assume all of the roots are modules.  ', '\nprovides a function, ', ', to check this. If\nyou’ve any examples where that isn’t true, I’d love to hear about them\n(although see ', ').', 'It is perhaps surprising to find ', ' at the end of that chain\n(apparently ', ' monkey-patches it), but the important things –\n', ' and its cache dictionary – are in there.', 'There are other tools, perhaps better suited for memory leak hunting:\n', ',\n', '.', 'Bugs in C-level reference counting may leave objects in memory that do not\nhave any other objects pointing at them.  You can find these by calling\n', ', but you’ll have to filter out legitimate GC\nroots from them, and there are a ', ' of those:', 'I’ve developed a set of functions that eventually became objgraph when I\nwas hunting for memory leaks in a Python program.  The whole story – with\nillustrated examples – is in this series of blog posts:', 'And here’s the change log', 'The source code can be found in this Git repository:\n', '.', 'To check it out, use ', '.', 'Report bugs at ', '.', 'For more information, see ', '.', '\n          ', '\n          ', ' |', ' »', '\n', '\n', '\n', '\n          ', '\n          ', ' |', ' »'])"
content
"(['Python Object Graphs', 'lot'], [' is a module that lets you visually explore Python object graphs.', 'You’ll need ', ' if you want to draw\nthe pretty graphs.', 'I recommend ', ' for interactive use.\n', ' should suffice; objgraph will automatically look for it\nin your ', '.', ' or ', '.', 'Documentation lives at ', '.', 'Try this in a Python shell:', '(If you’ve installed ', ', omit the filename argument to get the\ninteractive viewer.)', 'You should see a graph like this:', 'If you prefer to handle your own file output, you can provide a file object to\nthe ', ' parameter of ', ' and ', ' instead of a\nfilename. The contents of this file will contain the graph source in DOT format.', 'Now try', 'and you’ll see', 'The original purpose of ', ' was to help me find memory leaks.\nThe idea was to pick an object in memory that shouldn’t be there and then\nsee what references are keeping it alive.', 'To get a quick overview of the objects in memory, use the imaginatively-named\n', ':', 'But that’s looking for a small needle in a large haystack.  Can we limit\nour haystack to objects that were created recently?  Perhaps.', 'Let’s define a function that “leaks” memory', 'We take a snapshot of all the objects counts that are alive before\nwe call our function', 'and see what changes after we call it', 'It’s easy to see ', ' instances that appeared and were\nnot freed.  I can pick one of them at random and trace the reference chain\nback to one of the garbage collector’s roots.', 'For simplicity’s sake let’s assume all of the roots are modules.  ', '\nprovides a function, ', ', to check this. If\nyou’ve any examples where that isn’t true, I’d love to hear about them\n(although see ', ').', 'It is perhaps surprising to find ', ' at the end of that chain\n(apparently ', ' monkey-patches it), but the important things –\n', ' and its cache dictionary – are in there.', 'There are other tools, perhaps better suited for memory leak hunting:\n', ',\n', '.', 'Bugs in C-level reference counting may leave objects in memory that do not\nhave any other objects pointing at them.  You can find these by calling\n', ', but you’ll have to filter out legitimate GC\nroots from them, and there are a ', ' of those:', 'I’ve developed a set of functions that eventually became objgraph when I\nwas hunting for memory leaks in a Python program.  The whole story – with\nillustrated examples – is in this series of blog posts:', 'And here’s the change log', 'The source code can be found in this Git repository:\n', '.', 'To check it out, use ', '.', 'Report bugs at ', '.', 'For more information, see ', '.', '\n          ', '\n          ', ' |', ' »', '\n', '\n', '\n', '\n          ', '\n          ', ' |', ' »'])"
