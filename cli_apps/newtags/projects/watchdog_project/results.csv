content
"(['gorakhargosh/watchdog', 'Name already in use', 'Watchdog', 'optional'], ['\n        Python library and shell utilities to monitor filesystem events.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', '\n', 'Python API and shell utilities to monitor file system events.', 'Works on 3.7+.', 'A simple program that uses watchdog to monitor directories specified\nas command-line arguments and logs events generated:', 'Watchdog comes with an ', ' utility script called ', '.\nPlease type ', ' at the shell prompt to\nknow more about this tool.', 'Here is how you can log the current directory recursively\nfor events related only to ', ' and ', ' files while\nignoring all directory events:', 'You can use the ', ' subcommand to execute shell commands in\nresponse to events:', 'Please see the help information for these commands by typing:', ' can read ', ' files and execute tricks within them in\nresponse to file system events. Tricks are actually event handlers that\nsubclass ', "" and are written by plugin authors. Trick\nclasses are augmented with a few additional features that regular event handlers\ndon't need."", 'An example ', ' file:', 'The directory containing the ', ' file will be monitored. Each trick\nclass is initialized with its corresponding keys in the ', ' file as\narguments and events are fed to an instance of this class as they arrive.', 'Install from PyPI using ', ':', 'Install from source:', 'You can browse the latest release ', ' online.', 'Fork the ', ' on GitHub and send a pull request, or file an issue\nticket at the ', '. For general help and questions use\n', ' with tag python-watchdog.', 'Create and activate your virtual environment, then:', 'If you are making a substantial change, add an entry to the ""Unreleased"" section\nof the ', '.', 'Note that when using watchdog with kqueue, you need the\nnumber of file descriptors allowed to be opened by programs\nrunning on your system to be increased to more than the\nnumber of files that you will be monitoring. The easiest way\nto do that is to edit your ', ' file and add\na line similar to:', 'This is an inherent problem with kqueue because it uses\nfile descriptors to monitor files. That plus the enormous\namount of bookkeeping that watchdog needs to do in order\nto monitor file descriptors just makes this a painful way\nto monitor files and directories. In essence, kqueue is\nnot a very scalable way to monitor a deeply nested\ndirectory of files and directories with a large number of\nfiles.', 'Vim does not modify files unless directed to do so.\nIt creates backup files and then swaps them in to replace\nthe files you are editing on the disk. This means that\nif you use Vim to edit your files, the on-modified events\nfor those files will not be triggered by watchdog.\nYou may need to configure Vim appropriately to disable\nthis feature.', 'When you want to watch changes in CIFS, you need to explicitly tell watchdog to\nuse ', ', that is, instead of letting watchdog decide an\nappropriate observer like in the example above, do:', 'Watchdog is licensed under the terms of the ', '.', 'Copyright 2011 ', '.', 'Copyright 2012 Google, Inc & contributors.', 'Project ', ' is available at Github. Please report bugs and file\nenhancement requests at the ', '.', 'Too many people tried to do the same thing and none did what I needed Python\nto do:', '\n      Python library and shell utilities to monitor filesystem events.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'Linux 2.6 (inotify)', 'macOS (FSEvents, kqueue)', 'FreeBSD/BSD (kqueue)', 'Windows (ReadDirectoryChangesW with I/O completion ports;\nReadDirectoryChangesW worker threads)', 'OS-independent (polling the disk for directory snapshots and comparing them\nperiodically; slow and not recommended)', 'Python 3.7 or above.', ' (only on macOS when installing from sources)', ' (only for ', ')', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
content
"(['gorakhargosh/watchdog', 'Name already in use', 'Watchdog', 'optional'], ['\n        Python library and shell utilities to monitor filesystem events.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', '\n', 'Python API and shell utilities to monitor file system events.', 'Works on 3.7+.', 'A simple program that uses watchdog to monitor directories specified\nas command-line arguments and logs events generated:', 'Watchdog comes with an ', ' utility script called ', '.\nPlease type ', ' at the shell prompt to\nknow more about this tool.', 'Here is how you can log the current directory recursively\nfor events related only to ', ' and ', ' files while\nignoring all directory events:', 'You can use the ', ' subcommand to execute shell commands in\nresponse to events:', 'Please see the help information for these commands by typing:', ' can read ', ' files and execute tricks within them in\nresponse to file system events. Tricks are actually event handlers that\nsubclass ', "" and are written by plugin authors. Trick\nclasses are augmented with a few additional features that regular event handlers\ndon't need."", 'An example ', ' file:', 'The directory containing the ', ' file will be monitored. Each trick\nclass is initialized with its corresponding keys in the ', ' file as\narguments and events are fed to an instance of this class as they arrive.', 'Install from PyPI using ', ':', 'Install from source:', 'You can browse the latest release ', ' online.', 'Fork the ', ' on GitHub and send a pull request, or file an issue\nticket at the ', '. For general help and questions use\n', ' with tag python-watchdog.', 'Create and activate your virtual environment, then:', 'If you are making a substantial change, add an entry to the ""Unreleased"" section\nof the ', '.', 'Note that when using watchdog with kqueue, you need the\nnumber of file descriptors allowed to be opened by programs\nrunning on your system to be increased to more than the\nnumber of files that you will be monitoring. The easiest way\nto do that is to edit your ', ' file and add\na line similar to:', 'This is an inherent problem with kqueue because it uses\nfile descriptors to monitor files. That plus the enormous\namount of bookkeeping that watchdog needs to do in order\nto monitor file descriptors just makes this a painful way\nto monitor files and directories. In essence, kqueue is\nnot a very scalable way to monitor a deeply nested\ndirectory of files and directories with a large number of\nfiles.', 'Vim does not modify files unless directed to do so.\nIt creates backup files and then swaps them in to replace\nthe files you are editing on the disk. This means that\nif you use Vim to edit your files, the on-modified events\nfor those files will not be triggered by watchdog.\nYou may need to configure Vim appropriately to disable\nthis feature.', 'When you want to watch changes in CIFS, you need to explicitly tell watchdog to\nuse ', ', that is, instead of letting watchdog decide an\nappropriate observer like in the example above, do:', 'Watchdog is licensed under the terms of the ', '.', 'Copyright 2011 ', '.', 'Copyright 2012 Google, Inc & contributors.', 'Project ', ' is available at Github. Please report bugs and file\nenhancement requests at the ', '.', 'Too many people tried to do the same thing and none did what I needed Python\nto do:', '\n      Python library and shell utilities to monitor filesystem events.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'Linux 2.6 (inotify)', 'macOS (FSEvents, kqueue)', 'FreeBSD/BSD (kqueue)', 'Windows (ReadDirectoryChangesW with I/O completion ports;\nReadDirectoryChangesW worker threads)', 'OS-independent (polling the disk for directory snapshots and comparing them\nperiodically; slow and not recommended)', 'Python 3.7 or above.', ' (only on macOS when installing from sources)', ' (only for ', ')', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
