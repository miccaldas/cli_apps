content
"(['Lucretiel/autocommand', 'Name already in use', 'autocommand'], ['\n        Autocommand turns a python function into a CLI program\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', '\n', 'A library to automatically generate and run simple argparse parsers from function signatures.', 'Autocommand is installed via pip:', ""Autocommand turns a function into a command-line program. It converts the function's parameter signature into command-line arguments, and automatically runs the function if the module was called as "", '. In effect, it lets your create a smart main function.', 'As you can see, autocommand converts the signature of the function into an argument spec. When you run the file as a program, autocommand collects the command-line arguments and turns them into function arguments. The function is executed with these arguments, and then the program exits with the return value of the function, via ', '. Autocommand also automatically creates a usage message, which can be invoked with ', ' or ', ', and automatically prints an error message when provided with invalid arguments.', 'You can use a type annotation to give an argument a type. Any type (or in fact any callable) that returns an object when given a string argument can be used, though there are a few special cases that are described later.', 'Autocommand will catch ', ' raised by the type during argument parsing, so you can supply a callable and do some basic argument validation as well.', 'You can add a ', ' parameter to your function to give it trailing arguments. The command will collect 0 or more trailing arguments and supply them to ', ' as a tuple. If a type annotation is supplied, the type is applied to each argument.', 'To create ', ' switches, just assign a default. Autocommand will automatically create ', ' and ', 'hort switches.', ""The option's type is automatically deduced from the default, unless one is explicitly given in an annotation:"", 'If an option is given a default value of ', ', it reads in a value as normal, but supplies ', "" if the option isn't provided."", 'If an argument is given a default value of ', ' or ', ', or\ngiven an explicit ', ' type, it becomes an option switch.', 'Autocommand attempts to do the ""correct thing"" in these cases- if the default is ', ', then supplying the switch makes the argument ', '; if the type is ', ' and the default is some other ', ' value, then supplying the switch makes the argument ', ', while not supplying the switch makes the argument the default value.', 'Autocommand also supports the creation of switch inverters. Pass ', ' to ', ' to enable this.', 'Using the ', ' version of a switch will pass the opposite value in as a function argument. If multiple switches are present, the last one takes precedence.', 'If the default value is a file object, such as ', "", then autocommand just looks for a string, for a file path. It doesn't do any special checking on the string, though (such as checking if the file exists); it's better to let the client decide how to handle errors in this case. Instead, it provides a special context manager called "", ', which behaves exactly like ', ' if a filename or other openable type is provided, but also lets you use already open files:', 'The ', ' decorator accepts ', ' and ', ' kwargs, corresponding to the ', '_ and ', '_ of the ', '. If no description is given, but the decorated function has a docstring, then it is taken as the ', ' for the ', '. You can also provide both the description and epilog in the docstring by splitting it into two sections with 4 or more - characters.', 'You can also attach description text to individual parameters in the annotation. To attach both a type and a description, supply them both in any order in a tuple', 'Autocommand automatically follows wrapper chains created by ', '. This means that you can apply other wrapping decorators to your main function, and autocommand will still correctly detect the signature.', 'Even though autocommand is being applied to the ', ' returned by ', ', it still retreives the signature of the underlying ', ' function to create the argument parsing.', ""While autocommand's automatic parser generator is a powerful convenience, it doesn't cover all of the different features that argparse provides. If you need these features, you can provide your own parser as a kwarg to "", ':', ""Any parser should work fine, so long as each of the parser's arguments has a corresponding parameter in the decorated main function. The order of parameters doesn't matter, as long as they are all present. Note that when using a custom parser, autocommand doesn't modify the parser or the retrieved arguments. This means that no description/epilog will be added, and the function's type annotations and defaults (if present) will be ignored."", 'The decorated function is only called and exited from if the first argument to ', ' is ', ' or ', '. If it is neither of these values, or no argument is given, then a new main function is created by the decorator. This function has the signature ', ', and is intended to be called with arguments as if via ', '. The function has the attributes ', ' and ', ', which are the generated ', ' and the original main function that was decorated. This is to facilitate testing and library use of your main. Calling the function triggers a ', ' with the supplied arguments, and returns the result of the main function. Note that, while it returns instead of calling ', ', the ', ' function will raise a ', ' in the event of a parsing error or ', ' argument.', 'If the function is called with no arguments, ', ' is used. This is to allow the autocommand function to be used as a setuptools entry point.', 'There are a few possible exceptions that ', ' can raise. All of them derive from ', '.', 'There are a few argparse features that are not supported by autocommand.', 'Autocommand cannot be important from the project root; this is to enforce separation of concerns and prevent accidental importing of ', ' or tests. To develop, install the project in editable mode:', 'This will create a link to the source files in the deployment directory, so that any source changes are reflected when it is imported.', '\n      Autocommand turns a python function into a CLI program\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', '\n', ""If an invalid annotation is given (that is, it isn't a "", ', ', ', ', ', or ', ', an ', ' is raised. The ', ' may be any callable, as described in the ', '_ section.', 'If the function has a ', ' parameter, a ', ' is raised.', 'If, somehow, the function has a positional-only parameter, a ', "" is raised. This means that the argument doesn't have a name, which is currently not possible with a plain "", ' or ', ', though many built-in functions have this kind of parameter.', '\n', '\n', '\n', ""It isn't possible to have an optional positional argument (as opposed to a "", '). POSIX thinks this is bad form anyway.', ""It isn't possible to have mutually exclusive arguments or options"", ""It isn't possible to have subcommands or subparsers, though I'm working on a few solutions involving classes or nested function definitions to allow this."", '\n', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n        ', '\n    ', '\n        ', '\n    '])"
content
"(['Lucretiel/autocommand', 'Name already in use', 'autocommand'], ['\n        Autocommand turns a python function into a CLI program\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', '\n', 'A library to automatically generate and run simple argparse parsers from function signatures.', 'Autocommand is installed via pip:', ""Autocommand turns a function into a command-line program. It converts the function's parameter signature into command-line arguments, and automatically runs the function if the module was called as "", '. In effect, it lets your create a smart main function.', 'As you can see, autocommand converts the signature of the function into an argument spec. When you run the file as a program, autocommand collects the command-line arguments and turns them into function arguments. The function is executed with these arguments, and then the program exits with the return value of the function, via ', '. Autocommand also automatically creates a usage message, which can be invoked with ', ' or ', ', and automatically prints an error message when provided with invalid arguments.', 'You can use a type annotation to give an argument a type. Any type (or in fact any callable) that returns an object when given a string argument can be used, though there are a few special cases that are described later.', 'Autocommand will catch ', ' raised by the type during argument parsing, so you can supply a callable and do some basic argument validation as well.', 'You can add a ', ' parameter to your function to give it trailing arguments. The command will collect 0 or more trailing arguments and supply them to ', ' as a tuple. If a type annotation is supplied, the type is applied to each argument.', 'To create ', ' switches, just assign a default. Autocommand will automatically create ', ' and ', 'hort switches.', ""The option's type is automatically deduced from the default, unless one is explicitly given in an annotation:"", 'If an option is given a default value of ', ', it reads in a value as normal, but supplies ', "" if the option isn't provided."", 'If an argument is given a default value of ', ' or ', ', or\ngiven an explicit ', ' type, it becomes an option switch.', 'Autocommand attempts to do the ""correct thing"" in these cases- if the default is ', ', then supplying the switch makes the argument ', '; if the type is ', ' and the default is some other ', ' value, then supplying the switch makes the argument ', ', while not supplying the switch makes the argument the default value.', 'Autocommand also supports the creation of switch inverters. Pass ', ' to ', ' to enable this.', 'Using the ', ' version of a switch will pass the opposite value in as a function argument. If multiple switches are present, the last one takes precedence.', 'If the default value is a file object, such as ', "", then autocommand just looks for a string, for a file path. It doesn't do any special checking on the string, though (such as checking if the file exists); it's better to let the client decide how to handle errors in this case. Instead, it provides a special context manager called "", ', which behaves exactly like ', ' if a filename or other openable type is provided, but also lets you use already open files:', 'The ', ' decorator accepts ', ' and ', ' kwargs, corresponding to the ', '_ and ', '_ of the ', '. If no description is given, but the decorated function has a docstring, then it is taken as the ', ' for the ', '. You can also provide both the description and epilog in the docstring by splitting it into two sections with 4 or more - characters.', 'You can also attach description text to individual parameters in the annotation. To attach both a type and a description, supply them both in any order in a tuple', 'Autocommand automatically follows wrapper chains created by ', '. This means that you can apply other wrapping decorators to your main function, and autocommand will still correctly detect the signature.', 'Even though autocommand is being applied to the ', ' returned by ', ', it still retreives the signature of the underlying ', ' function to create the argument parsing.', ""While autocommand's automatic parser generator is a powerful convenience, it doesn't cover all of the different features that argparse provides. If you need these features, you can provide your own parser as a kwarg to "", ':', ""Any parser should work fine, so long as each of the parser's arguments has a corresponding parameter in the decorated main function. The order of parameters doesn't matter, as long as they are all present. Note that when using a custom parser, autocommand doesn't modify the parser or the retrieved arguments. This means that no description/epilog will be added, and the function's type annotations and defaults (if present) will be ignored."", 'The decorated function is only called and exited from if the first argument to ', ' is ', ' or ', '. If it is neither of these values, or no argument is given, then a new main function is created by the decorator. This function has the signature ', ', and is intended to be called with arguments as if via ', '. The function has the attributes ', ' and ', ', which are the generated ', ' and the original main function that was decorated. This is to facilitate testing and library use of your main. Calling the function triggers a ', ' with the supplied arguments, and returns the result of the main function. Note that, while it returns instead of calling ', ', the ', ' function will raise a ', ' in the event of a parsing error or ', ' argument.', 'If the function is called with no arguments, ', ' is used. This is to allow the autocommand function to be used as a setuptools entry point.', 'There are a few possible exceptions that ', ' can raise. All of them derive from ', '.', 'There are a few argparse features that are not supported by autocommand.', 'Autocommand cannot be important from the project root; this is to enforce separation of concerns and prevent accidental importing of ', ' or tests. To develop, install the project in editable mode:', 'This will create a link to the source files in the deployment directory, so that any source changes are reflected when it is imported.', '\n      Autocommand turns a python function into a CLI program\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', '\n', ""If an invalid annotation is given (that is, it isn't a "", ', ', ', ', ', or ', ', an ', ' is raised. The ', ' may be any callable, as described in the ', '_ section.', 'If the function has a ', ' parameter, a ', ' is raised.', 'If, somehow, the function has a positional-only parameter, a ', "" is raised. This means that the argument doesn't have a name, which is currently not possible with a plain "", ' or ', ', though many built-in functions have this kind of parameter.', '\n', '\n', '\n', ""It isn't possible to have an optional positional argument (as opposed to a "", '). POSIX thinks this is bad form anyway.', ""It isn't possible to have mutually exclusive arguments or options"", ""It isn't possible to have subcommands or subparsers, though I'm working on a few solutions involving classes or nested function definitions to allow this."", '\n', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n        ', '\n    ', '\n        ', '\n    '])"
