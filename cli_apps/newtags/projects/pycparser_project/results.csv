content
"(['eliben/pycparser', 'Name already in use', 'pycparser v2.21'], ['\n        ', ' Complete C99 parser in pure Python\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Contents', ' is a parser for the C language, written in pure Python. It is a\nmodule designed to be easily integrated into applications that need to parse\nC source code.', 'Anything that needs C code to be parsed. The following are some uses for\n', ', taken from real user reports:', 'One of the most popular uses of ', ' is in the ', ' library, which uses it to parse the\ndeclarations of C functions and types in order to auto-generate FFIs.', "" is unique in the sense that it's written in pure Python - a very\nhigh level language that's easy to experiment with and tweak. To people familiar\nwith Lex and Yacc, "", ""'s code will be simple to understand. It also\nhas no external dependencies (except for a Python interpreter), making it very\nsimple to install and deploy."", ' aims to support the full C99 language (according to the standard\nISO/IEC 9899). Some features from C11 are also supported, and patches to support\nmore are welcome.', "" supports very few GCC extensions, but it's fairly easy to set\nthings up so that it parses code with a lot of GCC-isms successfully. See the\n"", ' for more details.', ' very closely follows the C grammar provided in Annex A of the C99\nstandard (ISO/IEC 9899).', '.', 'For reporting problems with ', ' or submitting feature requests, please\nopen an ', ', or submit a\npull request.', 'Note that ', ' (and PLY) uses docstrings for grammar specifications.\nPython installations that strip docstrings (such as when using the Python\n', ' option) will fail to instantiate and use ', "". You can try to\nwork around this problem by making sure the PLY parsing tables are pre-generated\nin normal mode; this isn't an officially supported/tested mode of operation,\nthough."", 'The recommended way to install ', ' is with ', ':', 'In order to be compilable, C code must be preprocessed by the C preprocessor -\n', '. ', ' handles preprocessing directives like ', ' and\n', ', removes comments, and performs other minor tasks that prepare the C\ncode for compilation.', 'For all but the most trivial snippets of C code ', ', like a C\ncompiler, must receive preprocessed C code in order to function correctly. If\nyou import the top-level ', ' function from the ', ' package,\nit will interact with ', "" for you, as long as it's in your PATH, or you\nprovide a path to it."", 'Note also that you can use ', ' or ', ' instead of ', '. See\nthe ', ' example for more details. Windows users can download\nand install a binary build of Clang for Windows ', '.', 'C code almost always ', 's various header files from the standard C\nlibrary, like ', '. While (with some effort) ', ' can be made to\nparse the standard headers from any C compiler, it\'s much simpler to use the\nprovided ""fake"" standard includes for C11 in ', "". These\nare standard C header files that contain only the bare necessities to allow\nvalid parsing of the files that use them. As a bonus, since they're minimal, it\ncan significantly improve the performance of parsing large C files."", 'The key point to understand here is that ', "" doesn't really care about\nthe semantics of types. It only needs to know whether some token encountered in\nthe source is a previously defined type. This is essential in order to be able\nto parse C correctly."", 'See ', '\nfor more details.', 'Note that the fake headers are not included in the ', ' package nor installed\nvia ', ' (', ').', 'Take a look at the ', ' directory of the distribution for a few examples\nof using ', '. These should be enough to get you started. Please note\nthat most realistic C code samples would require running the C preprocessor\nbefore passing the code to ', '; see the previous sections for more\ndetails.', 'The public interface of ', ' is well documented with comments in\n', '. For a detailed overview of the various AST nodes\ncreated by the parser, see ', '.', ""There's also a "", '.\nIn any case, you can always drop me an ', ' for help.', 'There are a few points to keep in mind when modifying ', ':', 'Once you unzip the ', "" package, you'll see the following files and\ndirectories:"", 'Some people have contributed to ', "" by opening issues on bugs they've\nfound and/or submitting patches. The list of contributors is in the CONTRIBUTORS\nfile in the source distribution. After "", ' moved to Github I stopped\nupdating this list because Github does a much better job at tracking\ncontributions.', '\n      ', ' Complete C99 parser in pure Python\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', '\n', '\n', 'C code obfuscator', 'Front-end for various specialized C compilers', 'Static code checker', 'Automatic unit-test discovery', 'Adding specialized extensions to the C language', ' was tested with Python 3.7+ on Linux, Mac OS and Windows.', ' has no external dependencies. The only non-stdlib library it\nuses is PLY, which is bundled in ', '. The current PLY version is\n3.10, retrieved from ', 'The code for ', ""'s AST nodes is automatically generated from a\nconfiguration file - "", ', by ', '. If you modify the AST\nconfiguration, make sure to re-generate the code. This can be done by running\nthe ', ' script from the ', ' directory.', 'Make sure you understand the optimized mode of ', ' - for that you\nmust read the docstring in the constructor of the ', ' class. For\ndevelopment you should create the parser without optimizations, so that it\nwill regenerate the Yacc and Lex tables when you change the grammar.', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n      ', '\n    '])"
content
"(['eliben/pycparser', 'Name already in use', 'pycparser v2.21'], ['\n        ', ' Complete C99 parser in pure Python\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Contents', ' is a parser for the C language, written in pure Python. It is a\nmodule designed to be easily integrated into applications that need to parse\nC source code.', 'Anything that needs C code to be parsed. The following are some uses for\n', ', taken from real user reports:', 'One of the most popular uses of ', ' is in the ', ' library, which uses it to parse the\ndeclarations of C functions and types in order to auto-generate FFIs.', "" is unique in the sense that it's written in pure Python - a very\nhigh level language that's easy to experiment with and tweak. To people familiar\nwith Lex and Yacc, "", ""'s code will be simple to understand. It also\nhas no external dependencies (except for a Python interpreter), making it very\nsimple to install and deploy."", ' aims to support the full C99 language (according to the standard\nISO/IEC 9899). Some features from C11 are also supported, and patches to support\nmore are welcome.', "" supports very few GCC extensions, but it's fairly easy to set\nthings up so that it parses code with a lot of GCC-isms successfully. See the\n"", ' for more details.', ' very closely follows the C grammar provided in Annex A of the C99\nstandard (ISO/IEC 9899).', '.', 'For reporting problems with ', ' or submitting feature requests, please\nopen an ', ', or submit a\npull request.', 'Note that ', ' (and PLY) uses docstrings for grammar specifications.\nPython installations that strip docstrings (such as when using the Python\n', ' option) will fail to instantiate and use ', "". You can try to\nwork around this problem by making sure the PLY parsing tables are pre-generated\nin normal mode; this isn't an officially supported/tested mode of operation,\nthough."", 'The recommended way to install ', ' is with ', ':', 'In order to be compilable, C code must be preprocessed by the C preprocessor -\n', '. ', ' handles preprocessing directives like ', ' and\n', ', removes comments, and performs other minor tasks that prepare the C\ncode for compilation.', 'For all but the most trivial snippets of C code ', ', like a C\ncompiler, must receive preprocessed C code in order to function correctly. If\nyou import the top-level ', ' function from the ', ' package,\nit will interact with ', "" for you, as long as it's in your PATH, or you\nprovide a path to it."", 'Note also that you can use ', ' or ', ' instead of ', '. See\nthe ', ' example for more details. Windows users can download\nand install a binary build of Clang for Windows ', '.', 'C code almost always ', 's various header files from the standard C\nlibrary, like ', '. While (with some effort) ', ' can be made to\nparse the standard headers from any C compiler, it\'s much simpler to use the\nprovided ""fake"" standard includes for C11 in ', "". These\nare standard C header files that contain only the bare necessities to allow\nvalid parsing of the files that use them. As a bonus, since they're minimal, it\ncan significantly improve the performance of parsing large C files."", 'The key point to understand here is that ', "" doesn't really care about\nthe semantics of types. It only needs to know whether some token encountered in\nthe source is a previously defined type. This is essential in order to be able\nto parse C correctly."", 'See ', '\nfor more details.', 'Note that the fake headers are not included in the ', ' package nor installed\nvia ', ' (', ').', 'Take a look at the ', ' directory of the distribution for a few examples\nof using ', '. These should be enough to get you started. Please note\nthat most realistic C code samples would require running the C preprocessor\nbefore passing the code to ', '; see the previous sections for more\ndetails.', 'The public interface of ', ' is well documented with comments in\n', '. For a detailed overview of the various AST nodes\ncreated by the parser, see ', '.', ""There's also a "", '.\nIn any case, you can always drop me an ', ' for help.', 'There are a few points to keep in mind when modifying ', ':', 'Once you unzip the ', "" package, you'll see the following files and\ndirectories:"", 'Some people have contributed to ', "" by opening issues on bugs they've\nfound and/or submitting patches. The list of contributors is in the CONTRIBUTORS\nfile in the source distribution. After "", ' moved to Github I stopped\nupdating this list because Github does a much better job at tracking\ncontributions.', '\n      ', ' Complete C99 parser in pure Python\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', '\n', '\n', 'C code obfuscator', 'Front-end for various specialized C compilers', 'Static code checker', 'Automatic unit-test discovery', 'Adding specialized extensions to the C language', ' was tested with Python 3.7+ on Linux, Mac OS and Windows.', ' has no external dependencies. The only non-stdlib library it\nuses is PLY, which is bundled in ', '. The current PLY version is\n3.10, retrieved from ', 'The code for ', ""'s AST nodes is automatically generated from a\nconfiguration file - "", ', by ', '. If you modify the AST\nconfiguration, make sure to re-generate the code. This can be done by running\nthe ', ' script from the ', ' directory.', 'Make sure you understand the optimized mode of ', ' - for that you\nmust read the docstring in the constructor of the ', ' class. For\ndevelopment you should create the parser without optimizations, so that it\nwill regenerate the Yacc and Lex tables when you change the grammar.', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n      ', '\n    '])"
