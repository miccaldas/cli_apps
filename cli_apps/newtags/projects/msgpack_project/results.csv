content
"(['Sketch>Include Library>Add .zip library', 'Note that some reflection based serializer tests failed with AOT related limitation.', 'not', 'generic', 'all', 'compact', 'read or write exactly one data structure', 'reserved', 'Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License You may obtain a copy of the License at', 'Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.', 'unpacking', 'v5', 'A High Performance, Feature-Rich, Idiomatic encode/decode and rpc library', 'Maps must have ', ' keys.', 'any', 'Please, please, please', 'upgraded', 'Note that this is the second version of MessagePack for JavaScript. The first version, which was implemented in ES5 and was never released to npmjs.com, is tagged as ', '.', 'value', 'ref something', 'circular reference', 'void', 'msgpack', 'Initial work & Maintainer', 'Initial work', 'Check the ', ' section below on how to pack custom types.', 'The type detection mode (', '/', ') adds some overhead\nwhich can be noticed when you pack large (16- and 32-bit) arrays or strings.\nHowever, if you know the value type in advance (for example, you only work with\nUTF-8 strings or/and associative arrays), you can eliminate this overhead by\nforcing the packer to use the appropriate type, which will save it from running\nthe auto-detection routine. Another option is to explicitly specify the value\ntype. The library provides 2 auxiliary classes for this, ', ' and ', '.\nCheck the ', ' section below for details.', '1. The binary MessagePack format has unsigned 64-bit as its largest integer\ndata type, but PHP does not support such integers, which means that\nan overflow can occur during unpacking.', '2. Make sure the ', ' extension\nis enabled.', '3. Make sure the ', ' extension is enabled.', 'serialize', 'More type examples can be found in the ', ' directory.', 'serializing', 'More type transformer examples can be found in the ', ' directory.', 'serialization', 'deserialization', 'predefined', 'application-specific', 'More extension examples can be found in the ', ' directory.', 'To learn more about how extension types can be useful, check out this\n', '.', 'See a list of various images ', '.', 'With JIT:', 'see a ', ' of available targets', 'not set', 'see a ', ' of available tests', 'With JIT:', ""Note that the msgpack extension (v2.1.2) doesn't support "", ', ', ' and UTF-8 ', ' types.', '$enable', '$enable', '$enable', 'A flowchart describing the conversion of R objects into msgpack objects and back.', 'master', 'develop'], [""MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it's faster and smaller. Small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves."", 'MessagePack is supported by over 50 programming languages and environments.', 'See ', '.', 'Redis scripting has support for MessagePack because it is a fast and compact serialization format with a simple to implement specification. I liked it so much that I implemented a MessagePack C extension for Lua just to include it into Redis.', 'Salvatore Sanfilippo, creator of Redis', ""Fluentd uses MessagePack for all internal data representation. It's crazy fast because of zero-copy optimization of msgpack-ruby. Now MessagePack is an essential component of Fluentd to achieve high performance and flexibility at the same time."", 'Sadayuki Furuhashi, creator of Fluentd', 'Treasure Data built a multi-tenant database optimized for analytical queries using MessagePack. The schemaless database is growing by billions of records every month. We also use MessagePack as a glue between components. Actually we just wanted a fast replacement of JSON, and MessagePack is simply useful.', 'Kazuki Ohta, CTO', 'MessagePack has been simply invaluable to us. We use MessagePack + Memcache to cache many of our feeds on Pinterest. These feeds are compressed and very quick to unpack thanks to MessagePack while Memcache gives us fast atomic pushes.', 'Marty Weiner, Software Engineer', 'Also use MessagePack? ', 'as3-msgpack was designed to work with the interfaces IDataInput and IDataOutput, thus the API might be easily connected with the native classes that handle binary data (such as ByteArray, Socket, FileStream and URLStream).', '\nMoreover, as3-msgpack is capable of decoding data from binary streams.', '\nGet started: ', 'For downloads, source code and further information, check the project repository: ', '.', 'MessagePack implementation for Arduino (compatible with other C++ apps)', 'This library is only for serialize / deserialize.\nTo send / receive serialized data with ', ' class, please use ', '.', 'In msgpack, there are two collection types: ', ' and ', '.\nC++ containers will be converted to one of them but you can do that from individual parameters.\nTo ', ' / ', ' values as such collections in a simple way, please use these functions.', 'The same conversion can be achieved using ', ' and ', '.', 'Here, ', ' and ', ' are used to identify the size of ', ' and ', ' format in ', ' or ', '.\nThis way is expandable to ', ' and ', ' complex data structure because it can be nested.', 'To serialize / deserialize custom type you defined, please use ', ' macro inside of your class. This macro enables you to convert your custom class to ', ' format.', 'After that, you can ', ' your class completely same as other types.', 'You can also wrap your custom class to ', ' format by using ', ' macro.\nPlease note that you need ""key"" string for ', ' format.', 'Also you can use ', ' macro to pack values of base class.', 'If you wamt to use ', ' format in derived class, add ""key"" for your ', '.', 'You can nest custom classes to express complex data structure.', 'And you can ', ' / ', ' as same as other types.', 'In other languages like JavaScript, Python and etc. has also library for msgpack.\nBut some libraries can NOT convert msgpack in ""plain"" style.\nThey always wrap them into collections like ', ' or ', ' by default.\nFor example, you can\'t convert ""plain"" format in other languages.', 'It is because the msgpack is used as based on JSON (I think).\nSo you need to use ', ' format for JSON array, and ', ' for Json Object.\nTo achieve that, there are several ways.', 'You can directly save/load to/from JSON file with this library. ', ', ', ', ', ', ', ', etc. are available for the target file system. Please see ', ' example for more details.', 'In Arduino, you can use the MsgPack utility to save/load to/from EEPROM. Following code shows how to use them. Please see ', ' example for more details.', 'These are the lists of types which can be ', ' and ', '.\nYou can also ', ' or ', ' variable one by one.', 'There are some additional types are defined to express msgpack formats easily.', 'These types have type aliases like this:', 'For general C++ apps (not Arduino), ', ' is defined as:', ' is used to ', ' and ', ' Nil type.\nThis object is just a dummy and do nothing.', ' holds binary data of Ext type.', ' is used to ', ' and ', ' Timestamp type.', 'Error information report is disabled by default. You can enable it by defining this macro.', 'Also you can change debug info stream by calling this macro (default: ', ').', 'See ', ' for details.', 'STL is used to handle packet data by default, but for following boards/architectures, ', ' is used to store the packet data because STL can not be used for such boards.\nThe storage size of such boards for max packet binary size and number of msgpack objects are limited.', 'As mentioned above, for such boards like Arduino Uno, the storage sizes are limited.\nAnd of course you can manage them by defining following macros.\nBut these default values are optimized for such boards, please be careful not to excess your boards storage/memory.', 'These macros have no effect for STL enabled boards.', 'In addtion for such boards, type aliases for following types are different from others.', 'Please see ""Memory Management"" section and ', ' for detail.', 'For such boards, there are several STL libraries, like ', ', ', ', and so on.\nBut such libraries are mainly based on ', "" and it has many lack of function.\nI considered to support them but I won't support them unless uClibc++ becomes much better compatibility to standard C++ library.\nI reccomend to use low cost but much better performance chip like ESP series."", 'MIT', 'This Arduino library provides a light weight serializer and parser for messagepack.', 'Download the zip, and import it with your Arduino IDE: ', 'See the either the ', ' file, or the examples (', ' and ', ').', 'In short:', 'Notes:', 'Currently the library does ', ' support:', ' ', 'CMP is a C implementation of the MessagePack serialization format.  It\ncurrently implements version 5 of the ', '.', ""CMP's goal is to be lightweight and straightforward, forcing nothing on the\nprogrammer."", ""While I'm a big believer in the GPL, I license CMP under the MIT license."", 'The following examples use a file as the backend, and are modeled after the\nexamples included with the msgpack-c project.', 'See the ', ' folder.', 'CMP uses no internal buffers; conversions, encoding and decoding are done on\nthe fly.', ""CMP's source and header file together are ~4k LOC."", 'CMP makes no heap allocations.', 'CMP uses standardized types rather than declaring its own, and it depends only\non ', ', ', ' and ', '.', 'CMP is written using C89 (ANSI C), aside, of course, from its use of\nfixed-width integer types and ', '.', ""On the other hand, CMP's test suite requires C99."", 'CMP only requires the programmer supply a read function, a write function, and\nan optional skip function.  In this way, the programmer can use CMP on memory,\nfiles, sockets, etc.', 'CMP is portable.  It uses fixed-width integer types, and checks the endianness\nof the machine at runtime before swapping bytes (MessagePack is big-endian).', 'CMP provides a fairly comprehensive error reporting mechanism modeled after\n', ' and ', '.', 'CMP is thread aware; while contexts cannot be shared between threads, each\nthread may use its own context freely.', 'CMP is tested using the MessagePack test suite as well as a large set of custom\ntest cases.  Its small test program is compiled with clang using ', ' along with several other flags, and generates no compilation\nerrors in either clang or GCC.', ""CMP's source is written as readably as possible, using explicit, descriptive\nvariable names and a consistent, clear style."", ""CMP's source is written to be as secure as possible.  Its testing suite checks\nfor invalid values, and data is always treated as suspect before it passes\nvalidation."", ""CMP's API is designed to be clear, convenient and unsurprising.  Strings are\nnull-terminated, binary data is not, error codes are clear, and so on."", 'CMP provides optional backwards compatibility for use with other MessagePack\nimplementations that only implement version 4 of the spec.', 'There is no build system for CMP.  The programmer can drop ', ' and ', '\nin their source tree and modify as necessary.  No special compiler settings are\nrequired to build it, and it generates no compilation errors in either clang or\ngcc.', ""CMP's versions are single integers.  I don't use semantic versioning because\nI don't guarantee that any version is completely compatible with any other.  In\ngeneral, semantic versioning provides a false sense of security.  You should be\nevaluating compatibility yourself, not relying on some stranger's versioning\nconvention."", 'I only guarantee stability for versions released on\n', '.  While rare, both ', ' and ', '\nbranches may have errors or mismatched versions.', 'Version 4 of the MessagePack spec has no ', ' type, and provides no ', '\nmarker.  In order to remain backwards compatible with version 4 of MessagePack,\ndo the following:', 'Avoid these functions:', 'Use these functions in lieu of their v5 counterparts:', 'Thanks to ', "" it's possible to disable\nfloating point operations in CMP by defining "", '. No floating point\nfunctionality will be included.  Fair warning: this changes the ABI.', 'CMP will honor ', '. If defined to ', ' it will convert data\nto/from little-endian format when writing/reading. If defined to ', "" it won't.\nIf not defined, CMP will check at runtime."", 'MPack is a C implementation of an encoder and decoder for the ', ' serialization format. It is:', 'The core of MPack contains a buffered reader and writer, and a tree-style parser that decodes into a tree of dynamically typed nodes. Helper functions can be enabled to read values of expected type, to work with files, to grow buffers or allocate strings automatically, to check UTF-8 encoding, and more.', 'The MPack code is small enough to be embedded directly into your codebase. Simply download the ', ' and add ', ' and ', ' to your project.', 'MPack supports all modern compilers, all desktop and smartphone OSes, WebAssembly, ', ', and even 8-bit microcontrollers such as Arduino. The MPack featureset can be customized at compile-time to set which features, components and debug checks are compiled, and what dependencies are available.', '\n', 'The Node API parses a chunk of MessagePack data into an immutable tree of dynamically-typed nodes. A series of helper functions can be used to extract data of specific types from each node.', 'Note that no additional error handling is needed in the above code. If the file is missing or corrupt, if map keys are missing or if nodes are not in the expected types, special ""nil"" nodes and false/zero values are returned and the tree is placed in an error state. An error check is only needed before using the data.', 'The above example allocates nodes automatically. A fixed node pool can be provided to the parser instead in memory-constrained environments. For maximum performance and minimal memory usage, the ', ' can be used to parse data of a predefined schema.', 'The Write API encodes structured data to MessagePack.', 'In the above example, we encode to a growable memory buffer. The writer can instead write to a pre-allocated or stack-allocated buffer (with up-front sizes for compound types), avoiding the need for memory allocation. The writer can also be provided with a flush function (such as a file or socket write function) to call when the buffer is full or when writing is done.', ""If any error occurs, the writer is placed in an error state. The writer will flag an error if too much data is written, if the wrong number of elements are written, if an allocation failure occurs, if the data could not be flushed, etc. No additional error handling is needed in the above code; any subsequent writes are ignored when the writer is in an error state, so you don't need to check every write for errors."", 'The above example uses ', ' to automatically determine the number of key-value pairs contained. If you know up-front the number of elements needed, you can pass it to ', ' instead. In that case the corresponding ', ' will assert in debug mode that the expected number of elements were actually written, which is something that other MessagePack C/C++ libraries may not do.', ""MPack is rich in features while maintaining very high performance and a small code footprint. Here's a short feature table comparing it to other C parsers:"", 'A larger feature comparison table is available ', ' which includes descriptions of the various entries in the table.', ' compares the performance of MPack to other implementations of schemaless serialization formats. MPack outperforms all JSON and MessagePack libraries (except ', '), and in some tests MPack is several times faster than ', ' for equivalent data.', 'Conceptually, MessagePack stores data similarly to JSON: they are both composed of simple values such as numbers and strings, stored hierarchically in maps and arrays. So why not just use JSON instead? The main reason is that JSON is designed to be human-readable, so it is not as efficient as a binary serialization format:', 'Compound types such as strings, maps and arrays are delimited, so appropriate storage cannot be allocated upfront. The whole object must be parsed to determine its size.', 'Strings are not stored in their native encoding. Special characters such as quotes and backslashes must be escaped when written and converted back when read.', 'Numbers are particularly inefficient (especially when parsing back floats), making JSON inappropriate as a base format for structured data that contains lots of numbers.', 'Binary data is not supported by JSON at all. Small binary blobs such as icons and thumbnails need to be Base64 encoded or passed out-of-band.', 'The above issues greatly increase the complexity of the decoder. Full-featured JSON decoders are quite large, and minimal decoders tend to leave out such features as string unescaping and float parsing, instead leaving these up to the user or platform. This can lead to hard-to-find platform-specific and locale-specific bugs, as well as a greater potential for security vulnerabilites. This also significantly decreases performance, making JSON unattractive for use in applications such as mobile games.', 'While the space inefficiencies of JSON can be partially mitigated through minification and compression, the performance inefficiencies cannot. More importantly, if you are minifying and compressing the data, then why use a human-readable format in the first place?', 'The MPack build process does not build MPack into a library; it is used to build and run the unit tests. You do not need to build MPack or the unit testing suite to use MPack.', 'See ', ' for information on how to test MPack.', 'CWPack is a lightweight and yet complete implementation of the\n', ' serialization format\n', '.\nIt also supports the Timestamp extension type.', 'Together with ', ', CWPack is the fastest open-source messagepack implementation. Both totally outperform\n', ' and ', 'CWPack does no memory allocations and no file handling in its basic setup. All that is done outside of CWPack. Example extensions are included.', 'CWPack is working against memory buffers. User defined handlers are called when buffers are filled up (packing) or needs refill (unpack).', 'Containers (arrays, maps) are read/written in parts, first the item containing the size and then the contained items one by one. Exception to this is the ', ' function which skip whole containers.', 'Pack and unpack example from the MessagePack home page:', 'In the examples folder there are more examples.', 'CWPack may be run in compatibility mode. It affects only packing; EXT & TIMESTAMP is considered illegal, BIN are transformed to STR and generation of STR8 is supressed.', 'When an error is detected in a context, the context is stopped and all future calls to that context are immediatly returned without any actions. Thus it is possible to make some calls and delay error checking until all calls are done.', 'CWPack does not check for illegal values (e.g. in STR for illegal unicode characters).', 'CWPack consists of a single src file and three header files. It is written in strict ansi C and the files are together ~ 1.4K lines. No separate build is neccesary, just include the files in your own build.', 'CWPack has no dependencies to other libraries.', 'Included in the test folder are a module test and a performance test and shell scripts to run them.', 'CWPack also contains an Objective-C interface. The MessagePack home page example would look like:', 'CWPack also contains a Swift interface. The MessagePack home page example would pack like:', 'This is MessagePack serialization/deserialization for CLI (Common Language Infrastructure) implementations such as .NET Framework, Silverlight, Mono (including Moonlight.)\nThis library can be used from ALL CLS compliant languages such as C#, F#, Visual Basic, Iron Python, Iron Ruby, PowerShell, C++/CLI or so.', 'You can serialize/deserialize objects as following:', '\nIf you do not pre-generated serializers, MsgPack for CLI uses reflection in AOT environments, it is slower and it sometimes causes AOT related error (', ' for runtime JIT compilation). ', ' See ', ' for details.', 'See ', 'Install Visual Studio 2017 (Community edition is OK) and 2015 (for MsgPack.Windows.sln).', 'Install latest .NET Core SDK.', 'Run with Visual Studio Developer Command Prompt:', 'msbuild MsgPack.sln /t:Restore\nmsbuild MsgPack.sln', 'Or (for Unity 3D drops):', 'Or (for Windows Runtime/Phone drops and Silverlight 5 drops):', 'Or (for Xamarin unit testing, you must have Xamarin Business or upper license and Mac machine on the LAN to build on Windows):', 'Or open one of above solution files in your IDE and run build command in it.', 'First of all, there are binary drops on github release page, you should use it to save your time.', '\nBecause we will not guarantee source code organization compatibilities, we might add/remove non-public types or members, which should break source code build.', '\nIf you want to import sources, you must include just only described on MsgPack.Unity3D.csproj.', '\nIf you want to use "".NET 2.0 Subset"" settings, you must use just only described on MsgPack.Unity3D.CorLibOnly.csproj file, and define ', ' compiler constants.', 'If you run on Windows, it is recommended to use HXM instead of Hyper-V based emulator.', '\nYou can disable Hyper-V from priviledged (administrator) powershell as follows:', 'If you want to use Hyper-V again (such as for Docker for Windows etc.), you can do it by following in priviledged (administrator) powershell:', 'You must create provisoning profiles in your MacOS devices.', '\nSee ', ' for details.', 'There are bundle IDs of current iOS tests:', 'See ', 'This solution contains Silverlight5 and (old) UWP project for backward compability. They are required Visual Studio 2015 to build and test.', '\nYou can download Visual Studio 2015 community edition from ', '.', 'MessagePack implementation for C# / msgpack.org[C#]', 'Binary files distributed via the NuGet package ', '.', ""It's like JSON but small and fast."", '.NET Framework 4.x', 'This library is a lightweight implementation of the ', ' binary serialization format. MessagePack is a 1-to-1 binary representation of JSON, and the official specification can be found here: ', '.', ' (', ')', 'MPack is available as a NuGet package!', 'Create a object model that can be represented as MsgPack. Here we are creating a dictionary, but really it can be anything:', 'Serialize the data to a byte array or to a stream to be saved, transmitted, etc:', 'Parse the binary data back into a MPack object model (you can also cast back to an MPackMap or MPackArray after reading if you want dictionary/array methods):', 'Turn MPack objects back into types that we understand with the generic ', ' method. Since we know the types of everything here we can just call ', "" to reconstruct our bool, but if you don't know you can access the instance enum "", ' to know what kind of value it is:', 'The following people/projects have made this possible:', 'MsgPack debugging and validation tool also usable as Fiddler plugin', 'More info about this application (and screenshots) can be found at:\n', 'Although the original was optimised for debugging and analysing, a lightweight version of the lib is included which does not keep track of all offsets and other overhead needed for debugging. It can be used in your code.', 'Add LsMsgPackL.dll as a reference.', 'I have never run any benchmarks so I have no idea how it will perform against other implementations.', 'In order to use this tool as a Fiddler plugin, copy the following files to the Fiddler Inspectors directory (usually C:\\Program Files\\Fiddler2\\Inspectors):', 'Restart fiddler and you should see a MsgPack option in the Inspectors list.', 'This module contains the ""parser"" and generator of MsgPack Packages. It breaks down the binary file into a hirarchical structure, keeping track of offsets and errors. And it can also be used to generate MsgPack files.', 'The main winforms executable, containing a MsgPackExplorer UserControl (so it can easily be integrated into other tools such as Fiddler).', 'A tiny wrapper enabling the use of MsgPack Explorer as a Fiddler Inspector.', ""Some unit tests on the core LsMsgPack.dll. No full coverage yet, but at least it's a start."", 'A light version of the ""parser"". The parsing and generating methods are almost identical to the LsMsgPack lib, but with allot of overhead removed that comes with keeping track of offsets, original types and other debugging info. I\'m planning to use this version in my projects that use the MsgPack format.\nThe LightUnitTests are the same as LsMsgPackUnitTests with some tests omitted.', '\n', '\n', '\n', 'The extremely fast ', ' serializer for C#.\nIt is 10x faster than ', ' and outperforms other C# serializers. MessagePack for C# also ships with built-in support for LZ4 compression - an extremely fast compression algorithm. Performance is important, particularly in applications like games, distributed computing, microservices, or data caches.', 'MessagePack has a compact binary size and a full set of general purpose expressive data types. Please have a look at the ', ' and learn ', '.', 'This library is distributed via NuGet. Special ', ' is available, too.', 'We target .NET Standard 2.0 with special optimizations for .NET Core 2.1+, making it compatible with most reasonably recent .NET runtimes such as Core 2.0 and later, Framework 4.6.1 and later, Mono 5.4 and later and Unity 2018.3 and later.\nThe library code is pure C# (with Just-In-Time IL code generation on some platforms).', 'To install with NuGet, just install the ', ' package:', 'Install the optional C# ', ' package to get warnings about coding mistakes and automatic fix suggestions to save you time:', 'There are also a range of official and third party Extension Packages available (learn more in our ', '):', 'For Unity projects, the ', ' page provides downloadable ', ' files. When using in Unity IL2CPP or Xamarin AOT environments, please carefully read the ', '.', 'If you were using MessagePack for C# v1.x, check out the ', ' document.', 'Define the struct or class to be serialized and annotate it with a ', ' attribute.\nAnnotate members whose values should be serialized (fields as well as properties) with ', ' attributes.', 'Call ', ' to serialize/deserialize your object instance.\nYou can use the ', ' method to get a human readable representation of any MessagePack binary blob.', 'By default, a ', ' annotation is required. This can be made optional; see the ', ' and the ', ' for details.', 'The MessagePackAnalyzer package aids with:', 'If you want to allow a specific custom type (for example, when registering a custom type), put ', ' at the project root and change the Build Action to ', '.', 'An example ', ':', 'These types can serialize by default:', 'You can add support for custom types, and there are some official/third-party extension packages for:', 'Please see the ', '.', ' is the built-in type representing null/void in MessagePack for C#.', 'MessagePack for C# can serialize your own public ', ' or ', ' types. By default, serializable types must be annotated with the ', ' attribute and members with the ', ' attribute. Keys can be either indexes (', ') or arbitrary strings. If all keys are indexes, arrays are used for serialization, which offers advantages in performance and binary size. Otherwise, MessagePack maps (dictionaries) will be used.', 'If you use ', ', then members do not require explicit ', ' attributes, but string keys will be used.', 'All public instance members (fields as well as properties) will be serialized. If you want to ignore certain public members, annotate the member with a ', ' attribute.', 'Please note that any serializable struct or class must have public accessibility; private and internal structs and classes cannot be serialized!\nThe default of requiring ', ' annotations is meant to enforce explicitness and therefore may help write more robust code.', 'Should you use an indexed (', ') key or a string key?\nWe recommend using indexed keys for faster serialization and a more compact binary representation than string keys.\nHowever, the additional information in the strings of string keys can be quite useful when debugging.', 'When classes change or are extended, be careful about versioning. ', ' will initialize members to their ', ' value if a key does not exist in the serialized binary blob, meaning members using reference types can be initialized to ', '.\nIf you use indexed (', ') keys, the keys should start at 0 and should be sequential. If a later version stops using certain members, you should keep the obsolete members (C# provides an ', ' attribute to annotate such members) until all other clients had a chance to update and remove their uses of these members as well. Also, when the values of indexed keys ""jump"" a lot, leaving gaps in the sequence, it will negatively affect the binary size, as ', "" placeholders will be inserted into the resulting arrays. However, you shouldn't reuse indexes of removed members to avoid compatibility issues between clients or when trying to deserialize legacy blobs."", 'Example of index gaps and resulting placeholders:', 'If you do not want to explicitly annotate with the ', '/', ' attributes and instead want to use MessagePack for C# more like e.g. ', ', you can make use of the contractless resolver.', 'If you want to serialize private members as well, you can use one of the ', ' resolvers.', 'If you want to use MessagePack for C# more like a BinaryFormatter with a typeless serialization API, use the typeless resolver and helpers. Please consult the ', '.', 'Resolvers are the way to add specialized support for custom types to MessagePack for C#. Please refer to the ', '.', 'You can use ', ' annotations instead of ', ' ones. If type is annotated with ', ', you can use ', ' annotations instead of ', ' ones and ', ' instead of ', '.', 'Then ', ' will behave the same as ', ', ', ' the same as ', ', and ', ' the same as ', '.', 'Using ', ', e.g. in shared libraries, makes your classes/structs independent from MessagePack for C# serialization. However, it is not supported by the analyzers nor in code generation by the ', ' tool. Also, features like ', ', ', ', ', ', etc can not be used. Due to this, we recommend that you use the specific MessagePack for C# annotations when possible.', 'MessagePack for C# supports serialization of readonly/immutable objects/members. For example, this struct can be serialized and deserialized.', ' will choose the constructor with the best matched argument list, using argument indexes index for index keys, or parameter names for string keys. If it cannot determine an appropriate constructor, a ', ' exception will be thrown.\nYou can specify which constructor to use manually with a ', ' annotation.', 'C# 9.0 record with primary constructor is similar immutable object, also supports serialize/deserialize.', 'When using ', ' property setters in ', ' classes, ', ' prevents our most efficient code generation from invoking the property setter.\nAs a result, you should avoid using ', ' on property setters in generic classes when using the public-only ', '/', '.', 'When using the ', '/', ' resolver the bug does not apply and you may use ', ' without restriction.', 'Objects implementing the ', ' interface will received ', ' and ', ' calls during serialization/deserialization.', 'MessagePack for C# supports serializing interface-typed and abstract class-typed objects. It behaves like ', ' or ', '. In MessagePack for C# these are called ', '. Only interfaces and abstracts classes are allowed to be annotated with ', ' attributes. Unique union keys are required.', 'Unions are internally serialized to two-element arrays.', 'Using ', ' with abstract classes works the same way.', 'Please be mindful that you cannot reuse the same keys in derived types that are already present in the parent type, as internally a single flat array or map will be used and thus cannot have duplicate indexes/keys.', 'When calling ', ' or ', ', any values present in the blob will be converted to primitive values, i.e. ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', '.', 'Exploring object trees using the dictionary indexer syntax is the fastest option for untyped deserialization, but it is tedious to read and write.\nWhere performance is not as important as code readability, consider deserializing with ', '.', ' and ', ' can serialize ', '/anonymous typed objects.', 'Unity supports is limited.', 'When deserializing, the behavior will be the same as Dynamic (Untyped) Deserialization.', 'The typeless API is similar to ', ', as it will embed type information into the blobs, so no types need to be specified explicitly when calling the API.', 'Type information is represented by the MessagePack ', ' format, type code ', '.', ' is a shortcut of ', '.\nIf you want to configure it as the default resolver, you can use ', '.', ' can used standalone or combined with other resolvers.', ""If a type's name is changed later, you can no longer deserialize old blobs. But you can specify a fallback name in such cases, providing a "", ' function of your own.', 'Deserializing data from an untrusted source can introduce security vulnerabilities in your application.\nDepending on the settings used during deserialization, ', ' or cause a denial of service attack.\nUntrusted data might come from over the network from an untrusted source (e.g. any and every networked client) or can be tampered with by an intermediary when transmitted over an unauthenticated connection, or from a local storage that might have been tampered with, or many other sources. MessagePack for C# does not provide any means to authenticate data or make it tamper-resistant. Please use an appropriate method of authenticating data before deserialization - such as a ', ' .', 'Please be very mindful of these attack scenarios; many projects and companies, and serialization library users in general, have been bitten by untrusted user data deserialization in the past.', 'When deserializing untrusted data, put MessagePack into a more secure mode by configuring your ', ' property:', 'You should also avoid the Typeless serializer/formatters/resolvers for untrusted data as that opens the door for the untrusted data to potentially deserialize unanticipated types that can compromise security.', 'The ', ' mode merely hardens against some common attacks, but is no fully secure solution in itself.', 'Benchmarks comparing MessagePack For C# to other serializers were run on ', '. Benchmark code is ', ' - and their ', '.\n', ' and ', ' have infinitely fast deserializers, so ignore their deserialization performance.', 'MessagePack for C# uses many techniques to improve performance.', 'Before creating this library, I implemented a fast serializer with ', '. This is a further evolved implementation. MessagePack for C# is always fast and optimized for all types (primitive, small struct, large object, any collections).', 'Performance varies depending on the options used. This is a micro benchmark with ', '. The target object has 9 members (', ' ~ ', '), values are zero.', ', ', ', ', ', ', ' are MessagePack for C# options. All MessagePack for C# options achieve zero memory allocations in the deserialization process. ', '/', ' is deserialized from strings. ', '/', ' is deserialized from UTF-8 byte arrays using ', '. Deserialization is normally read from Stream. Thus, it will be restored from byte arrays (or Stream) instead of strings.', 'MessagePack for C# ', ' is the fastest. ', ' is slower than ', ' because matching the character string of property names is required. ', ' works by reading the array length, then ', '. ', ' works by reading map length, ', ', so it requires an additional two steps (decoding of keys and lookups of keys).', 'String key is often a useful, contractless, simple replacement of JSON, interoperability with other languages, and more robust versioning. MessagePack for C# is also optimized for string keys as much a possible. First of all, it does not decode UTF-8 byte arrays to full string for matching with the member name; instead it will look up the byte arrays as it is (to avoid decoding costs and extra memory allocations).', 'And It will try to match each ', ' (per 8 character, if it is not enough, pad with 0) using ', ' and inline it when generating IL code.', 'This also avoids calculating the hash code of byte arrays, and the comparison can be made several times faster using the long type.', 'This is the sample of decompiled generated deserializer code, decompiled using ', '.', 'If the number of nodes is large, searches will use an embedded binary search.', 'Extra note, this is serialization benchmark result.', 'Of course, ', ' is fastest but ', ' also performs reasonably well.', 'The msgpack format does not provide for reusing strings in the data stream.\nThis naturally leads the deserializer to create a new ', ' object for every string encountered,\neven if it is equal to another string previously encountered.', 'When deserializing data that may contain the same strings repeatedly it can be worthwhile\nto have the deserializer take a little extra time to check whether it has seen a given string before\nand reuse it if it has.', 'To enable string interning on ', ' string values, use a resolver that specifies ', '\nbefore any of the standard ones, like this:', 'If you know which fields of a particular type are likely to contain duplicate strings,\nyou can apply the string interning formatter to just those fields so the deserializer only pays\nfor the interned string check where it matters most.\nNote that this technique requires a ', ' or ', ' class.', 'If you are writing your own formatter for some type that contains strings,\nyou can call on the ', ' directly from your formatter as well for the strings.', 'MessagePack is a fast and ', ' format but it is not compression. ', ' is an extremely fast compression algorithm, and using it MessagePack for C# can achieve extremely fast performance as well as extremely compact binary sizes!', 'MessagePack for C# has built-in LZ4 support. You can activate it using a modified options object and passing it into an API like this:', ' has two modes, ', ' and ', '. Neither is a simple binary LZ4 compression, but a special compression integrated into the serialization pipeline, using MessagePack ', ' code (', ' or ', '). Therefore, it is not readily compatible with compression offered in other languages.', ' compresses an entire MessagePack sequence as a single LZ4 block. This is the simple compression that achieves best compression ratio, at the cost of copying the entire sequence when necessary to get contiguous memory.', "" compresses an entire MessagePack sequence as a array of LZ4 blocks. Compressed/decompressed blocks are  chunked and thus do not enter the GC's Large-Object-Heap, but the compression ratio is slightly worse."", 'We recommend to use ', ' as the default when using compression.\nFor compatibility with MessagePack v1.x, use ', '.', 'Regardless of which LZ4 option is set at the deserialization, both methods can be deserialized. For example, when the ', ' option was used, binary data using either ', ' and ', ' can be deserialized. Neither can be decompressed and hence deserialized when the compression option is set to ', '.', ""LZ4 compression support is using Milosz Krajewski's "", ' code with some modifications.', ' is major, widely used binary-format library on .NET. I love protobuf-net and respect their great work. But when you use protobuf-net as a general purpose serialization format, you may encounter an annoying issue.', 'protobuf(-net) cannot handle null and empty collection correctly, because protobuf has no ', ' representation (see ', ').', ' can correctly serialize the entire C# type system. This is a strong reason to recommend MessagePack over protobuf.', 'Protocol Buffers have good IDL and ', ' support. If you want to use IDL, I recommend ', ' over MessagePack.', 'JSON is good general-purpose format. It is simple, human-readable and thoroughly-enough specified. ', ' - which I created as well - adopts same architecture as MessagePack for C# and avoids encoding/decoding costs as much as possible just like this library does. If you want to know more about binary vs text formats, see ', '.', ' is similar as ', "" but specialized to C#, and special in that regard. Deserialization is infinitely fast but the produced binary size is larger. And ZeroFormatter's caching algorithm requires additional memory."", 'For many common uses, MessagePack for C# would be a better fit.', 'MessagePack for C# prioritizes maximum performance by default. However, there are also some options that sacrifice performance for convenience.', 'The ', ' section shows the results of indexed keys (', ') vs string keys (', ') performance. Indexed keys serialize the object graph as a MessagePack array. String keys serializes the object graph as a MessagePack map.', 'For example this type is serialized to', ' is always fast in both serialization and deserialization because it does not have to handle and lookup key names, and always has the smaller binary size.', ' is often a useful, contractless, simple replacement for JSON, interoperability with other languages with MessagePack support, and less error prone versioning. But to achieve maximum performance, use ', '.', ' is an easy way to create composite resolvers. But formatter lookups have some overhead. If you create a custom resolver (or use ', '), you can avoid this overhead.', 'NOTE: If you are creating a library, recommend using the above custom resolver instead of ', '. Also, libraries must not use ', ' - as it is global state - to avoid compatibility issues.', ""By default, MessagePack for C# serializes GUID as string. This is much slower than the native .NET format GUID. The same applies to Decimal. If your application makes heavy use of GUID or Decimal and you don't have to worry about interoperability with other languages, you can replace them with the native serializers "", ' and ', ' respectively.', 'Also, ', ' is serialized using the MessagePack timestamp format. By using the ', ', it is possible to maintain Kind and perform faster serialization.', ' returns ', ' in default. The final ', ' is copied from an internal buffer pool. That is an extra cost.  You can use ', ' or the ', ' API to write to buffers directly. If you want to use a buffer pool outside of the serializer, you should implement custom ', ' or use an existing one such as ', ' from the ', ' package.', 'During deserialization, ', ' is better than the ', ' overload. This is because the Stream API version starts by reading the data, generating a ', ', and only then starts the deserialization.', 'Compression is generally effective when there is duplicate data. In MessagePack, arrays containing objects using string keys (Contractless) can be compressed efficiently because compression can be applied to many duplicate property names. Indexed keys compression is not as effectively compressed as string keys, but indexed keys are smaller in the first place.', 'This is some example benchmark performance data;', ' is not as effectively compressed, but performance is still somewhat degraded. On the other hand, ', ' can be expected to have a sufficient effect on the binary size. However, this is just an example. Compression can be quite effective depending on the data, too, or have little effect other than slowing down your program. There are also cases in which well-compressible data exists in the values (such as long strings, e.g. containing HTML data with many repeated HTML tags). It is important to verify the actual effects of compression on a case by case basis.', 'MessagePack for C# has extension points that enable you to provide optimal serialization support for custom types. There are official extension support packages.', 'The ', ' package adds support for types of the ', ' library. It adds ', ', ', ', ', ', ', ', ', ' serialization support. It is useful for save viewmodel state.', 'The ', ' package provides shims for ', ""'s standard structs ("", ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ') and corresponding formatters. It can enable proper communication between servers and Unity clients.', 'After installation, extension packages must be enabled, by creating composite resolvers. Here is an example showing how to enable all extensions.', 'For configuration details, see: ', '.', 'The ', ' is add-on for ', ""'s serialization to boost up performance. This is configuration sample."", 'Other authors are creating extension packages, too.', ""You can make your own extension serializers or integrate with frameworks. Let's create and share!"", 'MessagePack for C# has experimental features which provides you with very performant formatters. There is an official package.', 'For detailed information, see: ', 'The ', ' class is the entry point of MessagePack for C#. Static methods make up the main API of MessagePack for C#.', 'The ', ' class offers most of the same APIs as above, but removes all type arguments from the API, forcing serialization to include the full type name of the root object. It uses the ', "". Consider the result to be a .NET-specific MessagePack binary that isn't readily compatible with MessagePack deserializers in other runtimes."", 'MessagePack for C# fundamentally serializes using ', ' and deserializes using ', ' or ', '. Method overloads are provided to conveniently use it with common buffer types and the .NET ', ' class, but some of these convenience overloads require copying buffers once and therefore have a certain overhead.', 'The high-level API uses a memory pool internally to avoid unnecessary memory allocation. If result size is under 64K, it allocates GC memory only for the return bytes.', 'Each serialize/deserialize method takes an optional ', ' parameter which can be used to specify a custom ', ' to use or to activate LZ4 compression support.', 'To deserialize a ', ' that contains multiple consecutive MessagePack data structures,\nyou can use the ', ' class to efficiently identify the ', '\nfor each data structure and deserialize it. For example:', 'The ', ' interface is responsible for serializing a unique type. For example ', ' represents Int32 MessagePack serializer.', 'Many built-in formatters exists under ', '. Your custom types are usually automatically supported with the built-in type resolvers that generate new ', ' types on-the-fly using dynamic code generation. See our ', ' support for platforms that do not support this.', 'However, some types - especially those provided by third party libraries or the runtime itself - cannot be appropriately annotated, and contractless serialization would produce inefficient or even wrong results.\nTo take more control over the serialization of such custom types, write your own ', ' implementation.\nHere is an example of such a custom formatter implementation. Note its use of the primitive API that is described in the next section.', 'The ', ' and ', ' statements provide a level of security while deserializing untrusted data\nthat might otherwise be able to execute a denial of service attack by sending MessagePack data that would\ndeserialize into a very deep object graph leading to a ', ' that would crash the process.\nThis pair of statements should surround the bulk of any ', ' method.', ': A message pack formatter must ', '.\nIn the above example we just read/write a string. If you have more than one element to write out,\nyou must precede it with a map or array header. You must read the entire map/array when deserializing.\nFor example:', 'Your custom formatters must be discoverable via some ', '. Learn more in our ', ' section.', 'You can see many other samples from ', '.', 'The ', ' and ', ' structs make up the lowest-level API. They read and write the primitives types defined in the MessagePack specification.', 'A ', ' can efficiently read from ', ' or ', ' without any allocations, except to allocate a new ', ' as required by the ', ' method. All other methods return either value structs or ', ' slices for extensions/arrays.\nReading directly from ', ' means the reader can directly consume some modern high performance APIs such as ', '.', 'The ', ' is capable of automatically interpreting both the old and new MessagePack spec.', 'A ', ' writes to a given instance of ', '. Several common implementations of this exist, allowing zero allocations and minimal buffer copies while writing directly to several I/O APIs including ', '.', 'The ', ' writes the new MessagePack spec by default, but can write MessagePack compatible with the old spec by setting the ', ' property to ', '.', ' is serialized to ', ', it serialize/deserialize UTC and loses ', ' info and requires that ', '.\nIf you use the ', ', ', "" values will be serialized using .NET's native "", ' representation, which preserves ', ' info but may not be interoperable with non-.NET platforms.', 'An ', ' is storage of typed serializers. The ', ' API accepts a ', ' object which specifies the ', ' to use, allowing customization of the serialization of complex types.', 'Each instance of ', ' accepts only a single resolver. Most object graphs will need more than one for serialization, so composing a single resolver made up of several is often required, and can be done with the ', ' as shown below:', 'A resolver can be set as default with ', ', but ', ':\nWhen developing an application where you control all MessagePack-related code it may be safe to rely on this mutable static to control behavior.\nFor all other libraries or multi-purpose applications that use ', ' you should explicitly specify the ', ' to use with each method invocation to guarantee your code behaves as you expect even when sharing an ', ' or process with other MessagePack users that may change this static property.', 'Here is sample of use ', ' with ', ' (It is Json.NET-like lightweight setting.)', 'If you want to make an extension package, you should write both a formatter and resolver\nfor easier consumption.\nHere is sample of a resolver:', ""MessagePackFormatterAttribute is a lightweight extension point of class, struct, interface, enum and property/field. This is like Json.NET's JsonConverterAttribute. For example, serialize private field, serialize x10 formatter."", 'Formatter is retrieved by ', ', it is included in ', '.', "" is lightweight extension point of class and struct. If there exists types that can't be serialized, you can register "", ' that serializes those to nil/null.', 'MessagePack for C# already used some MessagePack extension type codes, be careful to avoid using the same ext code for other purposes.', 'This leaves the following ranges for your use:', 'Within the ', ' ranges, this library defines or implements extensions that use these type codes:', 'Unity lowest supported version is ', ', API Compatibility Level supports both ', ' and ', '.', 'You can install the ', ' from the ', ' page.\nIf your build targets .NET Framework 4.x and runs on mono, you can use it as is.\nBut if your build targets IL2CPP, you can not use ', ', so it is required to use pre-code generation. Please see ', '.', 'MessagePack for C# includes some additional ', ' libraries that originally provides in NuGet. They are located under ', '. If other packages use these libraries (e.g. Unity Collections package using ', '), to avoid conflicts, please delete the DLL under ', '.', 'Currently ', ' does not work on IL2CPP, so it is recommended to use ', ' instead.', 'In Unity, MessagePackSerializer can serialize ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ' and their nullable, array and list types with the built-in extension ', '. It is included in StandardResolver by default.', 'MessagePack for C# has an additional unsafe extension.  ', ' is special resolver for extremely fast but unsafe serialization/deserialization of struct arrays.', 'x20 faster Vector3[] serialization than native JsonUtility. If use ', ', serialization uses a special format (ext:typecode 30~39)  for ', ', ', ', ', ', ', ', ', ', ', '. If use ', ', it supports ', ', ', ', ', ' too. This special feature is useful for serializing Mesh (many ', ') or many transform positions.', 'If you want to use unsafe resolver, register ', ' or ', '.', 'Here is sample of configuration.', 'The ', ' NuGet package is for .NET server-side serialization support to communicate with Unity. It includes shims for Vector3 etc and the Safe/Unsafe serialization extension.', 'If you want to share a class between Unity and a server, you can use ', ' or ', ' or a glob reference (with ', '), etc. Anyway, you need to share at source-code level. This is a sample project structure using a glob reference (recommended).', 'By default, MessagePack for C# serializes custom objects by ', ' on the fly at runtime to create custom, highly tuned formatters for each type. This code generation has a minor upfront performance cost.\nBecause strict-AOT environments such as Xamarin and Unity IL2CPP forbid runtime code generation, MessagePack provides a way for you to run a code generator ahead of time as well.', 'Note: When using Unity, dynamic code generation only works when targeting .NET Framework 4.x + mono runtime.\nFor all other Unity targets, AOT is required.', 'If you want to avoid the upfront dynamic generation cost or you need to run on Xamarin or Unity, you need AOT code generation. ', ' (MessagePackCompiler) is the code generator of MessagePack for C#. mpc uses ', ' to analyze source code.', 'First of all, mpc requires ', '. The easiest way to acquire and run mpc is as a dotnet tool.', 'Installing it as a local tool allows you to include the tools and versions that you use in your source control system. Run these commands in the root of your repo:', 'Check in your ', ' file. On another machine you can ""restore"" your tool using the ', ' command.', 'Once you have the tool installed, simply invoke using ', ' within your repo:', 'Alternatively, you can download mpc from the ', "" page, that includes platform native binaries (that don't require a separate dotnet runtime)."", ' targets C# code with ', ' or ', ' annotations.', 'By default, ', ' generates the resolver as ', ' and formatters as', '.', 'Here is the full sample code to register a generated resolver in Unity.', 'In Unity, you can use MessagePack CodeGen windows at ', '.', 'Install the .NET Core runtime, install mpc (as a .NET Core Tool as described above), and execute ', '. Currently this tool is experimental so please tell me your opinion.', 'In Xamarin, you can install the ', ' into your projects to pre-compile fast serialization code and run in environments where JIT compilation is not allowed.', 'MessagePack advocated ', ', but work on it has stopped and it is not widely used.', ""I've created a gRPC based MessagePack HTTP/2 RPC streaming framework called "", '. gRPC usually communicates with Protocol Buffers using IDL. But MagicOnion uses MessagePack for C# and does not need IDL. When communicating C# to C#, schemaless (or rather C# classes as schema) is better than using IDL.', 'The StreamJsonRpc library is based on ', ' and includes ', ' and as of v2.3 includes ', '.', 'See our ', '.', 'Yoshifumi Kawai (a.k.a. neuecc) is a software developer in Japan.\nHe is the Director/CTO at Grani, Inc.\nGrani is a mobile game developer company in Japan and well known for using C#.\nHe is awarding Microsoft MVP for Visual C# since 2011.\nHe is known as the creator of ', ' (Reactive Extensions for Unity)', '\n', 'Form validation library. Includes MsgPack and JSON serializer/deserializer.', 'GoodForm uses std::any, which requires c++17. When c++17 is not available, boost::any is expected and will be installed automatically when using ', '.', '\n', '\n', 'msgpack11 is a tiny MsgPack library for C++11, providing MsgPack parsing and serialization.', '\nThis library is inspired by ', '.', '\nThe API of msgpack11 is designed to be similar with json11.', 'Using CMake', 'Using Buck', 'There are more specific examples in example.cpp.\nPlease see it.', 'Derived from ', 'CPU : 2.6 GHz Intel Core i7', '\nMemory : 16 GB 2133 MHz LPDDR3', '\nGit revision : 6f6b4302b68b3c88312eb24367418b7fce81298c', 'This software is released under the MIT License, see LICENSE.txt.', 'A modern (c++17 required) implementation of the ', '.', 'Msgpack is a binary serialization specification. It allows you to save and load application objects like classes and structs over networks, to files, and between programs and even different languages.', 'Check out ', ' for my rational creating this library.', ""Want to use this library? Just #include the header and you're good to go. Its less than 1000 lines of code."", 'Easily pack objects into byte arrays using a pack free function:', ""It's like JSON but smaller and faster."", "" is an efficient binary serialization\nformat, which lets you exchange data among multiple languages like JSON,\nexcept that it's faster and smaller. Small integers are encoded into a\nsingle byte and short strings require only one extra byte in\naddition to the strings themselves."", 'See ', 'See ', 'You can get additional information including the tutorial on the\n', '.', ' is developed on GitHub at ', '.\nTo report an issue or send a pull request, use the\n', '.', ""Here's the list of "", '.', ' is licensed under the Boost Software License, Version 1.0. See\nthe ', ' file for details.', 'clojure-msgpack is a lightweight and simple library for converting\nbetween native Clojure data structures and MessagePack byte formats.\nclojure-msgpack only depends on Clojure itself; it has no third-party\ndependencies.', '\n', ' provides a streaming API for situations where it is more\nconvenient or efficient to work with byte streams instead of fixed byte arrays\n(e.g. size of object is not known ahead of time).', 'The streaming counterpart to ', ' is ', '\nwhich returns nil and accepts either\n', '\nor\n', '\nas an additional argument.', ' is in ""streaming mode"" when the argument is of type\n', '\nor\n', '.', 'Serializing a value of unrecognized type will fail with ', '.  See ', ' if you want to register your own types.', ""Some native Clojure types don't have an obvious MessagePack counterpart. We can\nserialize them as Extended types. To enable automatic conversion of these\ntypes, load the "", ' library.', 'With ', ':', 'Without ', ':', 'You can also define your own Extended types with ', '.', 'All pack and unpack functions take an optional map of options:', '\nSerialize/deserialize strings and bytes using the raw-type defined here:\n', 'Note: No error is thrown if an unpacked value is reserved under the old spec\nbut defined under the new spec. We always deserialize something if we can\nregardless of ', '.', 'clojure-msgpack is MIT licensed. See the included LICENSE file for more details.', 'MessagePack implementation in Crystal.', ""Add this to your application's "", ':', 'Copyright 2015 Benoist Claassen', 'A low-level ', ' codec for ', ""Add this to your application's "", ':', 'Any type can become encodable by including ', ' and defining ', 'Any type can become decodable by following the ', '2016 (c) Copyright Barry Allard', 'MessagePack is a binary-based JSON-like serialization library.', 'MessagePack for D is a pure D implementation of MessagePack.', 'Note: The ', "" type is only supported in D.\nDon't use the "", ' type when communicating with other programming languages.\nNote that ', ' will raise an exception if a loss of precision occurs.', 'Use dub to add it as a dependency:', 'Example code can be found in the ', ' directory.', 'The documentation can be found ', 'msgpack-d is very simple to use. Use ', ' for serialization, and ', ' for deserialization:', 'Use the ', ' attribute:', 'msgpack-d provides the functions ', ' / ', ' to allow you\nto use custom routines during the serialization or deserialization of user-defined class and struct types.\nThis feature is especially useful when serializing a derived class object when that object is statically\ntyped as a base class object.', 'For example:', 'In addition, here is also a method using ', ' attribute:', 'These types are used by the ', ' and ', ' functions.', 'See the documentation of ', ', ', ' and ', ' for more details.', 'The official MessagePack protocol website.', 'Use this issue tracker to review and file bugs in msgpack-d.', 'Other language bindings and implementations of the msgpack protocol can be found here.', 'Distributed under the ', '.', 'This is a very early release of my MessagePack library for Dart. Currently, message classes must be written by hand. For example:', 'For each class you need to define the ', ' and ', ' methods, which convert from and to a list of fields respectively.', 'For example usage, see the unit tests.', 'MessagePack implementation for dart.', 'Clean, simple, fast and with sane API and implementation.', 'QMsgPack is a simple and powerful Delphi & C++ Builder implementation for messagepack protocol.\nQMsgPack is a part of QDAC 3.0,Source code hosted in Sourceforge(', ').', '· Full types support,include messagepack extension type', '· Full open source,free for used in ANY PURPOSE', '· Quick and simple interface', '· RTTI support include', 'QMsgPack is not a desgin time package.So just place QMsgPack files into search path and add to your project.', '· Topic in Website (', ') ,CHINESE only', '· Mail to author (', ')', '· Post in forum (', ')', '· QQ Group No：250530692 (', ')', '· HTTP (', ')', '· SVN (svn://svn.code.sf.net/p/qdac3/code/)', 'Add ', ' as a dependency in your ', ' file.', 'Support string type. This options is ', ' by default.', 'Support extention type.', 'See ', '.', 'MIT', '\n', 'Msgpax is a high-performance and comprehensive library for serializing and deserializing Elixir terms using the ', ' format.', '.', 'A detailed table that shows the relationship between Elixir types and MessagePack types can be found in the ', '.', 'Add ', ' as a dependency in your ', ' file:', 'Then, run ', ' in your shell to fetch the new dependency.', 'Msgpax is released under ', '.', '\n', '\n', ', >= 17.0 Also based on\n', '.', 'Or as it is ', ', just', 'might work.', 'Both for packing and unpacking. Default is ', '. Major difference\nbetween old and new spec is:', 'The default is new spec. Old spec mode does not handle these new types but\nreturns error. To use\n', '\nmode, this option is explicitly added.', 'Only in packing. Atoms are packed as binaries. Default value is ', '.\nOtherwise, any term including atoms throws badarg.', 'Both in packing and unpacking. In packing, if an atom is in this list\na binary is encoded as a binary. In unpacking, msgpacked binaries are\ndecoded as atoms with ', ' with encoding\n', '. Default value is an empty list.', 'Even if ', ' is ', ', known atoms are packed.', 'A switch to choose decoded term style of ', ' type when ', '.\nOnly available at new spec. Default is ', '.', 'Only in unpacking, UTF-8 validation at unpacking from ', ' type will\nbe enabled. Default value is ', '.', 'A switch to choose packing of ', ' when packing. Only available\nat new spec. Default is ', ' for symmetry with ', '\noption.', 'But the default option pays the cost of performance for symmetry. If\nthe overhead of UTF-8 validation is unacceptable, choosing ', ' as\nthe option would be the best.', 'Both at packing and unpacking. Default value is ', '.', 'At both. The default behaviour in case of facing ext data at decoding\nis to ignore them as its length is known.', 'Now msgpack-erlang supports ext type. Now you can serialize everything\nwith your original (de)serializer. That will enable us to handle\nerlang- native types like ', ', ', ' contained in ', '. See\n', ' for example code.', 'The Float type of Message Pack represents IEEE 754 floating point number, so it includes Nan and Infinity.\nIn unpacking, msgpack-erlang returns ', ', ', ' and ', '.', 'Apache License 2.0', ""0.2 series works with OTP 17.0, R16, R15, and with MessagePack's new\nand old format. But does not support "", ' type introduced in\nOTP 17.0.', 'It also supports JSX-compatible mode.', 'MessagePack is a fast and compact binary serialization library.', 'MessagePack for F# is a MessagePack implementation of F#, by F#, for F#.', 'Distributed under the ', ' .', 'MessagePack.FSharpExtensions is a ', ' extension library for F#.', 'Records, Struct Records and Anonymous Records are serialized and deserialized using ', ' in ', '.', '\n', '\n', '\n', 'msgpack is brought to you by ', ' ', '.\nUptrace is an open source and blazingly fast\n', ' powered\nby OpenTelemetry and ClickHouse. Give it a star as well!', 'msgpack supports 2 last Go versions and requires support for\n', '. So make sure to initialize a Go module:', 'And then install msgpack/v5 (note ', ' in the import; omitting it is a popular mistake):', 'Thanks to all the people who already contributed!', '.', 'To install:', 'Source: [', ']', '\nOnline documentation: [', ']', 'Typical usage:', 'This is a code generation tool and serialization library for ', '. You can read more about MessagePack ', ', or at ', '.', 'In a source file, include the following directive:', 'The ', ' command will generate serialization methods for all exported type declarations in the file.', 'You can ', '.', 'Field names can be set in much the same way as the ', ' package. For example:', 'By default, the code generator will satisfy ', ', ', ', ', ',\n', ', and ', '. Carefully-designed applications can use these methods to do\nmarshalling/unmarshalling with zero heap allocations.', 'While ', ' and ', "" are quite similar to the standard library's\n"", ' and ', ', ', ' and ', ' are useful for\nstream serialization. (', ' and ', ' are essentially protocol-aware versions\nof ', ' and ', ', respectively.)', 'Consider the following:', 'As long as the declarations of ', ' and ', ' are in the same file as ', ', the parser will determine that the type information for ', ' and ', ' can be passed into the definition of ', ' before its methods are generated.', 'MessagePack supports defining your own types through ""extensions,"" which are just a tuple of\nthe data ""type"" (', ') and the raw binary. You ', 'Mostly stable, in that no breaking changes have been made to the ', ' library in more than a year. Newer versions\nof the code may generate different code than older versions for performance reasons. I (@philhofer) am aware of a\nnumber of stability-critical commercial applications that use this code with good results. But, caveat emptor.', 'You can read more about how ', ' maps MessagePack types onto Go types ', '.', 'Here some of the known limitations/restrictions:', ""If the output compiles, then there's a pretty good chance things are fine. (Plus, we generate tests for you.) "", ' file an issue if you think the generator is writing broken code.', 'If you like benchmarks, see ', ' and ', '.', 'As one might expect, the generated methods that deal with ', ' are faster for small objects, but the ', ' methods are generally more memory-efficient (and, at some point, faster) for large (> 2KB) objects.', '\n', '\n', '\n', '\n', 'If your application serializes only primitive types, array, map and struct, code generation is also recommended.\nYou can get the fastest performance with ', '.', 'This package requires more than  version ', 'Current version is ', '.', 'This result made from ', 'This library is under the MIT License.', 'Build Status: ', 'Msgpack for HHVM, It is a msgpack binding for HHVM', ""If you don't have "", ' program, please intall package ', 'Feel free to send Pull Requests for bug report at: ', 'This is an implementation of ', ' for ', '.', 'It contains:', 'Execute following instructions:', ' documentation can be found on Hackage:', 'This implementation defines an messagepack ', ' type, which is an instance of\n', ' (from ', ' ):', ""Thus, you can use cereal's "", ' and ', ' to pack and unpack objects.', ' ', 'MessagePack (', ') serialization library for Haxe', 'Simply use ', ' to use this github repo or ', ' to use the one in the haxelib repository.', ' Yay!', 'This Jackson extension library handles reading and writing of data encoded in ', ' data format.\nIt extends standard Jackson streaming API (', ', ', ', ', '), and as such works seamlessly with all the higher level data abstractions (data binding, tree model, and pluggable extensions).', 'To use this module on Maven-based projects, use following dependency:', 'Only thing you need to do is to instantiate MessagePackFactory and pass it to the constructor of ObjectMapper.', 'Also, you can exchange data among multiple languages.', 'Java', 'Ruby', 'Java', ' is a binary serialization format. If you need a fast and compact alternative of JSON, MessagePack is your friend. For example, a small integer can be encoded in a single byte, and short strings only need a single byte prefix + the original byte array. MessagePack implementation is already available in various languages (See also the list in ', ') and works as a universal data format.', 'MessagePack v7 (or later) is a faster implementation of the previous version ', ', and\nsupports all of the message pack types, including ', '.', '.', '\n', 'For Maven users:', 'For sbt users:', 'For gradle users:', 'For using DirectByteBuffer (off-heap memory access methods) in JDK17, you need to specify two JVM options:', 'msgpack-java supports serialization and deserialization of Java objects through ', '.\nFor details, see ', '. The template-based serialization mechanism used in v06 is deprecated.', 'msgpack-java uses ', ' for building the projects. For the basic usage of sbt, see:', 'Coding style', 'Enter the sbt console:', 'Here is a list of sbt commands for daily development:', 'To publish a new version, you only need to add a new git tag and push it to GitHub. GitHub Action will deploy a new release version to Maven Central (Sonatype).', 'To generate a release notes, you can use this command line:', 'If you need to publish to Maven central using a local machine, you need to configure ', ' plugin. First set Sonatype account information (user name and password) in the global sbt settings. To protect your password, never include this file in your project.', 'You may also need to configure GPG. See the instruction in ', '.', 'Then, run ', ' followed by ', ':', 'If some sporadic error happens (e.g., Sonatype timeout), rerun ', ' again.', 'Fast Pure JavaScript MessagePack Encoder and Decoder', 'Online demo: ', 'A CLI tool bin/msgpack converts data stream from JSON to MessagePack and vice versa.', 'Run tests on node.js:', 'Run tests on browsers:', 'Browser version ', ' is also available. 50KB minified, 14KB gziped.', 'Step #1: write some code at first.', 'Proceed to the next steps if you prefer faster browserify compilation time.', 'Step #2: add ', ' property on ', ' in your project. This refers the global ', ' object instead of including whole of ', ' source code.', 'Step #3: compile it with ', ' and ', '.', 'Step #4: load ', ' before your code.', 'It is tested to have basic compatibility with other Node.js MessagePack modules below:', 'A benchmark tool ', ' is available to compare encoding/decoding speed\n(operation per second) with other MessagePack modules.\nIt counts operations of ', ' in 10 seconds.', 'Streaming benchmark tool ', ' is also available.\nIt counts milliseconds for 1,000,000 operations of 30 bytes fluentd msgpack fragment.\nThis shows streaming encoding and decoding are super faster.', 'Test environment: msgpack-lite 0.1.14, Node v4.2.3, Intel(R) Xeon(R) CPU E5-2666 v3 @ 2.90GHz', 'The following table shows how JavaScript objects (value) will be mapped to\n', '\nand vice versa.', 'Note that both ', ' and ', ' are mapped to nil ', ' type.\nThis means ', ' value will be ', ' to ', ' in other words.', 'The MessagePack specification allows 128 application-specific extension types.\nThe library uses the following types to make round-trip conversion possible\nfor JavaScript native objects.', 'Other extension types are mapped to built-in ExtBuffer object.', 'Register a custom extension type number to serialize/deserialize your own class instances.', 'The first argument of ', ' and ', ' should be an integer within the range of 0 and 127 (0x0 and 0x7F). ', ' is a function that accepts an instance of ', ', and should return a buffer representing that instance. ', ' is the opposite: it accepts a buffer and should return an instance of ', '.', 'If you pass an array of functions to ', ' or ', ', the value to be encoded/decoded will pass through each one in order. This allows you to do things like this:', 'You can also pass the ', ' option to ', ', ', ', ', ', and ', '.', 'If you wish to modify the default built-in codec, you can access it at ', '.', ' function accepts some options.', 'It does NOT have the preset extension types defined when no options given.', ': It has the preset extension types described above.', ': It runs a validation of the value before writing it into buffer. This is the default behavior for some old browsers which do not support ', ' object.', ': It uses ', ' formats instead of ', ' and ', '.', "": It decodes msgpack's "", '/', ' formats with ', ' object.', "": It ties msgpack's "", ' format with ', ' object, instead of ', ' object.', ': It returns Uint8Array object when encoding, instead of ', ' object.', ': Uses the global JavaScript Map type, if available, to unpack\nMessagePack map elements.', 'The ', ' respects for ', '. Set ', ' to ', '.', 'The MIT License (MIT)', 'Copyright (c) 2015-2016 Yusuke Kawasaki', 'Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:', 'The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.', 'THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.', 'This is a ', ' serializer and deserializer written in JavaScript for web browsers (including IE 11) and Node.js.', 'It is compact but still fully-featured. This library supports the complete ', ' released on 2017-08-09, including date/time values. No other extension types are implemented in this library, it’s only the standard types which is perfectly fine for interoperability with MessagePack codecs in other programming languages.', 'I’m using the ', ' library on the server side in my .NET applications.', 'MessagePack is an efficient binary serialisation format. It lets you exchange data among multiple languages like JSON. But it’s faster and smaller. Small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves.', 'This library is very lightweight. The source code has around ', ' (incl. browser/Node detection), the minified file has 7.0 kB and can be GZip-compressed to ', '.', 'The file msgpack-tests.html contains some tests and a benchmark function that compares this library with ', '. Here are the results, in milliseconds (lower is better). All tests done on an Intel Core i7-3770 and Windows 10.', 'The numbers show that this library is comparable with msgpack-lite. In Chrome it’s only 10% slower. But serializing in Firefox and deserializing in Microsoft browsers is twice as fast.', 'In browsers, a global ', ' object is created that contains the functions ', ' and ', '. The first can be called with any data and returns the serialized bytes. The second works in reverse, taking the serialized bytes and returning the runtime value.', 'Include the JavaScript file into your HTML document like this:', 'You can use the library functions after loading the script.', 'If there should be a naming conflict with another library you want to load, you can change the global object name from ', ' to something else by setting ', ' before loading the script file:', 'In Node.js, these functions are exported in the object you get from the ', ' function.', 'Here’s a simple example:', 'You can also use the functions ', ' and ', ' which are aliases to ', ' and ', '. This makes it easier to replace other libraries that use these function names with msgpack.js.', 'New projects should use the preferred (and more precisely named) ', ' and ', ' functions though.', '\n', '\n', '\n', '\n', '\n', '\n', 'The msgpackr package is an extremely fast MessagePack NodeJS/JavaScript implementation. Currently, it is significantly faster than any other known implementations, faster than Avro (for JS), and generally faster than native V8 JSON.stringify/parse, on NodeJS. It also includes an optional record extension (the ', ' in msgpackr), for defining record structures that makes MessagePack even faster and more compact, often over twice as fast as even native JSON functions, several times faster than other JS implementations, and 15-50% more compact. See the performance section for more details. Structured cloning (with support for cyclical references) is also supported through optional extensions.', 'Install with:', 'And ', ' or ', ' it for basic standard serialization/encoding (', ') and deserialization/decoding (', ') functions:', 'This ', ' function will generate standard MessagePack without any extensions that should be compatible with any standard MessagePack parser/decoder. It will serialize JavaScript objects as MessagePack ', 's by default. The ', ' function will deserialize MessagePack ', 's as an ', ' with the properties from the map.', 'The msgpackr package runs on any modern JS platform, but is optimized for NodeJS usage (and will use a node addon for performance boost as an optional dependency).', 'We can use the including streaming functionality (which further improves performance). The ', ' is a NodeJS transform stream that can be used to serialize objects to a binary stream (writing to network/socket, IPC, etc.), and the ', ' can be used to deserialize objects from a binary sream (reading from network/socket, etc.):', 'Or for a full example of sending and receiving data on a stream:', 'The ', ' and ', ' instances  will have also the record structure extension enabled by default (see below).', 'Msgpackr modules are standard ESM modules and can be loaded directly from the ', ' for use in Deno. The standard pack/encode and unpack/decode functionality is available on Deno, like other platforms.', 'Msgpackr works as standalone JavaScript as well, and runs on modern browsers. It includes a bundled script, at ', ' for ease of direct loading:', 'This is UMD based, and will register as a module if possible, or create a ', ' global with all the exported functions.', 'For module-based development, it is recommended that you directly import the module of interest, to minimize dependencies that get pulled into your application:', 'The package also includes a minified bundle in index.min.js.\nAdditionally, the package includes a version that excludes dynamic code evaluation called index-no-eval.js, for situations where Content Security Policy (CSP) forbids eval/Function in code. The dynamic evaluation provides important performance optimizations (for records), so is not recommended unless required by CSP policy.', 'You can also use msgpackr for ', '. By enabling the ', ' option, you can include references to other objects or cyclic references, and object identity will be preserved. Structured cloning also enables preserving certain typed objects like ', ', ', ', ', ' and TypedArray instances. For example:', ""This option is disabled by default because it uses extensions and reference checking degrades performance (by about 25-30%). (Note this implementation doesn't serialize every class/type specified in the HTML specification since not all of them make sense for storing across platforms.)"", 'If you prefer to use encoder/decode terminology, msgpackr exports aliases, so ', ' is equivalent to ', ', ', ' is ', ', ', ' is ', ', ', ' is ', ', and ', ' and ', ' can be used as well.', 'There is a critical difference between maps (or dictionaries) that hold an arbitrary set of keys and values (JavaScript ', ' is designed for these), and records or object structures that have a well-defined set of fields. Typical JS objects/records may have many instances re(use) the same structure. By using the record extension, this distinction is preserved in MessagePack and the encoding can reuse structures and not only provides better type preservation, but yield much more compact encodings and increase decoding performance by 2-3x. Msgpackr automatically generates record definitions that are reused and referenced by objects with the same structure. There are a number of ways to use this to our advantage. For large object structures with repeating nested objects with similar structures, simply serializing with the record extension can yield significant benefits. To use the record structures extension, we create a new ', ' instance. By default a new ', ' instance will have the record extension enabled:', 'Another way to further leverage the benefits of the msgpackr record structures is to use streams that naturally allow for data to reuse based on previous record structures. The stream classes have the record structure extension enabled by default and provide excellent out-of-the-box performance.', 'When creating a new ', ', ', ', ', ', or ', ' instance, we can enable or disable the record structure extension with the ', ' property. When this is ', ', the record structure extension will be disabled (standard/compatibility mode), and all objects will revert to being serialized using MessageMap ', 's, and all ', 's will be deserialized to JS ', 's as properties (like the standalone ', ' and ', ' functions).', 'Streaming with record structures works by encoding a structure the first time it is seen in a stream and referencing the structure in later messages that are sent across that stream. When an encoder can expect a decoder to understand previous structure references, this can be configured using the ', ' flag, which is auto-enabled by streams, but can also be used with Packr instances.', 'Another useful way of using msgpackr, and the record extension, is for storing data in a databases, files, or other storage systems. If a number of objects with common data structures are being stored, a shared structure can be used to greatly improve data storage and deserialization efficiency. In the simplest form, provide a ', ' array, which is updated if any new object structure is encountered:', 'If you are working with persisted data, you will need to persist the ', ' data when it is updated. Msgpackr provides an API for loading and saving the ', ' on demand (which is robust and can be used in multiple-process situations where other processes may be updating this same ', ' array), we just need to provide a way to store the generated shared structure so it is available to deserialize stored data in the future:', 'Msgpackr will automatically add and saves structures as it encounters any new object structures (up to a limit of 32, by default). It will always add structures in an incremental/compatible way: Any object encoded with an earlier structure can be decoded with a later version (as long as it is persisted).', 'By default there is a limit of 32 shared structures. This default is designed to record common shared structures, but also be resilient against sharing too many structures if there are many objects with dynamic properties that are likely to be repeated. This also allows for slightly more efficient one byte encoding. However, if your application has more structures that are commonly repeated, you can increase this limit by setting ', ' to a higher value. The maximum supported shared structures is 8160.', 'You can also provide a ', ' function in the options if you want to specifically indicate which structures should be shared. This is called during the encoding process with the array of keys for a structure that is being considered for addition to the shared structure. For example, you might want:', 'If you have a buffer with multiple values sequentially encoded, you can choose to parse and read multiple values. This can be done using the ', ' function/method, which can return an array of all the values it can sequentially parse within the provided buffer. For example:', 'Alternately, you can provide a callback function that is called as the parsing occurs with each value, and can optionally terminate the parsing by returning ', ':', 'The following options properties can be provided to the Packr or Unpackr constructor:', ""By default all non-integer numbers are serialized as 64-bit float (double). This is fast, and ensures maximum precision. However, often real-world data doesn't not need 64-bits of precision, and using 32-bit encoding can be much more space efficient. There are several options that provide more efficient encodings. Using the decimal rounding options for encoding and decoding provides lossless storage of common decimal representations like 7.99, in more efficient 32-bit format (rather than 64-bit). The "", ' property has several possible options, available from the module as constants:', 'Note, that the performance is decreased with decimal rounding by about 20-25%, although if only 5% of your values are floating point, that will only have about a 1% impact overall.', 'In addition, msgpackr exports a ', ' function that can be used to round floating point numbers to the maximum significant decimal digits that can be stored in 32-bit float, just as DECIMAL_ROUND does when decoding. This can be useful for determining how a number will be decoded prior to encoding it.', 'Msgpackr employs an optional native node-addon to accelerate the parsing of strings. This should be automatically installed and utilized on NodeJS. However, you can verify this by checking the ', ' property that is exported from msgpackr. If this is ', ', the ', ' package may not have been properly installed, and you may want to verify that it is installed correctly:', 'Msgpackr is fast. Really fast. Here is comparison with the next fastest JS projects using the benchmark tool from ', ' (and the sample data is from some clinical research data we use that has a good mix of different value types and structures). It also includes comparison to V8 native JSON functionality, and JavaScript Avro (', ', a very optimized Avro implementation):', 'All benchmarks were performed on Node 15 / V8 8.6 (Windows i7-4770 3.4Ghz).\n(', ' is schema-based and more comparable in style to msgpackr with shared structures).', 'Here is a benchmark of streaming data (again borrowed from ', ""'s benchmarking), where msgpackr is able to take advantage of the structured record extension and really demonstrate its performance capabilities:"", 'See the ', ' for more benchmarks and information about benchmarking.', 'You can add your own custom extensions, which can be used to encode specific types/classes in certain ways. This is done by using the ', ' function, and specifying the class, extension ', ' code (should be a number from 1-100, reserving negatives for MessagePack, 101-127 for msgpackr), and your ', ' and ', ' functions (or just the one you need).', 'If you want to use msgpackr to encode and decode the data within your extensions, you can use the ', ' and ', ' functions and read and write data/objects that will be encoded and decoded by msgpackr, which can be easier and faster than creating and receiving separate buffers:', 'Note that you can just return the same object from ', ', and in this case msgpackr will encode it using the default object/array encoding:', 'You can also create an extension with ', ' and ', ' methods, but no ', ' (or ', '), if you just want to customize how a class is serialized without using MessagePack extension encoding.', 'Msgpackr is already fast, but here are some tips for making it faster:', 'Msgpackr is designed to work well with reusable buffers. Allocating new buffers can be relatively expensive, so if you have Node addons, it can be much faster to reuse buffers and use memcpy to copy data into existing buffers. Then msgpackr ', ' can be executed on the same buffer, with new data, and optionally take a second paramter indicating the effective size of the available data in the buffer.', 'During the serialization process, data is written to buffers. Again, allocating new buffers is a relatively expensive process, and the ', ' method can help allow reuse of buffers that will further improve performance. With ', ' method, you can provide a buffer, serialize data into it, and when it is known that you are done using that buffer, you can call ', ' again to reuse it. The use of ', ' is never required, buffers will still be handled and cleaned up through GC if not used, it just provides a small performance boost.', 'The record struction extension uses extension id 0x72 (""r"") to declare the use of this functionality. The extension ""data"" byte (or bytes) identifies the byte or bytes used to identify the start of a record in the subsequent MessagePack block or stream. The identifier byte (or the first byte in a sequence) must be from 0x40 - 0x7f (and therefore replaces one byte representations of positive integers 64 - 127, which can alternately be represented with int or uint types). The extension declaration must be immediately follow by an MessagePack array that defines the field names of the record structure.', 'Once a record identifier and record field names have been defined, the parser/decoder should proceed to read the next value. Any subsequent use of the record identifier as a value in the block or stream should parsed as a record instance, and the next n values, where is n is the number of fields (as defined in the array of field names), should be read as the values of the fields. For example, here we have defined a structure with fields ""foo"" and ""bar"", with the record identifier 0x40, and then read a record instance that defines the field values of 4 and 2, respectively:', 'Which should generate an object that would correspond to JSON:', 'msgpackr supports ', ' (using fixext1 + type: 0 + data: 0 to match other JS implementations), ', ', ', ', and ', ' (using standard IEEE 754 representations with doubles/floats).', 'msgpackr saves all JavaScript ', 's using the standard MessagePack date extension (type -1), using the smallest of 32-bit, 64-bit or 96-bit format needed to store the date without data loss (or using 32-bit if useTimestamp32 options is specified).', 'With structured cloning enabled, msgpackr will also use extensions to store Set, Map, Error, RegExp, ArrayBufferView objects and preserve their types.', 'The high-performance serialization and deserialization algorithms in the msgpackr package are also available in the ', ' for the CBOR format, with the same API and design. A quick summary of the pros and cons of using MessagePack vs CBOR are:', 'MIT', ""MessagePack can be a great choice for high-performance data delivery to browsers, as reasonable data size is possible without compression. And msgpackr works very well in modern browsers. However, it is worth noting that if you want highly compact data, brotli or gzip are most effective in compressing, and MessagePack's character frequency tends to defeat Huffman encoding used by these standard compression algorithms, resulting in less compact data than compressed JSON."", 'Various projects have been inspirations for this, and code has been borrowed from ', ' and ', '.', ' ', ' ', ' ', ' ', 'This is a JavaScript/ECMA-262 implementation of ', ', an efficient binary serilization format:', 'This library is a universal JavaScript, meaning it is compatible with all the major browsers and NodeJS. In addition, because it is implemented in ', ', type definition files (', ') are always up-to-date and bundled in the distribution.', 'This library is published to ', ' as ', '.', 'It encodes ', ' into a single MessagePack-encoded object, and returns a byte array as ', '. It throws errors if ', ' is, or includes, a non-serializable object such as a ', ' or a ', '.', 'for example:', ""If you'd like to convert an "", ' to a NodeJS ', ', use ', ' in order not to copy the underlying ', ', while ', ' copies it:', 'It decodes ', ' that includes a MessagePack-encoded object, and returns the decoded object typed ', '.', ' must be an array of bytes, which is typically ', ' or ', '. ', ' is defined as ', '.', 'The ', ' must include a single encoded object. If the ', ' includes extra bytes after an object or the ', ' is empty, it throws ', '. To decode ', ' that includes multiple encoded objects, use ', ' or ', ' (recommended) instead.', 'for example:', 'NodeJS ', ' is also acceptable because it is a subclass of ', '.', 'You can use ', ' to limit the length of each type decoded.', 'It decodes ', ' that includes multiple MessagePack-encoded objects, and returns decoded objects as a generator. See also ', ', which is an asynchronous variant of this function.', ""This function is not recommended to decode a MessagePack binary via I/O stream including sockets because it's synchronous. Instead, "", ' decodes a binary stream asynchronously, typically spending less CPU and memory.', 'for example:', 'It decodes ', ', where ', ' is defined as ', ', in an async iterable of byte arrays, and returns decoded object as ', ' type, wrapped in ', '.', 'This function works asynchronously, and might CPU resources more efficiently compared with synchronous ', "", because it doesn't wait for the completion of downloading."", ' is the same as ', ' for ', '.', 'This function is designed to work with whatwg ', ' like this:', 'It is alike to ', ', but only accepts a ', ' that includes an array of items, and emits a decoded item one by one.', 'for example:', 'It is alike to ', ' and ', ', but the input ', ' must consist of multiple MessagePack-encoded items. This is an asynchronous variant for ', '.', 'In other words, it could decode an unlimited stream and emits a decoded item one by one.', 'for example:', 'This function is available since v2.4.0; previously it was called as ', '.', ' and ', ' classes is provided to have better performance by reusing instances:', 'According to our benchmark, reusing ', ' instance is about 20% faster\nthan ', ' function, and reusing ', ' instance is about 2% faster\nthan ', ' function. Note that the result should vary in environments\nand data structure.', 'To handle ', ', this library provides ', ' class.', 'This is an example to setup custom extension types that handles ', ' and ', ' classes in TypeScript:', 'Not that extension types for custom objects must be ', ', while ', ' is reserved for MessagePack itself.', 'When you use an extension codec, it might be necessary to have encoding/decoding state to keep track of which objects got encoded/re-created. To do this, pass a ', ' to the ', ' and ', ':', 'This library does not handle BigInt by default, but you can handle it with ', ' like this:', 'There is a proposal for a new date/time representations in JavaScript:', 'This library maps ', ' to the MessagePack timestamp extension by default, but you can re-map the temporal module (or ', ') to the timestamp extension like this:', 'This will become default in this library with major-version increment, if the temporal module is standardized.', ' is a binary data container provided by browsers. To read its contents, you can use ', ' or ', '. ', '\nis recommended if your target platform support it. This is because streaming\ndecode should be faster for large objects. In both ways, you need to use\nasynchronous API.', 'This library is compatible with the ""August 2017"" revision of MessagePack specification at the point where timestamp ext was added:', 'The living specification is here:', 'Note that as of June 2019 there\'re no official ""version"" on the MessagePack specification. See ', ' for the discussions.', 'The following table shows how JavaScript values are mapped to ', ' and vice versa.', 'This is a universal JavaScript library that supports major browsers and NodeJS.', 'ES2018 standard library used in this library can be polyfilled with ', '.', 'If you support IE11, import ', ' in your application entrypoints, as this library does in testing for browsers.', 'NodeJS v10 is required, but NodeJS v12 or later is recommended because it includes the V8 feature of ', '.', 'NodeJS before v10 will work by importing ', '.', 'This module requires type definitions of ', ', ', ', whatwg streams, and so on. They are provided by ', ' in ', '.', 'Regarding the TypeScript compiler version, only the latest TypeScript is tested in development.', ""Run-time performance is not the only reason to use MessagePack, but it's important to choose MessagePack libraries, so a benchmark suite is provided to monitor the performance of this library."", ""V8's built-in JSON has been improved for years, esp. "", ' is ', ', it is the fastest deserializer as of 2019, as the benchmark result bellow suggests.', ""However, MessagePack can handles binary data effectively, actual performance depends on situations. You'd better take benchmark on your own use-case if performance matters."", 'Benchmark on NodeJS/v18.1.0 (V8/10.1)', 'Note that ', ' cases use ', ' to emulate I/O where a JavaScript string must be converted into a byte array encoded in UTF-8, whereas MessagePack modules deal with byte arrays.', 'The NPM package distributed in npmjs.com includes both ES2015+ and ES5 files:', 'If you use NodeJS and/or webpack, their module resolvers use the suitable one automatically.', 'This library is available via CDN:', 'It loads ', ' module to the global object.', 'You can use this module on Deno.', 'See ', ' for examples.', ' is not supported yet.', 'For simple testing:', 'This library uses Travis CI.', 'test matrix:', 'See ', ' and ', ' for details.', 'Copyright 2019 The MessagePack community.', 'This software uses the ISC license:', 'See ', ' for details.', 'Ultra-fast MessagePack for NodeJS & Browsers.', 'MIT | @davalapar', 'Optional Retrofit support:', ""This is a Kotilin implementation of MessagePack serialization and deserialization built ontop of Moshi to take advantage of Moshi's type adapters and utilizes okio for reading and writing MessagePack bytes."", 'The library is intended to be consumed in a Kotlin project, and is not intended for Java use.', ""Inspired by Kaushik Gopal's "", 'See ', ' for adapter usage and reference.', 'This prints the MessagePack bytes as a hex string ', 'If you prefer to not instantiate a ', ' instance you can access the API in a static fashion as well. Note this will create a new ', "" instance every time you make an API call. You may want to use the API this way if you aren't providing "", ' by some form of dependency injection and you do not have any specific builder parameters for ', 'See ', ' for further reference.', 'Serializes an object into MessagePack. ', ' ', 'Instance version:', 'Static version:', 'If you prefer to get a ', ' instead of a ', ' you can use this method.', 'Instance version only', 'Static can be done', 'Deserializes MessagePack bytes into an Object. ', ' ', '\nWorks with ', ' and ', 'Instance version:', 'Static version:', 'Instance version:', 'Static version:', 'T can be an Object, a List, a Map, and can include generics. Unlike ', ' you do not need to specify a parameterized type to deserialize to a List with generics. ', ' can infer the paramterized type for you.', 'The following examples are valid for ', ':', 'A typed List', 'A List of Any', 'An Object', 'A Map of Any, Any', 'Convert directly from MessagePack bytes to JSON. Use this method for the most effecient implementation as no objects are instantiated in the process. This uses the ', ' class to match implementations of ', ' and a ', "". If you wanted to say support XML as a direct conversion to and from, you could implement Moshi's "", ' and ', ' classes and use the ', ' class to convert directly to other formats. ', ' ', ' containing a JSON representation of the MessagePack data', 'Instance versions: (takes ', ' or ', ')', 'Static versions: (takes ', ' or ', ')', 'Convert directly from JSON to MessagePack bytes. Use this method for the most effecient implementation as no objects are instantiated in the process. ', ' ', 'Instance versions: (takes ', ' or ', ')', 'Static versions: (takes ', ' or ', ')', 'The ', ' constructor takes an optional ', ' lambda which is applied to the builder that is used to instantiate the ', ' instance it uses.', 'Example adding custom adapter:', ' is also a settable property which can be changed on a ', ' instance:', 'The static version of the API also can be passed a lambda to applied to the ', ' used to instantiate ', ':', 'This will force all integers to be packed as the type given.\nBy default the smallest message pack type is used for integers.', 'Since this library is intended for Kotlin use, the ', ' artifact is included as a depedency. A ', ' is added by default to the instantiated ', ' that ', ' uses.\nThis adapter allows for the use of ', ""'s annotaions in Kotlin. To learn more about it see the "", ' documentation.', ""If you'd like to use "", ' with out a ', ' supply a ', ' instance for ', ':', 'From ', ""'s README.md;\nIf you are using ProGuard you might need to add the following options:"", 'An example of using the retorfit adapter can be found here:\n', ' is an efficient binary serialization format.', ""It lets you exchange data among multiple languages like JSON but it's faster and smaller."", ""It's a pure Lua implementation, without dependency."", ""And it's really fast with "", '.', 'The homepage is at ', ',\nand the sources are hosted at ', '.', 'Copyright (c) 2012-2013 Francois Perrad', 'This library is licensed under the terms of the MIT/X11 license, like Lua itself.', 'This is a pure Lua implementation for encoding/decoding MessagePack (', ').', 'Please report any bugs you encounter!', 'Features:', ""What's missing:"", 'Example code:', 'Encodes the given Lua value to a binary MessagePack representation. It will return the binary string on succes or ', ' plus an error message if it fails.', 'The encoder will encode Lua strings as MessagePack strings when they are properly UTF-8 encoded otherwise they will become MessagePack binary objects.', 'There is also a check if a Lua number can be lossless encoded as a 32-bit float.', ' Empty Lua tables will be encoded as empty arrays!', 'Encodes all given values to a binary MessagePack representation. It will return the binary string or ', ' plus an error message if it fails.', 'Decode the given MessagePack binary string to a corresponding Lua value. It will return the decoded Lua value and the position for next byte in stream\nor ', ' plus an error message if decoding went wrong. You can use the returned position to decode multiple MessagePack values in a stream.', 'The optional position argument is used to start the decoding at a specific position inside the the binary_data string.', ' Extended types are not supported. Decoding will fail!', ' Binary data will be decoded as Lua strings', ' Arrays will be decoded as Lua tables starting with index 1 (like Lua uses tables as arrays)', ' Values which are ', "" will cause the key, value pair to disappear in a Lua table (that's how it works in Lua)"", 'Decode the given MessagePack binary string to one or more Lua values. It will return all decoded Lua values or ', ' plus an error message if decoding failed.', 'The code is written in pure Matlab, and has no dependencies beyond Matlab itself. And it works in recent versions of Octave, too.', 'The files in this repository are taken from ', '.', 'There is no way of encoding exts', 'Note that since ', "" don't support arbitrary field names, they can't be used for representing "", '. We use ', ' instead.', 'MATLAB (R) is copyright of the Mathworks', 'Copyright (c) 2014 Bastian Bechtold\nAll rights reserved.', 'Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:', 'Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.', 'Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the\ndistribution.', 'Neither the name of the copyright holder nor the names of its\ncontributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.', 'THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.', 'I will start this project once Nim compiler reaches 1.0', 'A MessagePack binding for Nim', 'API: ', ""msgpack-nim currently provides only the basic functionality.\nPlease see what's listed in Todo section. Compared to other language bindings, it's well-tested by\n1000 auto-generated test cases by Haskell QuickCheck, which always runs\non every commit to Github repository. Please try "", ' on your local machine\nto see what happens (It will take a bit while. Be patient). Have a nice packing!', 'Akira Hayakawa (', ')', ' implementation written in pure nim', 'I am fully aware of ', "" msgpack implementation written in nim.\nBut I want something easier to use. Another motivation come from the nim language itself.\nThe current version of nim compiler offer many improvements, including 'generics ' specialization.\nI found out nim compiler is smart enough to make serialization/deserialization to/from msgpack easy and convenient."", ' nim ver 0.18.1 or later', '\n', '\n', '\n', ""see? you only need to call 'pack' and 'unpack', and the compiler do the hard work for you. Very easy, convenient, and works well"", 'if you think setting up a MsgStream too much for you, you can simply call pack(yourobject) and it will return a string containing msgpack data.', 'in case the compiler cannot decide how to serialize or deserialize your very very complex object, you can help it in easy way\nby defining your own handler pack_type/unpack_type', ""If distinct types encountered, it will be converted back to it's base type.\nIf you don't like this behavior, since version 0.2.9 msgpack4nim allow you\nto override this default behavior by supplying your own implementation of\n"", ' and ', '.', 'object and tuple by default converted to msgpack array, however\nyou can tell the compiler to convert it to map by supplying --define:msgpack_obj_to_map', 'or --define:msgpack_obj_to_stream to convert object/tuple fields ', ' into stream of msgpack objects', 'What this means? It means by default, each object/tuple will be converted to one ', ' contains\nfield(s) value only without their field(s) name.', 'If you specify that the object/tuple will be converted to ', ', then each object/tuple will be\nconverted to one ', ' contains key-value pairs. The key will be field name, and the value will be field value.', ""If you specify that the object/tuple will be converted to msgpack stream, then each object/tuple will be converted\ninto one or more msgpack's type for each object's field and then the resulted stream will be concatenated\nto the msgpack stream buffer."", 'Which one should I use?', 'Usually, other msgpack libraries out there convert object/tuple/record/struct or whatever structured data supported by\nthe language into ', ', but always make sure to consult the documentation first.\nIf both of the serializer and deserializer agreed to one convention, then usually there will be no problem.\nNo matter which library/language you use, you can exchange msgpack data among them.', 'since version 0.2.4, you can set encoding mode at runtime to choose which encoding you would like to perform', 'note: the runtime encoding mode only available if you use MsgStream, otherwise only compile time flag available', ' :', ':\naltough detecting circular reference is not too difficult(using set of pointers),\nthe current implementation does not provide circular reference detection.\nIf you pack something contains circular reference, you know something bad will happened', ':\nFor objects their type is ', ' serialized.\nThis means essentially that it does not work if the object has some other runtime type than its compiletime type:', 'these types will be ignored:', 'these types cannot be automatically pack/unpacked:', 'however, you can provide your own handler for cstring and pointer', '\nbecause data conversion did not preserve original data types(only partial preservation),\nthe following code is perfectly valid and will raise no exception', 'another gotcha:', 'this implementation provide function to encode/decode msgpack bin/ext format header,\nbut for the body, you must write it yourself or read it yourself to/from the MsgStream', 'you can convert msgpack data to readable string using stringify function', 'the result will be:', ' takes a string of msgpack data or a stream, then it will produce ', ""\nwhich you can interrogate of it's  type and value during runtime by accessing it's member "", ' recognize all valid msgpack message and translate it into a group of types:', 'for example, ', ' is a ', ' data with content [1, ""hello"", {""a"": ""b""}], you can interrogate it like this:', 'since version 0.2.1, toAny was put into separate module ', ',\nit has functionality similar with json, with support of msgpack bin and ext natively', 'msgpack2any also support pretty printing similar with json pretty printing.', 'Primary usage for msgpack2any is to provide higher level API while dynamically querying underlying msgpack data at runtime.\nCurrently, msgpack2any decode all msgpack stream at once. There are room for improvements such as progressive decoding at\nruntime, or selective decoding at runtime. Both of this improvements are not implemented, yet they are important for applications\nthat need for finer control over decoding step.', 'Start version 0.2.0, msgpack4nim receive additional family member, ', ' module.\nIt consists of ', ' and ', "" to interact with stdlib's json module."", 'nimble install msgpack4nim', 'If an object can be represented in multiple possible output formats,\nserializers SHOULD use the format which represents the data in the smallest number of bytes.', 'According to the spec, the serializer should use smallest number of bytes, and this behavior\nis implemented in msgpack4nim. Therefore, some valid encoding would never produced by msgpack4nim.', 'For example: although 0xcdff00 and 0xceff000000 encoding is valid according to the spec which is decoded into positive integer 255,\nmsgpack4nim never produce it, because the internal algorithm will select the smallest number of bytes needed, which is 0xccff.', 'However, if msgpack4nim received encoded streams from other msgpack library contains those longer than needed sequence, as long as\nit conforms to the spec, msgpack4nim will happily decoded it and convert it to the destination storage(variable) type.', 'Other msgpack library who consume msgpack4nim stream, will also decode it properly, although they might not produce smallest number\nof bytes required.', 'enjoy it, happy nim-ing', 'A msgpack v5 implementation for node.js and the browser, with extension point support.', 'This library is compatible with ', '.', 'If you want to use standalone, grab the file in the ', ' folder of\nthis repo, and use in your own HTML page, the module will expose a\n', ' global.', 'Creates a new instance on which you can register new types for being\nencoded.', 'options:', 'Encodes ', ' in msgpack, returns a ', '.', 'Decodes buf from in msgpack. ', ' can be a ', ' or a ', ' instance.', 'In order to support a stream interface, a user must pass in a ', ' instance.', 'Register a new custom object type for being automatically encoded.\nThe arguments are:', 'Register a new custom object type for being automatically decoded.\nThe arguments are:', 'Register a new custom object type for being automatically encoded and\ndecoded. The arguments are:', 'This is just a commodity that calls\n', ' and\n', ' internally.', 'Builds a stream in object mode that encodes msgpack.', 'Supported options:', 'Builds a stream in object mode that decodes msgpack.', 'Supported options:', ' can be used as a LevelUp\n', ' straight away:', 'This library is built fully on JS and on ', ' to\nsimplify the code. Every improvement that keeps the same API is welcome.', 'This project was kindly sponsored by ', '.', 'This library was originally built as the data format for\n', '.', 'MIT', '\n', '\n', '\n', 'An implementation of ', ' middleware for ', '.', 'With auto-detection and transformation enabled, the middleware detects automatically the HTTP header ', ' and piggybacks the ', ' method of the ExpressJS API, to encode the JSON response as Message Pack. This method is useful when you have existing applications that need to use the middleware, without changing the codebase very much.', 'Note: Remember to add the header ', ' in the request.', 'Also, it can have auto-detection and transformation disabled. The middleware extends the ', ' object of the ExpressJS framework, by adding the ', ' method to it. Then to return an encoded response, you just use the ', ' method that accepts the Javascript object as a parameter. For example,', 'Note: Initialize the middleware before the actual routes in the middleware chain to properly extend the ', ' Object.', 'Node.js >= 6.0', 'With ', ' do:', 'I ', ' open source software!', 'Check out my other ', ' or say ', ' on ', '.', 'Contributions are welcome ', '. Please see the ', ' and the ', '.', 'See also the list of ', ' who participated in this project.', 'msgpack-response is available under the MIT license. See the ', ' file for more info.', 'See also, ', 'Setup development enviroment with docker:', 'If you want to use msgpack at OCaml, you need not do this section.\nThis section for user intrested in formal verification.', 'You need Coq 8.4 and omake.', 'Or via ', '.', 'If you need to use an ordered dictionary.', 'This extension provides an API for communicating with MessagePack serialization.', 'MessagePack is a binary-based efficient object serialization library.\nIt enables to exchange structured objects between many languages just like JSON.\nBut unlike JSON, it is very fast and small.', 'Msgpack is an PECL extension, thus you can simply install it by:', '\n', '\n', 'A pure PHP implementation of the ', ' serialization format.', 'The recommended way to install the library is through ', ':', 'To pack values you can either use an instance of a ', ':', 'or call a static method on the ', ' class:', 'In the examples above, the method ', ' automatically packs a value depending on its type. However, not all PHP types\ncan be uniquely translated to MessagePack types. For example, the MessagePack format defines ', ' and ', ' types,\nwhich are represented by a single ', ' type in PHP. By default, the packer will pack a PHP array as a MessagePack\narray if it has sequential numeric keys, starting from ', ' and as a MessagePack map otherwise:', 'However, sometimes you need to pack a sequential array as a MessagePack map.\nTo do this, use the ', ' method:', 'Here is a list of type-specific packing methods:', 'The ', ' object supports a number of bitmask-based options for fine-tuning\nthe packing process (defaults are in bold):', 'Examples:', 'To unpack data you can either use an instance of a ', ':', 'or call a static method on the ', ' class:', 'If the packed data is received in chunks (e.g. when reading from a stream), use the ', ' method, which attempts\nto unpack data and returns an array of unpacked messages (if any) instead of throwing an ', ':', 'If you want to unpack from a specific position in a buffer, use ', ':', 'To skip bytes from the current position, use ', ':', 'To get the number of remaining (unread) bytes in the buffer:', 'To check whether the buffer has unread data:', 'If needed, you can remove already read data from the buffer by calling:', 'With the ', ' method you can read raw (packed) data:', 'Besides the above methods ', ' provides type-specific unpacking methods, namely:', 'The ', ' object supports a number of bitmask-based options for fine-tuning\nthe unpacking process (defaults are in bold):', 'Examples:', 'In addition to the ', "", the library\nprovides functionality to serialize and deserialize arbitrary types. This can be done in several ways, depending\non your use case. Let's take a look at them."", 'If you need to ', ' an instance of one of your classes into one of the basic MessagePack types, the best way\nto do this is to implement the ', ' interface in the class. A good example of such\na class is the ', ' type class that comes with the library. This type is useful when you want to explicitly specify\nthat a given PHP array should be packed as a MessagePack map without triggering an automatic type detection routine:', 'As with type objects, type transformers are only responsible for ', ' values. They should be\nused when you need to serialize a value that does not implement the ', ""\ninterface. Examples of such values could be instances of built-in or third-party classes that you don't\nown, or non-objects such as resources."", 'A transformer class must implement the ', ' interface. To use a transformer,\nit must first be registered in the packer. Here is an example of how to serialize PHP streams into\nthe MessagePack ', ' format type using one of the supplied transformers, ', ':', 'In contrast to the cases described above, extensions are intended to handle\n', '\nand are responsible for both ', ' and ', ' of values (types).', 'An extension class must implement the ', ' interface. To use an extension,\nit must first be registered in the packer and the unpacker.', 'The MessagePack specification divides extension types into two groups: ', ' and ', '.\nCurrently, there is only one predefined type in the specification, Timestamp.', 'The Timestamp extension type is a ', '\ntype. Support for this type in the library is done through the ', ' class. This class is responsible\nfor handling ', ' objects, which represent the number of seconds and optional adjustment in nanoseconds:', 'When using the ', ' class, the Timestamp extension is already registered:', 'In addition, the format can be extended with your own types. For example, to make the built-in PHP ', ' objects\nfirst-class citizens in your code, you can create a corresponding extension, as shown in the ', '.\nPlease note, that custom extensions have to be registered with a unique extension ID (an integer from ', ' to ', ').', 'If an error occurs during packing/unpacking, a ', ' or an ', '\nwill be thrown, respectively. In addition, an ', ' can be thrown during unpacking.', 'An ', ' will be thrown in case an invalid option (or a combination of mutually\nexclusive options) is used.', 'Run tests as follows:', 'Also, if you already have Docker installed, you can run the tests in a docker container. First, create a container:', 'The command above will create a container named ', ' with PHP 8.1 runtime. You may change the default runtime\nby defining the ', ' environment variable:', 'Then run the unit tests:', 'To ensure that the unpacking works correctly with malformed/semi-malformed data, you can use a testing technique\ncalled ', '. The library ships with a help file (target)\nfor ', ' and can be used as follows:', 'To check performance, run:', 'You may change default benchmark settings by defining the following environment\nvariables:', 'For example:', 'Another example, benchmarking both the library and the ', ':', 'The library is released under the MIT License. See the bundled ', ' file for details.', ""It's like JSON but small and fast."", 'first release\n2014-08-15 13:05:13', 'add array support\n2014-08-19 12:18:47', 'add andriod support\n2014-09-08 00:45:27', 'fix  asVariant = null (thanks for cyw(26890954))\n2014-11-14 09:05:52', 'fix AsInteger = -1 bug (thanks for cyw(26890954))\n2014-11-14 12:15:52', 'fix AsInteger = -127 bug\ncheck int64/integer/cardinal/word/shortint/smallint/byte assign, encode,decode, read\n2014-11-14 12:30:38', 'fix AsFloat = 2.507182 bug\nthanks fo [珠海]-芒果  1939331207\n2014-11-21 12:37:04', 'add AddArrayChild func\n2015-03-25 17:47:28', 'add remove/removeFromParent/Delete function\n2015-08-29 22:37:48', 'Data::MessagePack - MessagePack serializing/deserializing', 'This module converts Perl data structures to MessagePack and vice versa.', 'MessagePack is a binary-based efficient object serialization format.\nIt enables to exchange structured objects between many languages like\nJSON.  But unlike JSON, it is very fast and small.', 'PORTABLE', 'The MessagePack format does not depend on language nor byte order.', 'SMALL IN SIZE', 'The MessagePack format saves memory than JSON and Storable format.', 'STREAMING DESERIALIZER', 'MessagePack supports streaming deserializer. It is useful for\nnetworking such as RPC.  See ', ' for\ndetails.', 'If you want to get more information about the MessagePack format,\nplease visit to ', '.', 'Pack the $data to messagepack format string.', 'This method throws an exception when the perl structure is nested more\nthan $max_depth levels(default: 512) in order to detect circular\nreferences.', 'Data::MessagePack->pack() throws an exception when encountering a\nblessed perl object, because MessagePack is a language-independent\nformat.', 'unpack the $msgpackstr to a MessagePack format string.', 'Creates a new MessagePack instance.', 'If ', ' is true (or missing), then the ', ' method tries a\nstring as an integer if the string looks like an integer.', 'If ', ' is true (or missing), then the ', ' method will output\npacked data by sorting their keys. This is adding a comparatively high\noverhead.', 'If ', ' is true (or missing), then the ', ' method will\napply ', ' to all the string values.', 'In other words, this property tell ', ' to deal with ', '.\nSee ', ' for the meaning of ', '.', 'Same as ', ', but properties are respected.', 'Same as ', ', but properties are respected.', '$Data::MessagePack::PreferInteger', 'Packs a string as an integer, when it looks like an integer.', 'This variable is ', '.\nUse ', ' property instead.', 'This is a result of ', ' and ', '\non my SC440(Linux 2.6.32-23-server #37-Ubuntu SMP).\n(You should benchmark them with ', ' data if the speed matters, of course.)', 'This module can unpack 64 bit integers even if your perl does not support them\n(i.e. where ', ' is 4), but you cannot calculate these values\nunless you use ', '.', 'Error handling', 'MessagePack cannot deal with complex scalars such as object references,\nfilehandles, and code references. We should report the errors more kindly.', 'Streaming deserializer', 'The current implementation of the streaming deserializer does not have internal\nbuffers while some other bindings (such as Ruby binding) does. This limitation\nwill astonish those who try to unpack byte streams with an arbitrary buffer size\n(e.g. ', ').\nWe should implement the internal buffer for the unpacker.', 'Why does Data::MessagePack have pure perl implementations?', 'msgpack C library uses C99 feature, VC++6 does not support C99. So pure perl version is needed for VC++ users.', 'Tokuhiro Matsuno', 'Makamaka Hannyaharamitu', 'gfx', 'Jun Kuriyama', 'Dan Kogai', 'FURUHASHI Sadayuki', 'hanekomu', 'Kazuho Oku', 'syohex', 'This library is free software; you can redistribute it and/or modify\nit under the same terms as Perl itself.', ' is the official web site for the  MessagePack format.', 'Data::MessagePack - Perl 6 implementation of MessagePack', 'Or for streaming:', 'The present module proposes an implemetation of the MessagePack specification as described on ', '. The implementation is now in Pure Perl which could come as a performance penalty opposed to some other packer implemented in C.', 'There are already some part of MessagePack implemented in Perl6, with for instance MessagePack available here: ', ', however that module only implements the unpacking part of the specification. Futhermore, that module uses the unpack functionality which is tagged as experimental as of today', 'That function takes a data structure as parameter, and returns a Blob with the packed version of the data structure.', 'That function takes a MessagePack packed message as parameter, and returns the deserialized data structure.', 'Pierre VIGIER', 'Timo Paulssen', 'Artistic License 2.0', 'A pure Pony implementation of the ', '.', 'msgpack is currently beta software. It implements a low-level API for encoding and decoding data. Still to do:', 'MessagePack implementation for PostgreSQL written in PL/pgSQL.', 'Execute ', ' or/and ', ' on your database server.', 'Encodes ', ' object into ', ' string.', 'Decodes ', ' object from ', ' string.', 'Development is sponsored by ', '.', 'Copyright (c) 2017 Patrik Simek', 'The MIT License', 'Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:', 'The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.', 'THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', '\n', "" is an efficient binary serialization format.\nIt lets you exchange data among multiple languages like JSON.\nBut it's faster and smaller.\nThis package provides CPython bindings for reading and writing MessagePack data."", 'Package name on PyPI was changed from ', ' to ', ' from 0.5.', 'When upgrading from msgpack-0.4 or earlier, do ', ' before\n', '.', 'You can use ', ' option to pack ', '\nobject into raw type in the old msgpack spec, instead of bin type in new msgpack spec.', 'You can unpack old msgpack format using ', ' option.\nIt unpacks str (raw) type in msgpack into Python bytes.', 'See note below for detail.', 'Python 2', 'Packer', 'Unpacker', 'The extension module in msgpack (', ') does not support\nPython 2 and PyPy.', 'But msgpack provides a pure Python implementation (', ')\nfor PyPy and Python 2.', ""When you can't use a binary distribution, you need to install Visual Studio\nor Windows SDK on Windows.\nWithout extension, using pure Python implementation on CPython runs slowly."", 'NOTE: In examples below, I use ', ' and ', ' for users\nusing msgpack < 1.0. These options are default from msgpack 1.0 so you can omit them.', 'Use ', ' for packing and ', ' for unpacking.\nmsgpack provides ', ' and ', ' as an alias for compatibility with\n', ' and ', '.', ' and ', ' packs to a file-like object.\n', ' and ', ' unpacks from a file-like object.', "" unpacks msgpack's array to Python's list, but can also unpack to tuple:"", 'You should always specify the ', ' keyword argument for backward compatibility.\nSee performance issues relating to ', '_ below.', 'Read the docstring for other options.', ' is a ""streaming unpacker"". It unpacks multiple objects from one\nstream (or from bytes provided through its ', ' method).', 'It is also possible to pack/unpack custom data types. Here is an example for\n', '.', ""'s "", ' callback receives a dict; the\n', ' callback may instead be used to receive a list of\nkey-value pairs.', 'It is also possible to pack/unpack custom data types using the ', ' type.', 'As an alternative to iteration, ', ' objects provide ', ',\n', ', ', ' and ', ' methods. The former two\nread an entire message from the stream, respectively de-serialising and returning\nthe result, or ignoring it. The latter two methods return the number of elements\nin the upcoming container, so that each element in an array, or key-value pair\nin a map, can be unpacked or skipped individually.', ""Early versions of msgpack didn't distinguish string and binary types.\nThe type for representing both string and binary types was named "", '.', 'You can pack into and unpack from this old spec using ', '\nand ', ' options.', 'To use the ', ' type, pass ', ' object to packer.', 'You can use it with ', ' and ', '. See below.', 'To unpacking data received from unreliable source, msgpack provides\ntwo security options.', ' (default: ', ') limits the internal buffer size.\nIt is used to limit the preallocated list size too.', ' (default: ', "") limits the type of map keys to bytes and str.\nWhile msgpack spec doesn't limit the types of the map keys,\nthere is a risk of the hashdos.\nIf you need to support other types for map keys, use "", '.', ""CPython's GC starts when growing allocated object.\nThis means unpacking may cause useless GC.\nYou can use "", ' when unpacking large message.', 'List is the default sequence type of Python.\nBut tuple is lighter than list.\nYou can use ', ' while unpacking when performance is important.', 'u-msgpack-python is a lightweight ', ' serializer and deserializer module written in pure Python, compatible with both Python 2 and 3, as well CPython and PyPy implementations of Python. u-msgpack-python is fully compliant with the latest ', '.', 'u-msgpack-python is currently distributed on PyPI: ', ' and as a single file: ', 'With pip:', 'With easy_install:', 'or simply drop ', ' into your project!', 'Basic Example:', 'A more complicated example:', 'Streaming serialization with file-like objects:', 'Serializing and deserializing a raw Ext type:', 'Serializing and deserializing application-defined types with ', ':', 'Serializing and deserializing application-defined types with Ext handlers:', 'Python standard library style names ', ', ', ', ', ', ', ' are also\navailable:', 'See the ', ' for more information on options, exceptions, behavior, and testing.', 'u-msgpack-python is MIT licensed. See the included ', ' file for more details.', '\n', 'ormsgpack is a fast msgpack library for Python. It is a fork/reboot of ', '\nIt serializes faster than ', ' and deserializes a bit slower (right now).\nIt supports serialization of:\n', ',\n', ',\n', ',\n', ' and\n', ' instances natively.', 'Its features and drawbacks compared to other Python msgpack libraries:', 'ormsgpack supports CPython 3.6, 3.7, 3.8, 3.9, and 3.10. ormsgpack does not support PyPy. Releases follow semantic\nversioning and serializing a new object type without an opt-in flag is\nconsidered a breaking change.', 'ormsgpack is licensed under both the Apache 2.0 and MIT licenses. The\nrepository and issue tracker is\n', ', and patches may be\nsubmitted there. There is a\n', '\navailable in the repository.', 'To install a wheel from PyPI:', 'Notice that Linux environments with a ', ' version shipped in 2018 or earlier\nmust first upgrade ', ' to support ', ' wheels.', 'To build a wheel, see ', '.', 'This is an example of serializing, with options specified, and deserializing:', ' serializes Python objects to msgpack.', 'It natively serializes\n', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ',\n', ', ', ', ', ',\n', ', ', ', ', ', ', ', and\n', ' instances. It supports arbitrary types through ', '. It\nserializes subclasses of ', ', ', ', ', ', ', ',\n', ', and ', '. It does not serialize subclasses\nof ', ' to avoid serializing ', ' objects as arrays. To avoid\nserializing subclasses, specify the option ', '.', 'The output is a ', ' object containing UTF-8.', 'The global interpreter lock (GIL) is held for the duration of the call.', 'It raises ', ' on an unsupported type. This exception message\ndescribes the invalid object with the error message\n', '. To fix this, specify\n', '.', 'It raises ', ' on a ', ' that contains invalid UTF-8.', 'It raises ', ' if a ', ' has a key of a type other than ', ' or ', ',\nunless ', ' is specified.', 'It raises ', ' if the output of ', ' recurses to handling by\n', ' more than 254 levels deep.', 'It raises ', ' on circular references.', 'It raises ', '  if a ', ' on a datetime object is\nunsupported.', ' is a subclass of ', '. This is for compatibility\nwith the standard library.', 'To serialize a subclass or arbitrary types, specify ', ' as a\ncallable that returns a supported type. ', ' may be a function,\nlambda, or callable class instance. To specify that a type was not\nhandled by ', ', raise an exception such as ', '.', 'The ', ' callable may return an object that itself\nmust be handled by ', ' up to 254 times before an exception\nis raised.', 'It is important that ', ' raise an exception if a type cannot be handled.\nPython otherwise implicitly returns ', ', which appears to the caller\nlike a legitimate value and is serialized:', 'To modify how data is serialized, specify ', '. Each ', ' is an integer\nconstant in ', '. To specify multiple options, mask them together, e.g.,\n', '.', 'Serialize ', ' objects without a ', ' as UTC. This\nhas no effect on ', ' objects that have ', ' set.', 'Serialize ', ' keys of type other than ', '. This allows ', ' keys\nto be one of ', ', ', ', ', ', ', ', ', ', ', ',\n', ', ', ', ', ', and ', '. For comparison,\nthe standard library serializes ', ', ', ', ', ', ', ' or ', ' by\ndefault.', 'These types are generally serialized how they would be as\nvalues, e.g., ', ' is still an RFC 3339 string and respects\noptions affecting it.', 'This option has the risk of creating duplicate keys. This is because non-', '\nobjects may serialize to the same ', ' as an existing key, e.g.,\n', '.\nThe last key to be inserted to the ', ' will be serialized last and a msgpack deserializer will presumably take the last\noccurrence of a key (in the above, ', '). The first value will be lost.', 'Do not serialize the ', ' field on ', ' and\n', ' instances.', 'Enables passthrough of big (Python) ints. By setting this option, one can set a ', ' function for ints larger than 63 bits, smaller ints are still serialized efficiently.', 'Passthrough ', ' instances to ', '. This allows\ncustomizing their output but is much slower.', 'Passthrough ', ', ', ', and ', ' instances\nto ', '. This allows serializing datetimes to a custom format, e.g.,\nHTTP dates:', 'This does not affect datetimes in ', ' keys if using OPT_NON_STR_KEYS.', 'Passthrough subclasses of builtin types to ', '.', 'This does not affect serializing subclasses as ', ' keys if using\nOPT_NON_STR_KEYS.', 'Passthrough tuples to ', '.', 'Serialize ', ' instances. For more, see\n', '.', 'Serialize ', ' instances. Right now it ignores the config (str transformations), support might be added\nlater.', 'Serialize a UTC timezone on ', ' instances as ', ' instead\nof ', '.', ' deserializes msgpack to Python objects. It deserializes to ', ',\n', ', ', ', ', ', ', ', ', ', ', ' and ', ' objects.', ', ', ', ', ' input are accepted.', 'ormsgpack maintains a cache of map keys for the duration of the process. This\ncauses a net reduction in memory usage by avoiding duplicate strings. The\nkeys must be at most 64 bytes to be cached and 512 entries are stored.', 'The global interpreter lock (GIL) is held for the duration of the call.', 'It raises ', ' if given an invalid type or invalid\nmsgpack.', ' is a subclass of ', '.', ' supports the ', "" option, that is similar to original msgpack's "", '.\nBe aware that this option is considered unsafe and disabled by default in msgpack due to possibility of HashDoS.', 'ormsgpack serializes instances of ', ' natively. It serializes\ninstances 40-50x as fast as other libraries and avoids a severe slowdown seen\nin other libraries compared to serializing ', '.', 'It is supported to pass all variants of dataclasses, including dataclasses\nusing ', ', frozen dataclasses, those with optional or default\nattributes, and subclasses. There is a performance benefit to not\nusing ', '.', 'Dataclasses are serialized as maps, with every attribute serialized and in\nthe order given on class definition:', 'Users may wish to control how dataclass instances are serialized, e.g.,\nto not serialize an attribute or to change the name of an\nattribute when serialized. ormsgpack may implement support using the\nmetadata mapping on ', ' attributes,\ne.g., ', ', if use cases are clear.', 'ormsgpack serializes ', ' objects to\n', ' format,\ne.g., ""1970-01-01T00:00:00+00:00"". This is a subset of ISO 8601 and\ncompatible with ', ' in the standard library.', ' supports instances with a ', ' that is ', ',\n', ', a timezone instance from the python3.9+ ', '\nmodule, or a timezone instance from the third-party ', ', ', ', or\n', '/', ' libraries.', ' objects must not have a ', '.', ' objects will always serialize.', 'Errors with ', ' result in ', ' being raised.', 'It is faster to have ormsgpack serialize datetime objects than to do so\nbefore calling ', '. If using an unsupported type such as\n', ', use ', '.', 'To disable serialization of ', ' objects specify the option\n', '.', 'To use ""Z"" suffix instead of ""+00:00"" to indicate UTC (""Zulu"") time, use the option\n', '.', 'To assume datetimes without timezone are UTC, se the option ', '.', 'ormsgpack serializes enums natively. Options apply to their values.', 'Enums with members that are not supported types can be serialized using\n', ':', 'ormsgpack serializes and deserializes double precision floats with no loss of\nprecision and consistent rounding.', ""ormsgpack serializes and deserializes 64-bit integers by default. The range\nsupported is a signed 64-bit integer's minimum (-9223372036854775807) to\nan unsigned 64-bit integer's maximum (18446744073709551615)."", 'ormsgpack natively serializes ', ' and individual ', ',\n', ', ', ', ', ', ', ', ', ',\n', ', and ', ' instances. Arrays may have a\n', ' of ', ', ', ', ', ', ', ',\n', ', ', ', ', ', ', ', or ', '.\normsgpack is faster than all compared libraries at serializing\nnumpy instances. Serializing numpy data requires specifying\n', '.', 'The array must be a contiguous C array (', ') and one of the\nsupported datatypes.', 'If an array is not a contiguous C array or contains an supported datatype,\normsgpack falls through to ', '. In ', ', ', ' can be\nspecified. If an array is malformed, which is not expected,\n', ' is raised.', '\n', '\n', '\n', '\n', 'ormsgpack serializes ', ' instances to\n', ' format, e.g.,\n""f81d4fae-7dec-11d0-a765-00a0c91e6bf6"".', '\normsgpack serializes ', ' instances natively. Currently it ignores ', '.', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'The above was measured using Python 3.7.9 on Azure Linux VM (x86_64) with ormsgpack 0.2.1 and msgpack 1.0.2.', 'The latency results can be reproduced using ', ' and graphs using\n', '.', 'Probably ', ' needs to be upgraded to version 20.3 or later to support\nthe latest manylinux_x_y or universal2 wheel formats.', 'No. This requires a schema specifying what types are expected and how to\nhandle errors etc. This is addressed by data validation libraries a\nlevel above this.', 'If someone implements it well.', 'To package ormsgpack requires ', ' on the\nnightly channel and the ', '\nbuild tool. maturin can be installed from PyPI or packaged as\nwell. This is the simplest and recommended way of installing\nfrom source, assuming ', ' is available from a\npackage manager:', 'This is an example of building a wheel using the repository as source,\n', ' installed from upstream, and a pinned version of Rust:', 'Problems with the Rust nightly channel may require pinning a version.\n', ' is known to be ok.', 'ormsgpack is tested for amd64 and aarch64 on Linux, macOS, and Windows. It\nmay not work on 32-bit targets. It has recommended ', '\nspecified in ', ' so it is recommended to either not set\n', ' or include these options.', 'There are no runtime dependencies other than libc.', 'orjson was written by ijl <', '>, copyright 2018 - 2021, licensed\nunder both the Apache 2 and MIT licenses.', 'ormsgpack was forked from orjson and is maintained by Aviram Hassan <', '>, licensed\nsame as orjson.', 'For the latest source code, see ', ' is a library for writing asynchronous\n', '\nservers and clients in Python, using ', '. Library is based on\n', ', but some\nimprovements and fixes were made.', 'To use UNIX sockets with Python 3 please use Twisted framework 15.3.0 and above.', ""Debian packages are available on project's "", '.', 'Computation of PI using Chudnovsky algorithm in subprocess. For details,\nsee ', '.', 'Example servers join to group 224.0.0.5 and listen on port 8000. Their only\nmethod ', ' returns its parameter.', 'Client joins group to 224.0.0.5, sends multicast request to group on port 8000\nand waits for 5 seconds for responses. If some responses are received,\nprotocol callbacks with tuple of results and individual parts are checked for\nerrors. If no responses are received, protocol errbacks with TimeoutError.', 'Because there is no common way to determine number of peers in group,\nMsgpackMulticastDatagramProtocol always wait for responses until waitTimeout\nexpires.', 'Full documentation is here ', 'Clone repository:', 'Packing', 'Unpacking:', 'Streaming API:', 'There is packers and unpackers for QColor, QTime, QDate, QDateTime, QPoint, QSize, QRect. Also you can create your own packer/unpacker methods for Qt or your own types. See ', ' for details.', 'Convert to and from msgpack objects in R using the official msgpack-c API through Rcpp.', '\n', 'Msgpack EXT types are converted to raw vectors with EXT attributes containing the extension type.  The extension type must be an integer from 0 to 127.', 'Maps are converted to data.frames with additional class ""map"".  Map objects in R contain key and value list columns and can be simplified to named lists or named vectors.  The helper function ', ' creates map objects that can be serialized into msgpack.', 'For more information on msgpack types, see ', '.', 'See ', ' for more examples.', 'The Rails way to serialize/deserialize objects with ', '.\nIt implements the ', ' ', ' & ', ' and the ', ' ', ' for Message Pack.', ""Add this line to your application's Gemfile:"", 'And then execute:', 'Or install it yourself as:', ' converts data type using ', ' before feeding it into ', '.\nHere are a few examples:', 'You can also use it as part of ', ', similar to ', ':', '\n', '\n', 'Retrofit Converter for MessagePack', 'To use, supply an instance of this converter when building your Retrofit instance.', 'An alternative msgpack.org implementation for Ruby and C++', 'RMP is a pure Rust ', ' implementation.', '\n', 'This repository consists of three separate crates: the RMP core and two implementations to ease serializing and\ndeserializing Rust structs.', 'RMP is designed to be lightweight and straightforward. There are low-level API, which gives you\nfull control on data encoding/decoding process and makes no heap allocations. On the other hand\nthere are high-level API, which provides you convenient interface using Rust standard library and\ncompiler reflection, allowing to encode/decode structures using ', ' attribute.', 'RMP allows to decode bytes from a buffer in a zero-copy manner easily and blazingly fast, while Rust\nstatic checks guarantees that the data will be valid as long as the buffer lives.', ""RMP's error system guarantees that you never receive an error enum with unreachable variant."", 'This project is developed using TDD and CI, so any found bugs will be fixed without breaking\nexisting functionality.', 'for details of the module, visit:', 'for details of the SION serialization format, visit:', 'General usage is the same with msgpack-java. See this ', '.', 'Enter the sbt console:', 'Here is a list of sbt commands for daily development:', 'For publishing to Maven central, msgpack-scala uses ', ' plugin. Set Sonatype account information (user name and password) in the global sbt settings. To protect your password, never include this file in your project.', '\n', '\n', '\n', '\n', 'msgpack-cli is command line tool that converts data from JSON to ', ' and vice versa. Also allows calling RPC methods via ', '.', ""Debian packages and Windows binaries are available on project's\n"", '.', 'Encoding/decoding:', 'RPC calling:', 'MessagePack serialization library for various Smalltalk dialects.', 'Sources are put as ', ' for the neutral accesses from various Smalltalk dialects.', 'or:', 'or:', 'Please read ', '.', 'You might need ', ' on new encoder/decoder-related updates.', 'SwiftPack is MessagePack packer and unpacker written almost entirely in Swift.', 'Copyright (c) 2014 Brian Williams', 'This software is licensed under the terms of the MIT license.', '\n', '\n', 'A fast, zero-dependency MessagePack implementation written in Swift 4. Supports Apple platforms and Linux.', 'To use CocoaPods, add the following to your Podfile:', 'To use Carthage, add the following to your Cartfile:', 'You can easily integrate MessagePack.swift in your app with SPM. Just add MessagePack.swift as a dependency:', 'Alexsander Akers, ', 'MessagePack.swift is available under the MIT license. See the LICENSE file for more info.', 'YSMessagePack is a messagePack packer/unpacker written in swift (swift 3 ready). It is designed to be easy to use. YSMessagePack include following features:', '1.6.2 (Dropped swift 2 support, swift 3 support only from now on)', 'But what if we have some custom data structure to send?', 'YSMessagePack offer a number of different ways and options to unpack include unpack asynchronously, see the example project for detail.', 'To unpack a messagepacked bytearray is pretty easy:', '\n', '\n', '\n', '\n', '\n', '\n', ' is a ', ' encoder & decoder for Swift and supports ', '.', 'Add the following to your Cartfile:', 'Add the following to your Podfile:', 'Add MessagePacker as a dependency:', 'MessagePacker is released under the MIT license. See ', ' for details.', "" is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it's faster and smaller. Small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves."", 'You can find this code and more in ', '.', ' contains simple command-line utilities for converting from ', ' to ', ' and vice-versa. They support options for lax parsing, lossy conversions, pretty-printing, and base64 encoding.', 'They can be used for dumping MessagePack from a file or web API to a human-readable format, or for converting hand-written or generated JSON to MessagePack. The lax parsing mode supports comments and trailing commas in JSON, making it possible to hand-write your app or game data in JSON and convert it at build-time to MessagePack.', 'To view a MessagePack file in a human-readable format for debugging purposes:', 'To convert a hand-written JSON file to a MessagePack file, ignoring comments and trailing commas, and allowing embedded base64 with a ', ' prefix:', 'To fetch MessagePack from a web API and view it in a human-readable format:', 'To view the MessagePack-equivalent encoding of a JSON string:', 'To test a ', ' server via netcat:', ': ', ', e.g. ', ' (', '): ', ': ', ' package for x86_64 in the ', '; install with ', 'For other platforms, msgpack-tools must be built from source. Download the msgpack-tools tarball from the ', ' (not the ""source code"" archive generated by GitHub, but the actual release package.)', 'msgpack-tools uses CMake. A ', ' wrapper is provided that calls CMake, so you can simply run the usual:', 'If you are building from the repository, you will need ', ' to generate the man pages.', 'MessagePack is intended to be very close to JSON in supported features, so they can usually be transparently converted from one to the other. There are some differences, however, which can complicate conversions.', 'These are the differences in what objects are representable in each format:', 'JSON keys must be strings. MessagePack keys can be any type, including maps and arrays.', 'JSON supports ""bignums"", i.e. integers of any size. MessagePack integers must fit within a 64-bit signed or unsigned integer.', 'JSON real numbers are specified in decimal scientific notation and can have arbitrary precision. MessagePack real numbers are in IEEE 754 standard 32-bit or 64-bit binary.', 'MessagePack supports binary and extension type objects. JSON does not support binary data. Binary data is often encoded into a base64 string to be embedded into a JSON document.', 'A JSON document can be encoded in UTF-8, UTF-16 or UTF-32, and the entire document must be in the same encoding. MessagePack strings are required to be UTF-8, although this is not enforced by many encoding/decoding libraries.', 'By default, ', ' and ', ' convert in strict mode. If an object in the source format is not representable in the destination format, the converter aborts with an error. A lax mode is available which performs a ""lossy"" conversion, and base64 conversion modes are available to support binary data in JSON.', '\n', '\n', '\n', 'Check out ', ' for progress.', 'This library provides ', ' support for ', '. It supports all of kotlin targets (JVM, JS, Native).', 'To also use timestamp support with ', ', use ', ':', ':\nTimestamp support is available in core library as well, the additional library just adds a specific serializer that can be used with ', ' types. These are ', ', ', ' and ', '.', 'For experimental kotlin unsigned types support, use ', ':', 'To also use timestamp support with ', ', use ', ':', 'For experimental kotlin unsigned types support, use ', ':', 'Library should be used in same way as any other kotlinx.serialization library. Created models are annotated with ', ' annotation and their ', ' can be passed to ', '.', 'Check out ', '.', 'MessagePack for mruby is MessagePack implimented in mruby language.', 'This is early vesion. Please check the methods that work in test folder.', 'I test MessagePack for mruby in mac OSX 10.8.4. In the future it will work in Windows and Linux OS.', 'Download MessagePack for mruby at the command prompt:', 'Add config.gem line to ', 'Test at the command prompt:', 'Build at the command prompt:', 'mruby-msgpack is based on ', '(', ')', 'I encourage you to contribute to MessagePack for mruby!', 'Author : Jun Hiroe', 'Copyrigh : Copyright (c) 2013 Jun Hiroe', 'License : MIT License', 'Starting with Release 2.0 only mruby-3 is supported, if you are on an older version check out a commit from before 2021.', 'First get a working copy of ', ' then add', 'to the build_conf.rb of the mruby directory', 'mruby-simplemsgpack searches for msgpack-c on your system, if it can find it it links against it, otherwise it builds against msgpack-c from source.\nYou need at least msgpack-c 1 and depending on your system also pkg-config.', 'For building from source you need to have cmake installed on your system, take a look at ', ' for more information.', 'Objects can be packed with ', ' or ', ':', 'They are unpacked with ', ':', 'A string with multiple packed values can be unpacked by handing a block to\n', ':', 'When using ', ' with a block and passing it a incomplete packed Message\nit returns the position of the first offending byte, if it was able to unpack the whole Message it returns self.\nThis is helpful if the given data contains an incomplete\nlast object and we want to continue unpacking after we have more data.', 'To customize how objects are packed, define an ', '.', 'By default, MessagePack packs symbols as strings and does not convert them\nback when unpacking them. Symbols can be preserved by registering an extension\ntype for them:', 'Other objects like classes can also be preserved:', 'For nil, true, false, Integer, Float, String, Array and Hash a registered\next type is ignored. They are always packed according to the ', '.', 'If you want to pack and unpack mruby blocks take a look at the ', ' gem, it can be registered like the other extension types', ""It's not supported to override "", ', ', ' ignores it, same when that object is included in a Hash or Array.\nThis gem treats objects like ruby does, if you want to change the way your custom Class gets handled you can add ', ', ', ', ', ' or ', ' methods so it will be packed like a Hash, Array, Integer or String (in that order) then.', 'This is using code from ', 'Copyright (C) 2008-2015 FURUHASHI Sadayuki', 'Distributed under the Boost Software License, Version 1.0.\n(See accompanying file LICENSE_1_0.txt or copy at\n', ')', 'This is a command line tool to inspect/show a data serialized by ', '.', 'Executable binary files are available from ', '. Download a file for your platform, and use it.', 'Otherwise, you can install rubygem version on your CRuby runtime:', ' option is available oly with rubygem version, and unavailable with mruby binary release.', 'FILE is a file which msgpack binary stored. Specify ', ' to inspect data from STDIN.\nThis command shows the all data contained in specified format (YAML in default).', 'This is an example to inspect a data from STDIN.\nThe data corresponds to ', ' in JSON.', 'TODO: show more example', 'Bug reports and pull requests are welcome on GitHub at [', '].', '\n', 'zerorpc is a flexible RPC implementation based on zeromq and messagepack. Service APIs exposed with zerorpc are called ""zeroservices"".', 'General purpose C++ library for Preferred Infrastructure, Inc. It includes MessagePack-RPC implementation for C++', 'MessagePack ™ Copyright © 2008-2021 Sadayuki Furuhashi', 'one-line [serialize / deserialize] for almost all standard type of C++ same as ', '\n', 'support custom class [serialization / deserialization]', 'support working with ', '\n', 'one-line [save / load] between custom serializable MsgPack class and JSON file', 'one-line [save / load] custom serializable MsgPack class [to / from] EEPROM', 'use ', ' or ', ' to convert to simple structure', 'use ', ' or ', ' with ', ' / ', ' for complex structure', 'use custom class as JSON array / object which is wrapped into ', ' / ', '\n', 'use custom class nest recursively for more complex structure', 'use ', ' for more flexible handling of JSON', 'you can [serialize / deserialize] ', ' and ', ' directly', '\n', ' or ', ' (', ')', '\n', ' (need to ', ' or ', ')', '\n', ' (need to ', ' or ', ')', '\n', ' (', ')', '\n', ' (', ')', '\n', ' (need to ', ' or ', ')', '\n', ' (', ')', '\n', ' (', ')', '\n', ' (', ')', '\n', ' cannot be used in all Arduino', 'C-style array and pointers are supported only packing.', 'for NO-STL Arduino, following types can be used\n', 'all types of NIL, Bool, Integer, Float, Str, Bin', 'for Array, only ', ', ', ' (', '), and ', ' (', ') can be used', 'for Map, only ', ' (', ') can be used', 'for the detail of ', ', see ', '\n', '\n', '\n', ' = ', ' (Arduino only)', '\n', ' = ', '\n', '\n', ' = ', '\n', '\n', ' = ', '\n', '\n', ' = ', '\n', '\n', ' = ', '\n', 'AVR', 'megaAVR', 'SAMD', '\n', ' = ', '\n', '\n', ' = ', '\n', '\n', ' = ', '\n', '\n', ' = ', '\n', 'functions like ', ' watch the next type of data without reading it (without advancing the buffer of Stream ', ').', 'functions like ', ' read a value from Stream ', '.', 'functions like ', ' write a value on Stream ', '.', 'Stream are used as much as possible in order not to add to much overhead with buffers. Therefore you should be able to store the minimum number of value at a given time.', 'Map and Array related functions concern only their headers. Ex: If you want to write an array containing two elements you should write the array header, then write the two elements.', '8 bytes float (Only 4 bytes floats are supported by default on every Arduino and floats are anyway not recommended on Arduino)', '2^32 char long (or longer) strings', '2^32 byte long (or longer) bins', 'extention types.', '\n', ' instead of ', '\n', '\n', ' instead of ', '\n', '\n', ' instead of ', '\n', 'Simple and easy to use', 'Secure against untrusted data', 'Lightweight, suitable for embedded', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'Create serializer via ', ' generic method. This method creates dependent types serializers as well.', 'Invoke serializer as following:', '\n', ' method with destination ', ' and target object for serialization.', '\n', ' method with source ', '.', 'Fast and interoperable binary format serialization with simple API.', 'Generating pre-compiled assembly for rapid start up.', 'Flexible MessagePackObject which represents MessagePack type system naturally.', 'Binary files distributed via the NuGet package ', '.', 'You can extract binary (DLL) file as following:\n', 'Download *.zip file from ', '.', 'Extract it.', 'Under the ', ' directory, binaries are there!', '\n', 'For mono, you can use ', ' or ', ' drops as you run with.', 'For Unity, ', ' drop is suitable.', '\n', '\n', '\n', 'You must install .NET Framework 3.5, 4.x, .NET Core, and Xamarin dev tools to build all builds successfully.\nIf you do not want to install options, edit ', ' element in ', ' files to exclude platforms you want to exclude.', '\n', '\n', '\n', '\n', '\n', '\n', 'Install latest Mono and .NET Core SDK.', 'Now, you can build MsgPack.sln and MsgPack.Xamarin.sln with above instructions and ', ' in latest Mono. Note that ', ' does not work because it does not support latest csproj format.', '\n', ' Javac shows compilation error.\n', '\n', ' Rebuild the test project and try it run again.', '\n', '\n', ' An error occurred while running unit test project.\n', '\n', ' Rebuild the project and rerun it. Or, login your Mac again, ant retry it.', '\n', '\n', ' It is hard to read English.\n', '\n', ' You can read localized Xamarin docs with putting ', ' as the first component of URL path such as ', '.', '\n', 'GitHub Page           : ', '\n', 'Wiki (documentation)  : ', '\n', 'API Reference         : ', '\n', 'Issue tracker         : ', '\n', 'MSBuild reference     : ', '\n', 'Mono xbuild reference : ', '\n', 'This library is designed to be super light weight.', 'Its easiest to understand how this library works if you think in terms of json. The type ', ' represents a dictionary, and the type ', ' represents an array.', 'Create MPack instances with the static method ', '. You can pass any simple type (such as string, integer, etc), or any Array composed of a simple type. MPack also has implicit conversions from most of the basic types built in.', 'Transform an MPack object back into a CLR type with the static method ', ' or MPack.To(type);. MPack also has ', ' converions going back to most basic types, you can do ', ' for instance.', 'MPack now supports native asynchrounous reading and cancellation tokens. It will ', ' block a thread to wait on a stream.', 'Me: [caelantsayler]at[gmail]dot[com]', 'All of the people that make MessagePack happen: ', '\n', 'MsgPackExplorer.exe', 'LsMsgPackFiddlerInspector.dll', 'LsMsgPack.dll', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'Automating definitions for your serializable objects.', 'Produces compiler warnings upon incorrect attribute use, member accessibility, and more.', 'Primitives (', ', ', ', etc...), ', 's, ', ', ', '\n', '\n', ',  ', ', ', '\n', '\n', ', ', ', ', ', ', '\n', '\n', ', ', ', ', '\n', '\n', ', ', ', ', ', ', ', ', ', ', '\n', '\n', ', ', ', ', '\n', '\n', ', ', '\n', '\n', ', ', ', ', ', ', ', ', ', ', ', ', '\n', '\n', ', ', ', ', ', ', ', ', '\n', '\n', ', ', ', ', ', ', ', ', ', ', ', ', '\n', '\n', ', ', '\n', '\n', ',', '\n', ', ', ', ', ', ', '\n', 'Immutable collections (', ', etc)', 'Custom implementations of ', ' or ', ' with a parameterless constructor', 'Custom implementations of ', ' or ', ' with a parameterless constructor', 'ReactiveProperty', 'for Unity (', ', ', ', etc...)', 'F# (Record, FsList, Discriminated Unions, etc...)', 'The serializer uses ', ' rather than ', ' to reduce memory overhead.', 'Buffers are rented from pools to reduce allocations, keeping throughput high through reduced GC pressure.', ""Don't create intermediate utility instances ("", ', ', ', etc...)', 'Utilize dynamic code generation and JIT to avoid boxing value types. Use AOT generation on platforms that prohibit JITs.', ""Cached generated formatters on static generic fields (don't use dictionary-cache because dictionary lookup is overhead). See "", '\n', 'Heavily tuned dynamic IL code generation and JIT to avoid boxing value types. See ', '. Use AOT generation on platforms that prohibit JIT.', 'Call the Primitive API directly when IL code generation determines target types to be  primitive.', 'Reduce branching of variable length formats when IL code generation knows the target type (integer/string) ranges', ""Don't use the "", ' abstraction to iterate over collections when possible, ', ' and derived collection formatters', 'Use pre-generated lookup tables to reduce checks of mgpack type constraints, ', '\n', 'Uses optimized type key dictionary for non-generic methods, ', '\n', 'Avoid string key decoding for lookup maps (string key and use automata based name lookup with inlined IL code generation, see: ', '\n', 'To encode string keys, use pre-generated member name bytes and fixed sized byte array copies in IL, see: ', '\n', '\n', ': ', '\n', '\n', ': ', '.', '\n', ' - gRPC based HTTP/2 RPC Streaming Framework', '\n', ' - Embedded Readonly In-Memory Document Database', '\n', ' - supports F# list, set, map, unit, option, discriminated union', '\n', ' - Support for NodaTime types to MessagePack C#', '\n', ' - supports ASP.NET Core MVC (', ')', '\n', ' - MessagePack MediaTypeFormatter', '[0, 30)', '[120, 127]', 'ServerProject(.NET 4.6/.NET Core/.NET Standard)\n', '[', ']', '[MessagePack]', '[MessagePack.UnityShims]', '\n', 'UnityProject\n', '[Concrete SharedCodes]', ""[MessagePack](not dll/NuGet, use MessagePack.Unity.unitypackage's sourcecode)"", '\n', 'Blog: ', ' (English)', 'Blog: ', ' (Japanese)', 'Twitter: ', ' (Japanese)', 'std::streambuf serializer and deserializer', 'hierarchy or token stream', 'push and pull parser', 'byte wise data flow control', '\n', '\n', '\n', '\n', '\n', '\n', 'Support serialization and deserialization.', 'Fast and compact', 'Full test coverage', 'Easy to use', 'Automatic type handling', 'Open source MIT license', 'Easy error handling', 'Support for extension types\n', 'The msgpack spec allows for additional types to be enumerated as Extensions. If reasonable use cases come about for this feature then it may be added.', '\n', 'Name/value pairs\n', ""The msgpack spec uses the 'map' type differently than this library. This library implements maps in which key/value pairs must all have the same value types."", '\n', 'Endian conversion shortcuts\n', 'On platforms that already hold types in big endian, the serialization could be optimized using type traits.', '\n', '\n', ': Serialize object as a sequence of java.lang.Bytes.', '\n', ' Deserialize bytes as a Clojure object.', '\n', '\n', '\n', 'More specs', 'Mapping', 'Fork it ( ', ' )', 'Create your feature branch (git checkout -b my-new-feature)', ""Commit your changes (git commit -am 'Add some feature')"", 'Push to the branch (git push origin my-new-feature)', 'Create a new Pull Request', '\n', ' Barry Allard - creator, maintainer', 'Small size and High performance', 'Zero copy serialization / deserialization', 'Streaming deserializer for non-contiguous IO situation', 'Supports D features (Ranges, Tuples, real type)', 'No circular references support', 'If you want to use the LDC compiler, you need at least version 0.15.2 beta2', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'Packing and unpacking Elixir terms via ', ' and ', ' (and their bang! variants).', 'Unpacking of partial slices of MessagePack-encoded terms via ', '.', 'Support for ""Binary"" and ""Extension"" MessagePack types via ', ' and ', ', respectively.', 'Protocol-based packing through the ', ' protocol, that can be derived for user-defined structs.', 'A Plug parser (', ') to parse requests with MessagePack-encoded bodies.', 'Support for MessagePack data fragment manipulation.', 'raw family (', ', ', ', ', ') becomes new str family', '\n', ' is new as str8', 'new bin space (', ' as bin8, bin16, bin32)', 'new ext space (', ' as ext8, ext16, ext32)', 'new fixext space (', ' as fixext1, fixext2, fixext4, fixext8, fixext16),', '* Tries to pack as ', ' if it is a valid ', '.', 'Support ', ', ', ' and ', '\n', 'Support OTP 19.0', 'Renewed optional arguments to pack/unpack interface. This is\nincompatible change from 0.4 series.', 'Deprecate ', '\n', 'Moved to rebar3', 'Promote default map unpacker as default format when OTP is >= 17', 'Added QuickCheck tests', 'Since this version OTP older than R16B03-1 are no more supported', '0.3 series will be the last versions that supports R16B or older\nversions of OTP.', 'OTP 18.0 support', 'Promote default map unpacker as default format when OTP is >= 18', 'Add OTP 17 series to Travis-CI tests', 'Fix wrong numbering for ext types', 'Allow packing maps even when {format,map} is not set', 'Fix Dialyzer invalid contract warning', 'Proper use of null for jiffy-style encoding/decoding', 'set back default style as jiffy', 'fix bugs around nil/null handling', 'supports map new in 17.0', 'jiffy-style maps will be deprecated in near future', 'set default style as map', 'option', 'voption', 'list', 'map', 'set', 'Discriminated Union', 'Struct Discriminated Union', 'Primitives, arrays, maps, structs, time.Time and interface{}.', 'Appengine *datastore.Key and datastore.Cursor.', '\n', '/', ' interfaces for custom encoding.', '\n', ' to encode\ntype information.', 'Renaming fields via ', ' and alias via ', '.', 'Omitting individual empty fields via ', ' tag or all\n', '.', '\n', '.', 'Encoding/decoding all\n', '\nor\n', '.', '\n', ' with ', ' can turn msgpack into drop-in\nreplacement for any tag.', 'Simple but very fast and efficient\n', '.', '\n', ' for PostgreSQL, MySQL, MSSQL, and SQLite', 'Use Go as your schema language', 'Performance', 'Type safety', 'Encoding flexibility', 'Extremely fast generated code', 'Test and benchmark generation', 'JSON interoperability (see ', ')', 'Support for complex type declarations', ""Native support for Go's "", ', ', ', and ', ' types', 'Generation of both ', '-oriented and ', '-oriented methods', 'Support for arbitrary type system extensions', 'File-based dependency model means fast codegen regardless of source tree size.', ""Identifiers from outside the processed source file are assumed (optimistically) to satisfy the generator's interfaces. If this isn't the case, your code will fail to compile."", 'Like most serializers, ', ' and ', ' fields are ignored, as well as non-exported fields.', 'Encoding of ', ' is limited to built-ins or types that have explicit encoding methods.', '\n', ' This is intentional (as it preserves JSON interop.) Although non-string map keys are not forbidden by the MessagePack standard, many serializers impose this restriction. (It also means ', ' well-formed ', ' can be de-serialized into a ', '.) The only exception to this rule is that the deserializers will allow you to read map keys encoded as ', ' types, due to the fact that some legacy encodings permitted this. (However, those values will still be cast to Go ', 's, and they will be converted to ', ' types when re-encoded. It is the responsibility of the user to ensure that map keys are UTF-8 safe in this case.) The same rules hold true for JSON translation.', 'Supported types : primitive / array / slice / struct / map / interface{} and time.Time', 'Renaming fields via ', '\n', 'Omitting fields via ', '\n', 'Supports extend encoder / decoder', 'Can also Encoding / Decoding struct as array', 'msgpack_pack(mixed $input) : string;\npack a input to msgpack, object and resource are not supported, array and other types supported,\nfalse on failure.', 'msgpack_unpack(string $pac) : mixed;\nunpack a msgpack.', 'Reeze Xia ', '\n', 'Serializer/Deserializer', 'RPC', 'Null', 'Bool', 'Int', 'Float', 'Object', 'Bytes', 'String', 'Array', 'IntMap/StringMap', 'Message Pack specification: ', '\n', 'msgpack-java uses ', ' with Facebook Presto', 'Pure JavaScript only (No node-gyp nor gcc required)', 'Faster than any other pure JavaScript libraries on node.js v4', 'Even faster than node-gyp C++ based ', ' library (', ' on encoding)', ""Streaming encoding and decoding interface is also available. It's more faster."", 'Ready for ', ' including Chrome, Firefox, Safari and even IE8', '\n', ' on Node.js v0.10, v0.12, v4, v5 and v6 as well as Web browsers', '\n', ' (1.0.2)', '\n', ' (0.3.0)', '\n', ' (0.3.0-v5)', '\n', ' (2.1.1)', '\n', ' (msgpack.codec)', '\n', ' (3.3.0)', '\n', ' (0.0.2)', '\n', ' - Setting this to ', ' disables the record extension and stores JavaScript objects as MessagePack maps, and unpacks maps as JavaScript ', 's, which ensures compatibilty with other decoders.', '\n', ' - Provides the array of structures that is to be used for record extension, if you want the structures saved and used again. This array will be modified in place with new record structures that are serialized (if less than 32 structures are in the array).', '\n', ' - Enable serialization of additional built-in types/classes including typed arrays, ', 's, ', 's, and ', 's.', '\n', ' - This enables the structured cloning extensions that will encode object/cyclic references. ', ' is enabled by default when this is enabled.', '\n', ' - If ', ', this will decode MessagePack maps and JS ', 's with the map entries decoded to object properties. If ', ', maps are decoded as JavaScript ', 's. This is disabled by default if ', ' is enabled (which allows ', 's to be preserved), and is enabled by default if ', ' is disabled.', '\n', ' - This will enable msgpackr to encode non-integer numbers as ', '. See next section for possible values.', '\n', ' - This will use varying map size definition (fixmap, map16, map32) based on the number of keys when encoding objects, which yields slightly more compact encodings (for small objects), but is typically 5-10% slower during encoding. This is necessary if you need to use objects with more than 65535 keys. This is only relevant when record extension is disabled.', '\n', ' - If ', ' this uses a custom extension that bundles strings together, so that they can be decoded more quickly on browsers and Deno that do not have access to the NodeJS addon. This a custom extension, so both encoder and decoder need to support this. This can yield significant decoding performance increases on browsers (30%-50%).', '\n', ' - When decoding a MessagePack with binary data (Buffers are encoded as binary data), copy the buffer rather than providing a slice/view of the buffer. If you want your input data to be collected or modified while the decoded embedded buffer continues to live on, you can use this option (there is extra overhead to copying).', '\n', ' - Encode JS ', 's in 32-bit format when possible by dropping the milliseconds. This is a more efficient encoding of dates. You can also cause dates to use 32-bit format by manually setting the milliseconds to zero (', ').', '\n', ' - Encode structures in serialized data, and reference previously encoded structures with expectation that decoder will read the encoded structures in the same order as encoded, with ', '.', '\n', ' - If a bigint needs to be encoded that is larger than will fit in 64-bit integers, it will be encoded as a float-64 (otherwise will throw a RangeError).', '\n', ' - Encodes a value of ', ' as a MessagePack ', ', the same as a ', '.', '\n', ' - This will decode uint64 and int64 numbers as the specified type. The type can be ', ' (default), ', ', or ', '.', '\n', ' - This can be provided as function that will be called when an invalid date is provided. The function can throw an error, or return a value that will be encoded in place of the invalid date. If not provided, an invalid date will be encoded as an invalid timestamp (which decodes with msgpackr back to an invalid date).', '\n', ' (1) - Always will encode non-integers (absolute less than 2147483648) as 32-bit float.', '\n', ' (3) - Always will encode non-integers as 32-bit float, and when decoding 32-bit float, round to the significant decimal digits (usually 7, but 6 or 8 digits for some ranges).', '\n', ' (4) - Only encode non-integers as 32-bit float if all significant digits (usually up to 7) can be unambiguously encoded as a 32-bit float, and decode/unpack with decimal rounding (same as above). This will ensure round-trip encoding/decoding without loss in precision and uses 32-bit when possible.', 'MessagePack has wider adoption, and, at least with this implementation is slightly more efficient (by roughly 1%).', 'CBOR has an ', ', and the record extensions is conceptually/philosophically a better fit for CBOR tags.', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', ' str/bin separation, added at August 2013', '\n', ' extension types, added at August 2013', '\n', ' timestamp ext type, added at August 2017', '*1 Both ', ' and ', ' are mapped to ', ' (', ') type, and are decoded into ', '\n', '*2 Any ', ""s including NodeJS's "", ' are mapped to ', ' family, and are decoded into ', '\n', '*3 In handling ', ', it is regarded as ', ' in terms of TypeScript', '*4 MessagePack timestamps may have nanoseconds, which will lost when it is decoded into JavaScript ', '. This behavior can be overridden by registering ', ' for the extension codec.', 'ES5 language features', 'ES2018 standard library, including:\n', 'Typed arrays (ES2015)', 'Async iterations (ES2018)', 'Features added in ES2015-ES2018', '\n', '\n', ' is compiled into ES2019 with CommomJS, provided for NodeJS v10', '\n', ' is compiled into ES5 with UMD\n', '\n', ' - the minified file', '\n', ' - the non-minified file', '\n', '\n', "" is compiled into ES5 with ES modules, provided for webpack-like bundlers and NodeJS's ESM-mode"", 'TypeScript targets\n', '\n', ' / ', '\n', '\n', 'JavaScript engines\n', 'NodeJS, browsers (Chrome, Firefox, Safari, IE11, and so on)', '\n', 'this implementation uses pre-allocated buffers and buffer.copy() for encoding, instead of regular arrays', 'uses a buffer polyfill if used in browser environments', 'has dictionary support, to further reduce payload size', 'used extensions\n', '\n', ' = ', '\n', '\n', ' = ', '\n', '\n', ' = ', '\n', '\n', ' = ', '\n', '\n', '\n', ', ', ' and ', '\n', '\n', ' : encoded as Buffers, decoded as Buffers', '\n', ' : encoded as Buffers, decoded as Buffers', '\n', '\n', '\n', ' : encoded as Buffers, decoded as Buffers', '\n', '\n', ""this feature isn't in MessagePack spec but added as a convenience feature in 1.1.3"", 'dictionaries allow us to decrease our buffer output size by recognizing strings used as object keys and replacing them with shorter-byte integer values during the encoding process', 'these shorter-byte placeholder values are then restored to their respective strings during the decoding process', 'the trade-off in using dictionaries is an insignificantly slower encoding and decoding time in exchange of a significantly smaller buffer output, which results into a lower network bandwidth and storage consumption in the long run', 'the best part: the byte placeholders starts from -32 then increments upwards, values -32 to 127 are encoded in single byte, which means your first (32 + 128) = 160 keys will be encoded as a single byte instead of encoding the whole string', 'On browsers, ', ' object is exposed as ', '\n', 'On browsers, call ', ' on received ArrayBuffers', '1.x\n', 'basic support', 'dictionary support', '\n', '2.0.0\n', 'rewrite to use raw functions instead of classes', 'update dev-deps', 'jest test-cov @ ', '\n', 'statements ', '\n', 'branches ', '\n', 'functions ', '\n', 'lines ', '\n', '\n', '\n', '2.0.x\n', 'fix tempBufferLength check', 'rebuild for browser', 'fix leak on buffer decode', '\n', '\n', '\n', '\n', ' (Manuel Astudillo)', '\n', '\n', '\n', '\n', ' (MIT, Damien Arrachequesne)', '\n', '\n', '\n', '\n', ' (MIT, Ben Shepheard)', '\n', '\n', ':\n', '\n', ' (MIT, Feross Aboukhadijeh)', '\n', '\n', '\n', '\n', ' (MIT, Sindre Sorhus)', '\n', '\n', ' - Map with two entries', '\n', ' - String of seven bytes', '\n', ' - UTF8 String ""compact""', '\n', ' - Boolean value true', '\n', ' - String of size bytes', '\n', ' - UTF8 String ""schema""', '\n', ' - Integer value 0', 'new in v1.0.1', 'written in pure Lua 5.3 / 5.4 (using ', ' / ', ')', 'can distinguish between integer / float / double numbers', 'can distinguish between UTF-8 strings and binary data', 'public domain license (', ')', 'pretty fast decoding', 'extendend types ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'Implement unwrapInto to convert Msg object to Nim object handily', 'Evaluate performance and scalability', 'Talk with offical Ruby implementation', ""Don't repeat yourself: The code now has too much duplications. Using templates?"", '(*) please import msgpakc4collection for Nim standard library collections, they are no longer part of codec core', '(**) provide your own implementation if you want to override default behavior', 'if ref value is nil, it will be packed into msgpack nil, and when unpacked, you will get nil too', 'if ref value not nil, it will be dereferenced e.g. pack(val[]) or unpack(val[])', 'ref subject to some restriction. see ', ' below', 'ptr will be treated like ref during pack', 'unpacking ptr will invoke alloc, so you must dealloc it', 'procedural type', 'cstring(it is not safe to assume it always terminated by null)', 'pointer', '\n', ' (will cause compile time error)', 'proc pack_bin*[ByteStream](s: ByteStream, len: int)', 'proc pack_ext*[ByteStream](s: ByteStream, len: int, exttype: int8)', 'proc unpack_bin*[ByteStream](s: ByteStream): int', 'proc unpack_ext*[ByteStream](s: ByteStream): tuple[exttype:uint8, len: int]', '\n', ', a boolean to that forces all floats to be encoded as 64-bits floats. Defaults to false.', '\n', ', a boolean to force a determinate keys order', '\n', ', a boolean that enables ""compatibility mode"" which doesn\'t use bin format family and str 8 format. Defaults to false.', '\n', ', a boolean that when set disables the encoding of Dates into the ', '. Defaults to false.', '\n', ', a boolean that forces all maps to be decoded to ', 's rather than plain objects. This ensures that ', ' and that iteration order is preserved. Defaults to false.', '\n', ', a string which can be ', ' that determines what happens when decoding a plain object with a ', ' property which would cause prototype poisoning. ', ' (default) throws an error, ', ' removes the property, ', ' (not recommended) allows the property, thereby causing prototype poisoning on the decoded object.', '\n', ', a function that will be called to check if the passed\nobject should be encoded with the ', ' function', '\n', ', a function that will be called to encode an object in binary\nform; this function ', ' return a ', ' which include the same type\nfor ', '.', '\n', ', is a greater than zero integer identificating the type once serialized', '\n', ', a function that will be called to decode the object from\nthe passed ', '\n', '\n', ', is a greater than zero integer identificating the type once serialized', '\n', ', the function that will be used to match the objects\nwith ', '\n', '\n', ', a function that will be called to encode an object in binary\nform; this function ', ' return a ', ' that can be\ndeserialized by the ', ' function', '\n', ', a function that will be called to decode the object from\nthe passed ', '\n', '\n', ', objects should be passed to encoder in wrapped object {value: data}. Wrap option should be used if you need to pass null to encoder.', '\n', ', decoded objects returned in wrapped object {value: data}. Wrap option should be used if stream contains msgpack nil.', '\n', ': An implementation of the\n', '\non top of this library.', 'Automatic Message Pack detection (from the HTTP headers) and encoding of all JSON messages to Message Pack.', 'Extension of the current ExpressJS API; Introducing the ', ' method on the standard ', ' object.', '\n', ' - ', '\n', '\n', ' - ', ' - ', '\n', 'PHP 7.0 +', 'Fully compliant with the latest ', '\n', 'Supports ', '\n', 'Supports ', '\n', 'Supports ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'Delphi 7 (tested)', 'Delphi 2007 (tested)', 'XE5, XE6, XE7, FMX (tested)', '\n', '\n', '\n', '\n', '\n', '\n', 'fixed int32, int64 parse bug< integer, int64 parse zero>\n2014-11-09 22:35:27', 'add EncodeToFile/DecodeFromFile\n2014-11-13 12:30:58', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'High-level API for a better programming experience', 'Install ', '\n', '\n', ' to fetch your dependencies', '\n', ' to include this package', '\n', ' to compile your application', '\n', '\n', 'The extension module does not support Python 2 anymore.\nThe pure Python implementation (', ') is used for Python 2.', '\n', '\n', '\n', '\n', ' by default.  bytes are encoded in bin type in msgpack.\n', '\nYou can use ', ' to encode into old msgpack format.', '\n', ' option is removed.  UTF-8 is used always.', '\n', '\n', '\n', '\n', ' by default.  It assumes str types are valid UTF-8 string\nand decode them to Python str (unicode) object.', '\n', ' option is removed.  You can use ', ' to support old format.', 'Default value of ', ' is changed from 0 to 100 MiB.', 'Default value of ', ' is changed to True to avoid hashdos.\nYou need to pass ', ' if you have data which contain map keys\nwhich type is not bytes or str.', '\n', 'serializes ', ' instances natively.', 'serializes ', ', ', ', and ', ' instances to RFC 3339 format,\ne.g., ""1970-01-01T00:00:00+00:00""', 'serializes ', ' instances natively and faster.', 'serializes ', ' instances natively (disregards the configuration ATM).', 'serializes arbitrary types using a ', ' hook', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'user friendly API', 'modular object model', 'working timeouts and reconnecting', 'connection pool support', 'TCP, SSL, UDP and UNIX sockets', 'msgpack-python ', '\n', 'Twisted ', '\n', 'Fork it', 'Create your feature branch (', ')', 'Commit your changes (', ')', 'Push to the branch (', ')', 'Create new Pull Request', 'Create REST API returing MessagePack using Rails + ', '\n', 'Store objects efficiently in memcached or Redis', 'Upload data in efficient format from mobile devices. See also MessagePack for ', ' and ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'Rust 1.53.0 or later', 'Message Pack specification: ', '\n', 'Squeak', 'Pharo', 'VisualWorks', 'VA Smalltalk', 'Dolphin Smalltalk', 'GNU Smalltalk (Beta)', 'There are few Objective-C dependencies, mostly NSData. I hope to remove these dependencies as Swift matures.', 'Maps currently only support String types for keys.', 'Versions 4.x support Swift 5.2.', 'Versions 3.x support Swift 4.', 'Support for Swift 3 was dropped after ', '.', 'Support for Swift 2 was dropped after ', '.', 'Pack custom structs and classes / unpack objects by groups and apply handler to each group (easier to re-construct your struct$)', 'Asynchronous unpacking', 'Pack and unpack multiple message-packed data regardless of types with only one line of code', 'Specify how many items to unpack', 'Get remaining bytes that were not message-packed ; start packing from some index -- so you can mix messagepack with other protocol!!!', 'Helper methods to cast NSData to desired types', 'Operator +^ and +^= to join NSData', 'Simply add files under ', ' to your project,', 'use cocoapod, add ""pod ', ' to your podfile', 'Message Pack specification: ', '\n', 'Swift 5.0 or later', 'iOS 8.0 or later', 'macOS 10.10 or later', 'tvOS 9.0 or later', 'watchOS 2.0 or later', '\n', ' -- Convert MessagePack to JSON', '\n', ' -- Convert JSON to MessagePack', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n'])"
