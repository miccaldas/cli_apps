content
"(['explosion/cymem', 'Name already in use', 'cymem: A Cython Memory Helper'], ['\n        ', ' Cython memory pool for RAII-style memory management\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', ""cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object's life-cycle, so that the memory is freed\nwhen the object is garbage collected."", '\n', '\n', '\n', 'The most useful is ', ', which acts as a thin wrapper around the calloc\nfunction:', 'The ', "" object saves the memory addresses internally, and frees them when the\nobject is garbage collected. Typically you'll attach the "", "" to some cdef'd\nclass. This is particularly handy for deeply nested structs, which have\ncomplicated initialization functions. Just pass the "", "" object into the\ninitializer, and you don't have to worry about freeing your struct at all —\nall of the calls to "", ' will be automatically freed when the ', '\nexpires.', 'Installation is via ', ', and requires ', '. Before installing, make sure that your ', ', ', ' and ', ' are up to date.', ""Let's say we want a sequence of sparse matrices. We need fast access, and\na Python list isn't performing well enough. So, we want a C-array or C++\nvector, which means we need the sparse matrix to be a C-level struct — it\ncan't be a Python class. We can write this easily enough in Cython:"", 'We wrap the data structure in a Python ref-counted class at as low a level as\nwe can, given our performance constraints. This allows us to allocate and free\nthe memory in the ', ' and ', ' Cython special methods.', ""However, it's very easy to make mistakes when writing the "", ' and\n', ' functions, leading to memory leaks. cymem prevents you from\nwriting these deallocators at all. Instead, you write as follows:', 'All that the ', ' class does is remember the addresses it gives out. When the\n', ' object is garbage-collected, the ', ' object will also be garbage\ncollected, which triggers a call to ', '. The ', ' then frees all of\nits addresses. This saves you from walking back over your nested data structures\nto free them, eliminating a common class of errors.', ""Sometimes external C libraries use private functions to allocate and free objects,\nbut we'd still like the laziness of the "", '.', '\n      ', ' Cython memory pool for RAII-style memory management\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
