content
"(['glyph/automat', 'Name already in use', 'Automat', 'input', 'body', 'output', 'states', 'users', 'inputs', 'outputs', 'not have to check themselves', 'better', ""we can't add any\nimplementation code to the input method"", 'all', 'return'], ['\n        Self-service finite-state machines for the programmer on the go.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', '\n', '\n', 'Automat is a library for concise, idiomatic Python expression of finite-state\nautomata (particularly deterministic finite-state transducers).', 'Read more here, or on ', ', or watch the following videos for an overview and presentation', 'Overview and presentation by ', ' at the first talk of the first Pyninsula meetup, on February 21st, 2017:', '\n', 'Presentation by ', ' at PyCon Australia, on August 6th 2017:', '\n', 'Sometimes you have to create an object whose behavior varies with its state,\nbut still wishes to present a consistent interface to its callers.', 'For example, let\'s say you\'re writing the software for a coffee machine.  It\nhas a lid that can be opened or closed, a chamber for water, a chamber for\ncoffee beans, and a button for ""brew"".', 'There are a number of possible states for the coffee machine.  It might or\nmight not have water.  It might or might not have beans.  The lid might be open\nor closed.  The ""brew"" button should only actually attempt to brew coffee in\none of these configurations, and the ""open lid"" button should only work if the\ncoffee is not, in fact, brewing.', 'With diligence and attention to detail, you can implement this correctly using\na collection of attributes on an object; ', ', ', ',\n', ' and so on.  However, you have to keep all these attributes\nconsistent.  As the coffee maker becomes more complex - perhaps you add an\nadditional chamber for flavorings so you can make hazelnut coffee, for\nexample - you have to keep adding more and more checks and more and more\nreasoning about which combinations of states are allowed.', ""Rather than adding tedious 'if' checks to every single method to make sure that\neach of these flags are exactly what you expect, you can use a state machine to\nensure that if your code runs at all, it will be run with all the required\nvalues initialized, because they have to be called in the order you declare\nthem."", 'You can read about state machines and their advantages for Python programmers\nin more detail ', '.', 'There are\n', '.\nSo it behooves me to say why yet another one would be a good idea.', 'Automat is designed around this principle: while organizing your code around\nstate machines is a good idea, your callers don\'t, and shouldn\'t have to, care\nthat you\'ve done so.  In Python, the ""input"" to a stateful system is a method\ncall; the ""output"" may be a method call, if you need to invoke a side effect,\nor a return value, if you are just performing a computation in memory.  Most\nother state-machine libraries require you to explicitly create an input object,\nprovide that object to a generic ""input"" method, and then receive results,\nsometimes in terms of that library\'s interfaces and sometimes in terms of\nclasses you define yourself.', 'For example, a snippet of the coffee-machine example above might be implemented\nas follows in naive Python:', ""With Automat, you'd create a class with a "", ' attribute:', 'and then you would break the above logic into two pieces - the ', '\n', ', declared like so:', ""It wouldn't do any good to declare a method "", "" on this, however, because\ninput methods don't actually execute their bodies when called; doing actual\nwork is the "", ""'s job:"", 'As well as a couple of ', "" - and for simplicity's sake let's say that the\nonly two states are "", ' and ', ':', ' is the ', ' state because ', ' starts without beans\nin it.', '(And another input to put some beans in:)', 'Finally, you hook everything together with the ', ' method of the functions\ndecorated with ', ':', 'To ', ' of this coffee machine class though, it still looks like a POPO\n(Plain Old Python Object):', 'All of the ', ' are provided by calling them like methods, all of the\n', ' are automatically invoked when they are produced according to the\noutputs specified to ', "" and all of the states are simply opaque tokens -\nalthough the fact that they're defined as methods like inputs and outputs\nallows you to put docstrings on them easily to document them."", ""Don't do that."", 'One major reason for having a state machine is that you want the callers of the\nstate machine to just provide the appropriate input to the machine at the\nappropriate time, and ', ' what state the machine is\nin.  So if you are tempted to write some code like this:', 'Instead, just make your calling code do this:', 'and then change your state machine to look like this:', 'so that the responsibility for knowing which state the state machine is in\nremains within the state machine itself.', 'Quite often you want to be able to pass parameters to your methods, as well as\ninspecting their results.  For example, when you brew the coffee, you might\nexpect a cup of coffee to result, and you would like to see what kind of coffee\nit is.  And if you were to put delicious hand-roasted small-batch artisanal\nbeans into the machine, you would expect a ', "" cup of coffee than if you\nwere to use mass-produced beans.  You would do this in plain old Python by\nadding a parameter, so that's how you do it in Automat as well."", 'However, one important difference here is that ', '.  Inputs are purely a declaration of\nthe interface; the behavior must all come from outputs.  Therefore, the change\nin the state of the coffee machine must be represented as an output.  We can\nadd an output method like this:', 'and then connect it to the ', ' by changing the transition from\n', ' to ', ' like so:', 'Now, when you call:', 'the machine will remember the beans for later.', 'So how do we get the beans back out again?  One of our outputs needs to have a\nreturn value.  It would make sense if our ', "" method returned the cup\nof coffee that it made, so we should add an output.  So, in addition to heating\nthe heating element, let's add a return value that describes the coffee.  First\na new output:"", ""Note that we don't need to check first whether "", "" exists or not,\nbecause we can only reach this output method if the state machine says we've\ngone through a set of states that sets this attribute."", 'Now, we need to hook up ', ' to the process of brewing, so change\nthe brewing transition to:', 'Now, we can call it:', ""Except... wait a second, what's that "", ' doing there?', 'Since every input can produce multiple outputs, in automat, the default return\nvalue from every input invocation is a ', '.  In this case, we have both\n', ' and ', "" outputs, so we're seeing\nboth of their return values.  However, this can be customized, with the\n"", ' argument to ', '; the ', ' is a callable which takes an\niterable of all the outputs\' return values and ""collects"" a single return value\nto return to the caller of the state machine.', 'In this case, we only care about the last output, so we can adjust the call to\n', ' like this:', ""And now, we'll get just the return value we want:"", 'There are APIs for serializing the state machine.', 'First, you have to decide on a persistent representation of each state, via the\n', ' argument to the ', ' decorator.', 'Let\'s take this very simple ""light switch"" state machine, which can be on or\noff, and flipped to reverse its state:', ""In this case, we've chosen a serialized representation for each state via the\n"", ' argument.  The on state is represented by the string ', ', and\nthe off state is represented by the string ', '.', ""Now, let's just add an input that lets us tell if the switch is on or not."", 'To save the state, we have the ', ' method.  A\nmethod decorated with ', ' gets an extra argument injected at the\nbeginning of its argument list: the serialized identifier for the state.  In\nthis case, either ', ' or ', '.  Since state machine output methods can\nalso affect other state on the object, a serializer method is expected to\nreturn ', ' relevant state for serialization.', 'For our simple light switch, such a method might look like this:', 'Serializers can be public methods, and they can return whatever you like.  If\nnecessary, you can have different serializers - just multiple methods decorated\nwith ', ' - for different formats; return one data-structure\nfor JSON, one for XML, one for a database row, and so on.', 'When it comes time to unserialize, though, you generally want a private method,\nbecause an unserializer has to take a not-fully-initialized instance and\npopulate it with state.  It is expected to ', ' the serialized machine\nstate token that was passed to the serializer, but it can take whatever\narguments you like.  Of course, in order to return that, it probably has to\ntake it somewhere in its arguments, so it will generally take whatever a paired\nserializer has returned as an argument.', 'So our unserializer would look like this:', 'Generally you will want a classmethod deserialization constructor which you\nwrite yourself to call this, so that you know how to create an instance of your\nown object, like so:', 'Saving and loading our ', ' along with its state-machine state can now\nbe accomplished as follows:', 'More comprehensive (tested, working) examples are present in ', '.', 'Go forth and machine all the state!', '\n      Self-service finite-state machines for the programmer on the go.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    '])"
content
"(['glyph/automat', 'Name already in use', 'Automat', 'input', 'body', 'output', 'states', 'users', 'inputs', 'outputs', 'not have to check themselves', 'better', ""we can't add any\nimplementation code to the input method"", 'all', 'return'], ['\n        Self-service finite-state machines for the programmer on the go.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', '\n', '\n', 'Automat is a library for concise, idiomatic Python expression of finite-state\nautomata (particularly deterministic finite-state transducers).', 'Read more here, or on ', ', or watch the following videos for an overview and presentation', 'Overview and presentation by ', ' at the first talk of the first Pyninsula meetup, on February 21st, 2017:', '\n', 'Presentation by ', ' at PyCon Australia, on August 6th 2017:', '\n', 'Sometimes you have to create an object whose behavior varies with its state,\nbut still wishes to present a consistent interface to its callers.', 'For example, let\'s say you\'re writing the software for a coffee machine.  It\nhas a lid that can be opened or closed, a chamber for water, a chamber for\ncoffee beans, and a button for ""brew"".', 'There are a number of possible states for the coffee machine.  It might or\nmight not have water.  It might or might not have beans.  The lid might be open\nor closed.  The ""brew"" button should only actually attempt to brew coffee in\none of these configurations, and the ""open lid"" button should only work if the\ncoffee is not, in fact, brewing.', 'With diligence and attention to detail, you can implement this correctly using\na collection of attributes on an object; ', ', ', ',\n', ' and so on.  However, you have to keep all these attributes\nconsistent.  As the coffee maker becomes more complex - perhaps you add an\nadditional chamber for flavorings so you can make hazelnut coffee, for\nexample - you have to keep adding more and more checks and more and more\nreasoning about which combinations of states are allowed.', ""Rather than adding tedious 'if' checks to every single method to make sure that\neach of these flags are exactly what you expect, you can use a state machine to\nensure that if your code runs at all, it will be run with all the required\nvalues initialized, because they have to be called in the order you declare\nthem."", 'You can read about state machines and their advantages for Python programmers\nin more detail ', '.', 'There are\n', '.\nSo it behooves me to say why yet another one would be a good idea.', 'Automat is designed around this principle: while organizing your code around\nstate machines is a good idea, your callers don\'t, and shouldn\'t have to, care\nthat you\'ve done so.  In Python, the ""input"" to a stateful system is a method\ncall; the ""output"" may be a method call, if you need to invoke a side effect,\nor a return value, if you are just performing a computation in memory.  Most\nother state-machine libraries require you to explicitly create an input object,\nprovide that object to a generic ""input"" method, and then receive results,\nsometimes in terms of that library\'s interfaces and sometimes in terms of\nclasses you define yourself.', 'For example, a snippet of the coffee-machine example above might be implemented\nas follows in naive Python:', ""With Automat, you'd create a class with a "", ' attribute:', 'and then you would break the above logic into two pieces - the ', '\n', ', declared like so:', ""It wouldn't do any good to declare a method "", "" on this, however, because\ninput methods don't actually execute their bodies when called; doing actual\nwork is the "", ""'s job:"", 'As well as a couple of ', "" - and for simplicity's sake let's say that the\nonly two states are "", ' and ', ':', ' is the ', ' state because ', ' starts without beans\nin it.', '(And another input to put some beans in:)', 'Finally, you hook everything together with the ', ' method of the functions\ndecorated with ', ':', 'To ', ' of this coffee machine class though, it still looks like a POPO\n(Plain Old Python Object):', 'All of the ', ' are provided by calling them like methods, all of the\n', ' are automatically invoked when they are produced according to the\noutputs specified to ', "" and all of the states are simply opaque tokens -\nalthough the fact that they're defined as methods like inputs and outputs\nallows you to put docstrings on them easily to document them."", ""Don't do that."", 'One major reason for having a state machine is that you want the callers of the\nstate machine to just provide the appropriate input to the machine at the\nappropriate time, and ', ' what state the machine is\nin.  So if you are tempted to write some code like this:', 'Instead, just make your calling code do this:', 'and then change your state machine to look like this:', 'so that the responsibility for knowing which state the state machine is in\nremains within the state machine itself.', 'Quite often you want to be able to pass parameters to your methods, as well as\ninspecting their results.  For example, when you brew the coffee, you might\nexpect a cup of coffee to result, and you would like to see what kind of coffee\nit is.  And if you were to put delicious hand-roasted small-batch artisanal\nbeans into the machine, you would expect a ', "" cup of coffee than if you\nwere to use mass-produced beans.  You would do this in plain old Python by\nadding a parameter, so that's how you do it in Automat as well."", 'However, one important difference here is that ', '.  Inputs are purely a declaration of\nthe interface; the behavior must all come from outputs.  Therefore, the change\nin the state of the coffee machine must be represented as an output.  We can\nadd an output method like this:', 'and then connect it to the ', ' by changing the transition from\n', ' to ', ' like so:', 'Now, when you call:', 'the machine will remember the beans for later.', 'So how do we get the beans back out again?  One of our outputs needs to have a\nreturn value.  It would make sense if our ', "" method returned the cup\nof coffee that it made, so we should add an output.  So, in addition to heating\nthe heating element, let's add a return value that describes the coffee.  First\na new output:"", ""Note that we don't need to check first whether "", "" exists or not,\nbecause we can only reach this output method if the state machine says we've\ngone through a set of states that sets this attribute."", 'Now, we need to hook up ', ' to the process of brewing, so change\nthe brewing transition to:', 'Now, we can call it:', ""Except... wait a second, what's that "", ' doing there?', 'Since every input can produce multiple outputs, in automat, the default return\nvalue from every input invocation is a ', '.  In this case, we have both\n', ' and ', "" outputs, so we're seeing\nboth of their return values.  However, this can be customized, with the\n"", ' argument to ', '; the ', ' is a callable which takes an\niterable of all the outputs\' return values and ""collects"" a single return value\nto return to the caller of the state machine.', 'In this case, we only care about the last output, so we can adjust the call to\n', ' like this:', ""And now, we'll get just the return value we want:"", 'There are APIs for serializing the state machine.', 'First, you have to decide on a persistent representation of each state, via the\n', ' argument to the ', ' decorator.', 'Let\'s take this very simple ""light switch"" state machine, which can be on or\noff, and flipped to reverse its state:', ""In this case, we've chosen a serialized representation for each state via the\n"", ' argument.  The on state is represented by the string ', ', and\nthe off state is represented by the string ', '.', ""Now, let's just add an input that lets us tell if the switch is on or not."", 'To save the state, we have the ', ' method.  A\nmethod decorated with ', ' gets an extra argument injected at the\nbeginning of its argument list: the serialized identifier for the state.  In\nthis case, either ', ' or ', '.  Since state machine output methods can\nalso affect other state on the object, a serializer method is expected to\nreturn ', ' relevant state for serialization.', 'For our simple light switch, such a method might look like this:', 'Serializers can be public methods, and they can return whatever you like.  If\nnecessary, you can have different serializers - just multiple methods decorated\nwith ', ' - for different formats; return one data-structure\nfor JSON, one for XML, one for a database row, and so on.', 'When it comes time to unserialize, though, you generally want a private method,\nbecause an unserializer has to take a not-fully-initialized instance and\npopulate it with state.  It is expected to ', ' the serialized machine\nstate token that was passed to the serializer, but it can take whatever\narguments you like.  Of course, in order to return that, it probably has to\ntake it somewhere in its arguments, so it will generally take whatever a paired\nserializer has returned as an argument.', 'So our unserializer would look like this:', 'Generally you will want a classmethod deserialization constructor which you\nwrite yourself to call this, so that you know how to create an instance of your\nown object, like so:', 'Saving and loading our ', ' along with its state-machine state can now\nbe accomplished as follows:', 'More comprehensive (tested, working) examples are present in ', '.', 'Go forth and machine all the state!', '\n      Self-service finite-state machines for the programmer on the go.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    '])"
