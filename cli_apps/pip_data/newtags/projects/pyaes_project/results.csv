content
"(['ricmoo/pyaes', 'Name already in use', 'pyaes', 'password-based key-derivation function', '""password""', '""password""', 'crypt', '/tests/test-aes.py', 'why not?', 'why not?', 'Bitcoin'], ['\n        Pure-Python implementation of AES block-cipher and common modes of operation.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'A pure-Python implementation of the AES block cipher algorithm and the common modes of operation (CBC, CFB, CTR, ECB and OFB).', 'All keys may be 128 bits (16 bytes), 192 bits (24 bytes) or 256 bits (32 bytes) long.', 'To generate a random key use:', 'To generate keys from simple-to-remember passwords, consider using a ', ' such as ', '.', 'There are many modes of operations, each with various pros and cons. In general though, the ', ' and ', ' modes are recommended. The ', ', and is included primarily for completeness.', 'Each of the following examples assumes the following key:', 'Since most of the modes of operations require data in specific block-sized or segment-sized blocks, it can be difficult when working with large arbitrary streams or strings of data.', 'The BlockFeeder class is meant to make life easier for you, by buffering bytes across multiple calls and returning bytes as they are available, as well as padding or stripping the output when finished, if necessary.', 'This is meant to make it even easier to encrypt and decrypt streams and large files.', 'Decrypting is identical, except you would use ', ', and the encrypted file would be the ', ' and target for decryption the ', '.', 'Generally you should use one of the modes of operation above. This may however be useful for experimenting with a custom mode of operation or dealing with encrypted blocks.', 'The block cipher requires exactly one block of data to encrypt or decrypt, and each block should be an array with each element an integer representation of a byte.', 'This seems to be a point of confusion for many people new to using encryption. You can think of the key as the ', '. However, these algorithms require the ', ' to be a specific length.', 'With AES, there are three possible key lengths, 16-bytes, 24-bytes or 32-bytes. When you create an AES object, the key size is automatically detected, so it is important to pass in a key of the correct length.', 'Often, you wish to provide a password of arbitrary length, for example, something easy to remember or write down. In these cases, you must come up with a way to transform the password into a key, of a specific length. A ', ' (PBKDF) is an algorithm designed for this exact purpose.', 'Here is an example, using the popular (possibly obsolete?) ', ' PBKDF:', 'The ', ' PBKDF is intentionally slow, to make it more difficult to brute-force guess a password:', 'Another possibility, is to use a hashing function, such as SHA256 to hash the password, but this method may be vulnerable to ', ', unless you use a ', '.', 'There is a test case provided in ', ' which does some basic performance testing (its primary purpose is moreso as a regression test).', 'Based on that test, in ', ', this library is about 30x slower than ', ' for CBC, ECB and OFB; about 80x slower for CFB; and 300x slower for CTR.', 'Based on that same test, in ', ', this library is about 4x slower than ', ' for CBC, ECB and OFB; about 12x slower for CFB; and 19x slower for CTR.', 'The PyCrypto documentation makes reference to the counter call being responsible for the speed problems of the counter (CTR) mode of operation, which is why they use a specially optimized counter. I will investigate this problem further in the future.', 'The short answer, ', 'The longer answer, is for my ', ' library. I required a pure-Python AES implementation that supported 256-bit keys with the counter (CTR) mode of operation. After searching, I found several implementations, but all were missing CTR or only supported 128 bit keys. After all the work of learning AES inside and out to implement the library, it was only a marginal amount of extra work to library-ify a more general solution. So, ', 'E-mail me at ', ' with any questions, suggestions, comments, et cetera.', 'Umm... Ok? :-)', '  - ', '\n      Pure-Python implementation of AES block-cipher and common modes of operation.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'Supports all AES key sizes', 'Supports all AES common modes', 'Pure-Python (no external dependencies)', 'BlockFeeder API allows streams to easily be encrypted and decrypted', 'Python 2.x and 3.x support (make sure you pass in bytes(), not strings for Python 3)', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    '])"
