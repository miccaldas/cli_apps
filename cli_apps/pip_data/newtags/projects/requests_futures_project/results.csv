content
"(['ross/requests-futures', 'Name already in use'], ['\n        Asynchronous Python HTTP Requests for Humans using Futures\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Small add-on for the python ', "" http library. Makes use of python 3.2's\n"", ' or the ', ' for prior versions of python.', 'The additional API and changes are minimal and strives to avoid surprises.', 'The following synchronous code:', 'Can be translated to make use of futures, and thus be asynchronous by creating\na FuturesSession and catching the returned Future in place of Response. The\nResponse can be retrieved by calling the result method on the Future:', 'By default a ThreadPoolExecutor is created with 8 workers. If you would like to\nadjust that value or share a executor across multiple sessions you can provide\none to the FuturesSession constructor.', 'As a shortcut in case of just increasing workers number you can pass\nmax_workers straight to the FuturesSession constructor:', 'FutureSession will use an existing session object if supplied:', ""That's it. The api of requests.Session is preserved without any modifications\nbeyond returning a Future rather than Response. As with all futures exceptions\nare shifted (thrown) to the future.result() call so try/except blocks should be\nmoved there."", 'The most common piece of information needed is the URL of the request. This can\nbe accessed without any extra steps using the request property of the\nresponse object.', 'There are situations in which you may want to tie additional information to a\nrequest/response. There are a number of ways to go about this, the simplest is\nto attach additional information to the future object itself.', ""If you know that you won't be needing any additional responses from futures that\nhaven't yet resolved, it's a good idea to cancel those requests. You can do this\nby using the session as a context manager:"", 'In this example, the second or third request will be skipped, saving time and\nresources that would otherwise be wasted.', 'Without preserving the requests order:', ""Additional processing can be done in the background using requests's "", '\nfunctionality. This can be useful for shifting work out of the foreground, for\na simple example take json parsing.', 'Hooks can also be applied to the session.', 'A more advanced example that adds an elapsed property to all requests.', 'Similarly to ThreadPoolExecutor, it is possible to use an instance of\nProcessPoolExecutor. As the name suggest, the requests will be executed\nconcurrently in separate processes rather than threads.', 'Hint', 'Using the ProcessPoolExecutor is useful, in cases where memory\nusage per request is very high (large response) and cycling the interpreter\nis required to release memory back to OS.', 'A base requirement of using ProcessPoolExecutor is that the Session.request,\nFutureSession all be pickle-able.', 'This means that only Python 3.5 is fully supported, while Python versions\n3.4 and above REQUIRE an existing requests.Session instance to be passed\nwhen initializing FutureSession. Python 2.X and < 3.4 are currently not\nsupported.', 'In case pickling fails, an exception is raised pointing to this documentation.', 'Important', '\n      Asynchronous Python HTTP Requests for Humans using Futures\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n        ', '\n      ', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'Python >= 3.4 required', 'A session instance is required when using Python < 3.5', 'If sub-classing FuturesSession it must be importable (module global)', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
