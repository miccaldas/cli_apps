content
"(['Blinker Documentation', 'Changes', 'MIT License', ' ', 'receiver', 'sender', 'receiver', 'sender', 'receiver', 'sender', 'receiver', 'receiver', 'sender', 'sender', 'sender', 'receiver', 'receiver', 'receiver', 'receiver', 'sender', 'sender', 'sender', 'receiver', 'sender', 'weak', 'receiver', 'sender', 'name', 'name', 'name'], ['Blinker provides fast & simple object-to-object and broadcast\nsignaling for Python objects.', 'The core of Blinker is quite small but provides powerful features:', 'a global registry of named signals', 'anonymous signals', 'custom name registries', 'permanently or temporarily connected receivers', 'automatically disconnected receivers via weak referencing', 'sending arbitrary data payloads', 'collecting return values from signal receivers', 'thread safety', 'Blinker was written by Jason Kirtand and is provided under the MIT\nLicense. The library supports Python 2.7 and Python 3.5 or later;\nor Jython 2.7 or later; or PyPy 2.7 or later.', 'Named signals are created with ', ':', 'Every call to ', ' returns the same signal object,\nallowing unconnected parts of code (different modules, plugins,\nanything) to all use the same signal without requiring any code\nsharing or special imports.', ' registers a function to be invoked each time\nthe signal is emitted.  Connected functions are always passed the\nobject that caused the signal to be emitted.', 'Code producing events of interest can ', '\nnotifications to all connected receivers.', 'Below, a simple ', ' class emits a ', ' signal when it’s\nabout to process something, and ', ' when it is done.  It\npasses ', ' to the ', ' method, signifying that\nthat particular instance was responsible for emitting the signal.', 'Notice the ', ' signal in ', '?  No receivers have\nconnected to ', ' yet, and that’s a-ok.  Calling\n', ' on a signal with no receivers will result in no\nnotifications being sent, and these no-op sends are optimized to be as\ninexpensive as possible.', 'The default connection to a signal invokes the receiver function when\nany sender emits it.  The ', ' function accepts an\noptional argument to restrict the subscription to one specific sending\nobject:', 'This function has been subscribed to ', ' but only when sent by\n', ':', 'Additional keyword arguments can be passed to ', '.\nThese will in turn be passed to the connected functions:', 'The return value of ', ' collects the return values of\neach connected function as a list of (', ', ', ') pairs:', 'Signals need not be named.  The ', ' constructor creates a\nunique signal each time it is invoked.  For example, an alternative\nimplementation of the Processor from above might provide the\nprocessing signals as class attributes:', 'You may have noticed the return value of ', ' in\nthe console output in the sections above.  This allows ', ' to\nbe used as a decorator on functions:', 'While convenient, this form unfortunately does not allow the\n', ' or ', ' arguments to be customized for the connected\nfunction.  For this, ', ' can be used:', 'Signals are optimized to send very quickly, whether receivers are\nconnected or not.  If the keyword data to be sent with a signal is\nexpensive to compute, it can be more efficient to check to see if any\nreceivers are connected first by testing the ', '\nproperty:', 'Checking for a receiver listening for a particular sender is also\npossible:', 'Both named and anonymous signals can be passed a ', ' argument at\nconstruction to set the pydoc help text for the signal.  This\ndocumentation will be picked up by most documentation generators (such\nas sphinx) and is nice for documenting any additional data parameters\nthat will be sent down with the signal.', 'See the documentation of the ', ' built-in signal\nfor an example.', 'All public API members can (and should) be imported from ', ':', 'Token for “any sender”.', 'Sent by a ', ' after a receiver connects.', 'the Signal that was connected to', ' – the connected receiver', ' – the sender to connect to', ' – true if the connection to receiver_arg is a weak reference', 'As of 1.2, individual signals have their own private\n', ' and\n', ' signals with a slightly simplified\ncall signature.  This global signal is planned to be removed in 1.6.', 'A notification emitter.', ' – optional.  If provided, will be assigned to the signal’s\n__doc__ attribute.', 'Connect ', ' to signal events sent by ', '.', ' – A callable.  Will be invoked by ', ' with\n', ' as a single positional argument and any ', ' that\nwere provided to a call to ', '.', ' – Any object or ', ', defaults to ', '.\nRestricts notifications delivered to ', ' to only those\n', ' emissions sent by ', '.  If ', ', the receiver\nwill always be notified.  A ', ' may be connected to\nmultiple ', ' values on the same Signal through multiple calls\nto ', '.', ' – If true, the Signal will hold a weakref to ', '\nand automatically disconnect when ', ' goes out of scope or\nis garbage collected.  Defaults to True.', 'Connect the decorated function as a receiver for ', '.', ' – Any object or ', '.  The decorated function\nwill only receive ', ' emissions sent by ', '.  If\n', ', the receiver will always be notified.  A function may be\ndecorated multiple times with differing ', ' values.', ' – If true, the Signal will hold a weakref to the\ndecorated function and automatically disconnect when ', '\ngoes out of scope or is garbage collected.  Unlike\n', ', this defaults to False.', ' as a single positional argument and any ', ' that\nwere provided to the call to ', '.', 'Execute a block with the signal temporarily connected to ', '.', ' – a receiver callable', ' – optional, a sender to filter on', 'This is a context manager for use in the ', ' statement.  It can\nbe useful in unit tests.  ', ' is connected to the signal for\nthe duration of the ', ' block, and will be disconnected\nautomatically when exiting the block:', 'Disconnect ', ' from this signal’s events.', ' – a previously ', ' callable', ' – a specific sender to disconnect from, or ', '\nto disconnect from all senders.  Defaults to ', '.', 'True if there is probably a receiver for ', '.', 'Performs an optimistic check only.  Does not guarantee that all\nweakly referenced receivers are still alive.  See\n', ' for a stronger search.', 'Iterate all live receivers listening for ', '.', 'Emit this signal on behalf of ', ', passing on ', '.', 'Returns a list of 2-tuples, pairing receivers with their return\nvalue. The ordering of receiver notification is undefined.', ' – Any object or ', '.  If omitted, synonymous\nwith ', '.  Only accepts one positional argument.', ' – Data to be sent to receivers.', 'An alias for ', '.', ' – a receiver callable', ' – optional, a sender to filter on', 'Renamed to ', '.  ', ' was\ndeprecated in 1.2 and will be removed in a subsequent version.', 'An ', ' convenience synonym, allows ', '\nwithout an additional import.', 'Emitted after each ', '.', 'The signal sender is the signal instance, and the ', '\narguments are passed through: ', ', ', ', and ', '.', 'Emitted after ', '.', 'The sender is the signal instance, and the ', ' arguments\nare passed through: ', ' and ', '.', 'Note, this signal is emitted ', ' when ', ' is\ncalled explicitly.', 'The disconnect signal can not be emitted by an automatic disconnect\n(due to a weakly referenced receiver or sender going out of scope),\nas the receiver and/or sender instances are no longer available for\nuse at the time this signal would be emitted.', 'An alternative approach is available by subscribing to\n', ' and setting up a custom weakref cleanup\ncallback on weak receivers and senders.', 'A mapping of connected receivers.', 'The values of this mapping are not meaningful outside of the\ninternal ', ' implementation, however the boolean value\nof the mapping is useful as an extremely efficient check to see if\nany receivers are connected to the signal.', 'Return the ', ' ', ', creating it if required.', 'Repeated calls to this function will return the same signal object.\nSignals are created in a global ', '.', 'Bases: ', 'A named generic notification emitter.', ' – optional.  If provided, will be assigned to the signal’s\n__doc__ attribute.', 'The name of this signal.', 'Bases: ', 'A mapping of signal names to signals.', 'Return the ', ' ', ', creating it if required.', 'Repeated calls to this function will return the same signal object.', 'Bases: ', 'A weak mapping of signal names to signals.', 'Automatically cleans up unused Signals when the last reference goes out\nof scope.  This namespace implementation exists for a measure of legacy\ncompatibility with Blinker <= 1.2, and may be dropped in the future.', 'Return the ', ' ', ', creating it if required.', 'Repeated calls to this function will return the same signal object.', 'Released 2022-07-17', 'Support Python >= 3.7 and PyPy. Python 2, Python < 3.7, and Jython\nmay continue to work, but the next release will make incompatible\nchanges.', 'Released 2015-07-23', 'Verified Python 3.4 support, no changes needed.', 'Additional bookkeeping cleanup for non-', ' connections at\ndisconnect time.', 'Added ', ' to prune stale bookkeeping on\ndemand.', 'Released 2013-07-03', 'The global signal stash behind ', ' is now backed by a\nregular name-to-', ' dictionary. Previously, weak references\nwere held in the mapping and ephermal usage in code like\n', ' could have surprising program\nbehavior depending on import order of modules.', ' is now built on a regular dict. Use ', '\nfor the older, weak-referencing behavior.', ' uses an alterate hashing strategy\nto avoid sharp edges in text identity.', 'Released 2011-10-26', 'Added ', ' and\n', ' per-', ' signals.', 'Deprecated the global ', ' signal.', 'Verified Python 3.2 support, no changes needed.', 'Released 2010-07-21', 'Added ', ' decorator', 'Added ', ' shorthand name for the\n', ' context manager.', 'Released 2010-03-28', 'Python 3.0 and 3.1 compatibility.', 'Released 2010-02-26', 'Added ', ' context manager.', 'Docs! Sphinx docs, project web site.', 'Released 2010-02-14', 'Initial release.', 'Extracted from ', '.', 'Added Python 2.4 compatibility.', 'Added nearly functional Python 3.1 compatibility. Everything except\nconnecting to instance methods seems to work.', 'Copyright 2010 Jason Kirtland', 'Permission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n“Software”), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:', 'The above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.', 'THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.', '\n          ', ' »', '\n  \n    ', '\n  \n    ', '\n  ', '\n', '\n', '\n'])"
