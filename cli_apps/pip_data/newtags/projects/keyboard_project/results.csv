content
"(['boppreh/keyboard', 'Name already in use', 'keyboard', 'API', '(aliases: ', ')', '(aliases: ', ', ', ', ', ')', '(aliases: ', ')', '(aliases: ', ', ', ', ', ')', '(aliases: ', ', ', ', ', ')', '(aliases: ', ')', '(aliases: ', ')', '(aliases: ', ')', '(aliases: ', ')', 'hotkey', 'pressed'], ['\n        Hook and simulate global keyboard events on Windows and Linux.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Take full control of your keyboard with this small Python library. Hook global events, register hotkeys, simulate key presses and much more.', 'Install the ', ':', 'or clone the repository (no installation required, source files are sufficient):', 'or ', ' into your project folder.', 'Then check the ', ' to see what features are available.', 'Use as library:', 'Use as standalone module:', 'Returns True if ', ' is a scan code or name of a modifier key.', 'Returns a list of scan codes associated with this key (name or scan code).', 'Parses a user-provided hotkey into nested tuples representing the\nparsed structure, with the bottom values being lists of scan codes.\nAlso accepts raw scan codes, which are then wrapped in the required\nnumber of nestings.', 'Example:', 'Sends OS events that perform the given ', ' hotkey.', 'Note: keys are released in the opposite order they were pressed.', 'Presses and holds down a hotkey (see ', ').', 'Releases a hotkey (see ', ').', 'Returns True if the key is pressed.', 'Calls the provided function in a new thread after waiting some time.\nUseful for giving the system some time to process an event, without blocking\nthe current execution flow.', 'Installs a global listener on all available keyboards, invoking ', '\neach time a key is pressed or released.', 'The event passed to the callback is of type ', ',\nwith the following attributes:', 'Returns the given callback for easier development.', 'Invokes ', ' for every KEY_DOWN event. For details see ', '.', 'Invokes ', ' for every KEY_UP event. For details see ', '.', 'Hooks key up and key down events for a single key. Returns the event handler\ncreated. To remove a hooked key use ', ' or\n', '.', 'Note: this function shares state with hotkeys, so ', '\naffects it as well.', 'Invokes ', ' for KEY_DOWN event related to the given key. For details see ', '.', 'Invokes ', ' for KEY_UP event related to the given key. For details see ', '.', 'Removes a previously added hook, either by callback or by the return value\nof ', '.', 'Removes all keyboard hooks in use, including hotkeys, abbreviations, word\nlisteners, ', 'ers and ', 's.', 'Suppresses all key events of the given key, regardless of modifiers.', 'Whenever the key ', ' is pressed or released, regardless of modifiers,\npress or release the hotkey ', ' instead.', 'Parses a user-provided hotkey. Differently from ', ',\ninstead of each step being a list of the different scan codes for each key,\neach step is a list of all possible combinations of those scan codes.', 'Invokes a callback every time a hotkey is pressed. The hotkey must\nbe in the format ', '. This would trigger when the user holds\nctrl, shift and ""a"" at once, releases, and then presses ""s"". To represent\nliteral commas, pluses, and spaces, use their names (\'comma\', \'plus\',\n\'space\').', 'The event handler function is returned. To remove a hotkey call\n', ' or ', '.\nbefore the hotkey state is reset.', 'Note: hotkeys are activated when the last key is ', ', not released.\nNote: the callback is executed in a separate thread, asynchronously. For an\nexample of how to use a callback synchronously, see ', '.', 'Examples:', 'Removes a previously hooked hotkey. Must be called with the value returned\nby ', '.', 'Removes all keyboard hotkeys in use, including abbreviations, word listeners,\n', 'ers and ', 's.', 'Whenever the hotkey ', ' is pressed, suppress it and send\n', ' instead.', 'Example:', 'Builds a list of all currently pressed scan codes, releases them and returns\nthe list. Pairs well with ', ' and ', '.', 'Given a list of scan_codes ensures these keys, and only these keys, are\npressed. Pairs well with ', ', alternative to ', '.', 'Like ', ', but only restores modifier keys.', 'Sends artificial keyboard events to the OS, simulating the typing of a given\ntext. Characters not available on the keyboard are typed as explicit unicode\ncharacters using OS-specific functionality, such as alt+codepoint.', 'To ensure text integrity, all currently pressed keys are released before\nthe text is typed, and modifiers are restored afterwards.', 'Blocks the program execution until the given hotkey is pressed or,\nif given no parameters, blocks forever.', 'Returns a string representation of hotkey from the given key names, or\nthe currently pressed keys if not given.  This function:', 'Example:', 'Blocks until a keyboard event happens, then returns that event.', ""Blocks until a keyboard event happens, then returns that event's name or,\nif missing, its scan code."", 'Similar to ', ', but blocks until the user presses and releases a\nhotkey (or single key), then returns a string representing the hotkey\npressed.', 'Example:', 'Given a sequence of events, tries to deduce what strings were typed.\nStrings are separated when a non-textual key is pressed (such as tab or\nenter). Characters are converted to uppercase according to shift and\ncapslock status. If ', ' is True, backspaces remove the last\ncharacter typed.', 'This function is a generator, so you can pass an infinite stream of events\nand convert them to strings in real time.', 'Note this functions is merely an heuristic. Windows for example keeps per-\nprocess keyboard state such as keyboard layout, and this information is not\navailable for our hooks.', 'Starts recording all keyboard events into a global variable, or the given\nqueue if any. Returns the queue of events and the hooked function.', 'Use ', ' or ', ' to stop.', 'Stops the global recording of events and returns a list of the events\ncaptured.', 'Records all keyboard events from all keyboards until the user presses the\ngiven hotkey. Then returns the list of events recorded, of type\n', '. Pairs well with\n', '.', 'Note: this is a blocking function.\nNote: for more details on the keyboard hook and events see ', '.', 'Plays a sequence of recorded events, maintaining the relative time\nintervals. If speed_factor is <= 0 then the actions are replayed as fast\nas the OS allows. Pairs well with ', '.', 'Note: the current keyboard state is cleared at the beginning and restored at\nthe end of the function.', ""Invokes a callback every time a sequence of characters is typed (e.g. 'pet')\nand followed by a trigger key (e.g. space). Modifiers (e.g. alt, ctrl,\nshift) are ignored."", 'Returns the event handler created. To remove a word listener use\n', ' or ', '.', 'Note: all actions are performed on key down. Key up events are ignored.\nNote: word matches are ', '.', 'Removes a previously registered word listener. Accepts either the word used\nduring registration (exact string) or the event handler returned by the\n', ' or ', ' functions.', 'Registers a hotkey that replaces one typed text with another. For example', 'Replaces every ""tm"" followed by a space with a â„¢ symbol (and no space). The\nreplacement is done by sending backspace events.', 'For more details see ', '.', 'Given a key name (e.g. ""LEFT CONTROL""), clean up the string and convert to\nthe canonical representation (e.g. ""left ctrl"") if one is known.', '\n      Hook and simulate global keyboard events on Windows and Linux.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ' on all keyboards (captures keys regardless of focus).', ' and ', ' keyboard events.', 'Works with ', ' and ', ' (requires sudo), with experimental ', ' support (thanks @glitchassassin!).', ', no C modules to be compiled.', '. Trivial to install and deploy, just copy the files.', '.', 'Complex hotkey support (e.g. ', ') with controllable timeout.', 'Includes ', ' (e.g. ', ' and ', ', ', ').', 'Maps keys as they actually are in your layout, with ', ' (e.g. ', ').', ""Events automatically captured in separate thread, doesn't block main program."", 'Tested and documented.', ""Doesn't break accented dead keys (I'm looking at you, pyHook)."", 'Mouse support available via project ', ' (', ').', ""Events generated under Windows don't report device id ("", '). ', 'Media keys on Linux may appear nameless (scan-code only) or not at all. ', 'Key suppression/blocking only available on Windows. ', 'To avoid depending on X, the Linux parts reads raw device files (', ') but this requires root.', 'Other applications, such as some games, may register hooks that swallow all key events. In this case ', ' will be unable to report events.', ""This program makes no attempt to hide itself, so don't use it for keyloggers or online gaming bots. Be responsible."", 'SSH connections forward only the text typed, not keyboard events. Therefore if you connect to a server or Raspberry PI that is running ', ' via SSH, the server will not detect your key events.', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', "" can be either a scan code (e.g. 57 for space), single key\n(e.g. 'space') or multi-key, multi-step hotkey (e.g. 'alt+F4, enter')."", ' if true then press events are sent. Defaults to True.', ' if true then release events are sent. Defaults to True.', ': an Unicode representation of the character (e.g. ""&"") or\ndescription (e.g.  ""space""). The name is always lower-case.', ': number representing the physical key, e.g. 55.', ': timestamp of the time the event occurred, with as much precision\nas given by the OS.', ' is an optional list of arguments to passed to the callback during\neach invocation.', ' defines if successful triggers should block the keys from being\nsent to other programs.', ' is the amount of seconds allowed to pass between key presses.', ' if true, the callback is invoked on key release instead\nof key press.', ' is the number of seconds to wait between keypresses, defaults to\nno delay.', ' can be used to restore the state of pressed keys\nafter the text is typed, i.e. presses the keys that were released at the\nbeginning. Defaults to True.', ' forces typing all characters as explicit unicode (e.g.\nalt+codepoint or special events). If None, uses platform-specific suggested\nvalue.', 'normalizes names;', 'removes ""left"" and ""right"" prefixes;', 'replaces the ""+"" key name with ""plus"" to avoid ambiguity;', 'puts modifier keys first, in a standardized order;', 'sort remaining keys;', 'finally, joins everything with ""+"".', "" the typed text to be matched. E.g. 'pet'."", ' is an argument-less function to be invoked each time the word\nis typed.', ' is the list of keys that will cause a match to be checked. If\nthe user presses some key that is not a character (len>1) and not in\ntriggers, the characters so far will be discarded. By default the trigger\nis only ', '.', "" defines if endings of words should also be checked instead\nof only whole words. E.g. if true, typing 'carpet'+space will trigger the\nlistener for 'pet'. Defaults to false, only whole words are checked."", ' is the maximum number of seconds between typed characters before\nthe current word is discarded. Defaults to 2 seconds.', "" defines if endings of words should also be checked instead\nof only whole words. E.g. if true, typing 'carpet'+space will trigger the\nlistener for 'pet'. Defaults to false, only whole words are checked."", ' is the maximum number of seconds between typed characters before\nthe current word is discarded. Defaults to 2 seconds.', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    ', '\n        ', '\n    '])"
