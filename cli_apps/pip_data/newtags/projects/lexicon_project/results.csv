content
"(['bitprophet/lexicon', 'Name already in use', 'use'], ['\n        Powerful Python dict subclass(es) providing aliasing & attribute access\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', ' ', ' ', ' ', ' ', 'Lexicon is a simple collection of Python ', ' subclasses providing extra\npower:', ', a dictionary supporting both simple and complex key aliasing:', ', supporting attribute read & write access, e.g. ', ' exhibits ', ' and ', '.', ', a subclass of both of the above which exhibits both sets of\nbehavior.', 'If you have a clone of the source repository, you can run the tests like so:', 'In all examples, ', ' is the alias and ', ' is the ""real"",\nunaliased key.', ': Alias ', ' to ', ' so\n', ' behaves exactly like ', ' for both reads and\nwrites.', ': Alias ', ' to\nboth ', ' and ', '. As you might expect, this only works\nwell for writes, as there is never any guarantee that all targets of the\nalias will contain the same value.', ': Removes the ', ' alias; any subsequent\nreads/writes to ', ' will behave as normal for a regular ', '.', ' (aka ', '): Returns True when given an alias,\nso if ', ' is an alias to some other key, dictionary membership tests\nwill behave as if ', ' is set.', ' (aka ', '): This effectively becomes ', ' -- to remove the alias itself, use ', '.', ': Deletes the real key/value pair (i.e. it calls\n', "") but doesn't touch any aliases pointing to "", '.', 'Caveats:', 'Because of the single-key/multi-key duality, ', ' is incapable of\nhonoring non-string-type keys when aliasing (it must test ', ' to tell strings apart from non-string iterables).', 'Lexicon subclasses from ', ' first, then ', ', with the\nend result that attribute access will honor aliases. E.g.:', '\n      Powerful Python dict subclass(es) providing aliasing & attribute access\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', 'Alias a single key to another key, so that e.g. ', ' points\nto ', ', for both reads and writes.', 'Alias a single key to a list of other keys, for writing only, e.g. with\n', ' one can make an alias ', ' mapping to ', ' and then e.g. ', '.', ""Aliasing is recursive: an alias pointing to another alias will behave as\nif it points to the other alias' target."", '\n', '\n', '\n', ' (or one of the superclasses)', 'Use as needed.', '\n', ' is the first keyword argument, but typically it can be omitted\nand still reads fine. See below examples for this usage. See below for\ndetails on how an alias affects other dict operations.', '\n', '\n', '\n', '\n', '\n', '\n', 'As a result, ""dangling"" aliases pointing to nonexistent keys will raise\n', ' on access, but will continue working if the target key is\nrepopulated later.', '\n', '\n', ' instances may still ', "" non-string keys, of course -- it\njust can't use them as alias targets."", '\n', ' (aka ', '): Maps directly to ', '.', ' (aka ', '): Maps directly to ', '.', ' (aka ', '): Maps directly to ', '.', 'Collisions between ""real"" or pre-existing attributes, and\nattributes-as-dict-keys, always results in the real attribute winning. Thus\nit isn\'t possible to use attribute access to access e.g. ', '.', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n        ', '\n    '])"
content
"(['bitprophet/lexicon', 'Name already in use', 'use'], ['\n        Powerful Python dict subclass(es) providing aliasing & attribute access\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', ' ', ' ', ' ', ' ', 'Lexicon is a simple collection of Python ', ' subclasses providing extra\npower:', ', a dictionary supporting both simple and complex key aliasing:', ', supporting attribute read & write access, e.g. ', ' exhibits ', ' and ', '.', ', a subclass of both of the above which exhibits both sets of\nbehavior.', 'If you have a clone of the source repository, you can run the tests like so:', 'In all examples, ', ' is the alias and ', ' is the ""real"",\nunaliased key.', ': Alias ', ' to ', ' so\n', ' behaves exactly like ', ' for both reads and\nwrites.', ': Alias ', ' to\nboth ', ' and ', '. As you might expect, this only works\nwell for writes, as there is never any guarantee that all targets of the\nalias will contain the same value.', ': Removes the ', ' alias; any subsequent\nreads/writes to ', ' will behave as normal for a regular ', '.', ' (aka ', '): Returns True when given an alias,\nso if ', ' is an alias to some other key, dictionary membership tests\nwill behave as if ', ' is set.', ' (aka ', '): This effectively becomes ', ' -- to remove the alias itself, use ', '.', ': Deletes the real key/value pair (i.e. it calls\n', "") but doesn't touch any aliases pointing to "", '.', 'Caveats:', 'Because of the single-key/multi-key duality, ', ' is incapable of\nhonoring non-string-type keys when aliasing (it must test ', ' to tell strings apart from non-string iterables).', 'Lexicon subclasses from ', ' first, then ', ', with the\nend result that attribute access will honor aliases. E.g.:', '\n      Powerful Python dict subclass(es) providing aliasing & attribute access\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', 'Alias a single key to another key, so that e.g. ', ' points\nto ', ', for both reads and writes.', 'Alias a single key to a list of other keys, for writing only, e.g. with\n', ' one can make an alias ', ' mapping to ', ' and then e.g. ', '.', ""Aliasing is recursive: an alias pointing to another alias will behave as\nif it points to the other alias' target."", '\n', '\n', '\n', ' (or one of the superclasses)', 'Use as needed.', '\n', ' is the first keyword argument, but typically it can be omitted\nand still reads fine. See below examples for this usage. See below for\ndetails on how an alias affects other dict operations.', '\n', '\n', '\n', '\n', '\n', '\n', 'As a result, ""dangling"" aliases pointing to nonexistent keys will raise\n', ' on access, but will continue working if the target key is\nrepopulated later.', '\n', '\n', ' instances may still ', "" non-string keys, of course -- it\njust can't use them as alias targets."", '\n', ' (aka ', '): Maps directly to ', '.', ' (aka ', '): Maps directly to ', '.', ' (aka ', '): Maps directly to ', '.', 'Collisions between ""real"" or pre-existing attributes, and\nattributes-as-dict-keys, always results in the real attribute winning. Thus\nit isn\'t possible to use attribute access to access e.g. ', '.', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n            ', '\n              ', '\n          ', '\n        ', '\n    '])"
