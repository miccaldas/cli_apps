content
"(['rocky/python-uncompyle6', 'Name already in use', 'uncompyle6', 'fragments', 'at run time', 'moves\nforward', 'last'], ['\n        A cross-version Python bytecode decompiler\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', '  ', ' ', ' ', '\n', 'Contents', 'A native Python cross-version decompiler and fragment decompiler.\nThe successor to decompyle, uncompyle, and uncompyle2.', "" translates Python bytecode back into equivalent Python\nsource code. It accepts bytecodes from Python version 1.0 to version\n3.8, spanning over 24 years of Python releases. We include Dropbox's\nPython 2.5 bytecode and some PyPy bytecodes."", ""Ok, I'll say it: this software is amazing. It is more than your\nnormal hacky decompiler. Using "", "" technology, the program\ncreates a parse tree of the program from the instructions; nodes at\nthe upper levels that look a little like what might come from a Python\nAST. So we can really classify and understand what's going on in\nsections of Python bytecode."", 'Building on this, another thing that makes this different from other\nCPython bytecode decompilers is the ability to deparse just\n', ' of source code and give source-code information around a\ngiven bytecode offset.', 'I use the tree fragments to deparse fragments of code ', '\ninside my ', ' ', '. For that, bytecode offsets are recorded\nand associated with fragments of the source code. This purpose,\nalthough compatible with the original intention, is yet a little bit\ndifferent.  See ', ' for more information.', 'Python fragment deparsing given an instruction offset is useful in\nshowing stack traces and can be encorporated into any program that\nwants to show a location in more detail than just a line number at\nruntime.  This code can be also used when source-code information does\nnot exist and there is just bytecode. Again, my debuggers make use of\nthis.', 'There were (and still are) a number of decompyle, uncompyle,\nuncompyle2, uncompyle3 forks around. Many of them come basically from\nthe same code base, and (almost?) all of them are no longer actively\nmaintained. One was really good at decompiling Python 1.5-2.3, another\nreally good at Python 2.7, but that only. Another handles Python 3.2\nonly; another patched that and handled only 3.3.  You get the\nidea. This code pulls all of these forks together and ', '. There is some serious refactoring and cleanup in this code\nbase over those old forks. Even more experimental refactoring is going\non in ', '.', 'This demonstrably does the best in decompiling Python across all\nPython versions. And even when there is another project that only\nprovides decompilation for subset of Python versions, we generally do\ndemonstrably better for those as well.', 'How can we tell? By taking Python bytecode that comes distributed with\nthat version of Python and decompiling these.  Among those that\nsuccessfully decompile, we can then make sure the resulting programs\nare syntactically correct by running the Python interpreter for that\nbytecode version.  Finally, in cases where the program has a test for\nitself, we can run the check on the decompiled code.', ""We use an automated processes to find bugs. In the issue trackers for\nother decompilers, you will find a number of bugs we've found along\nthe way. Very few to none of them are fixed in the other decompilers."", 'The code in the git repository can be run from Python 2.4 to the\nlatest Python version, with the exception of Python 3.0 through\n3.2. Volunteers are welcome to address these deficiencies if there a\ndesire to do so.', 'The way it does this though is by segregating consecutive Python versions into\ngit branches:', 'PyPy 3-2.4 and later works as well.', 'The bytecode files it can read have been tested on Python\nbytecodes from versions 1.4, 2.1-2.7, and 3.0-3.8 and later PyPy\nversions.', 'You can install from PyPI using the name ', ':', 'To install from source code, this project uses setup.py, so it follows the standard Python routine:', 'or:', 'A GNU Makefile is also provided so ', ' (possibly as root or\nsudo) will do the steps above.', 'A GNU makefile has been added to smooth over setting running the right\ncommand, and running tests from fastest to slowest.', 'If you have ', ' installed, you can see the list of all tasks\nincluding tests via ', 'Run', 'For usage help:', ""In older versions of Python it was possible to verify bytecode by\ndecompiling bytecode, and then compiling using the Python interpreter\nfor that bytecode version. Having done this, the bytecode produced\ncould be compared with the original bytecode. However as Python's code\ngeneration got better, this no longer was feasible."", 'If you want Python syntax verification of the correctness of the\ndecompilation process, add the ', ' option. However since\nPython syntax changes, you should use this option if the bytecode is\nthe right bytecode for the Python interpreter that will be checking\nthe syntax.', 'You can also cross compare the results with either another version of\nuncompyle6 since there are are sometimes regressions in decompiling\nspecific bytecode as the overall quality improves.', 'For Python 3.7 and 3.8, the code in ', ' is generally\nbetter.', 'Or try specific another python decompiler like ', ', ', ',\nor ', "".  Since the later two work differently, bugs here often\naren't in that, and vice versa."", 'There is an interesting class of these programs that is readily\navailable give stronger verification: those programs that when run\ntest themselves. Our test suite includes these.', 'And Python comes with another a set of programs like this: its test\nsuite for the standard library. We have some code in ', ' to\nfacilitate this kind of checking too.', 'The biggest known and possibly fixable (but hard) problem has to do\nwith handling control flow. (Python has probably the most diverse and\nscrewy set of compound statements I\'ve ever seen; there\nare ""else"" clauses on loops and try blocks that I suspect many\nprogrammers don\'t know about.)', ""All of the Python decompilers that I have looked at have problems\ndecompiling Python's control flow. In some cases we can detect an\nerroneous decompilation and report that."", 'Python support is pretty good for Python 2', ""On the lower end of Python versions, decompilation seems pretty good although\nwe don't have any automated testing in place for Python's distributed tests.\nAlso, we don't have a Python interpreter for versions 1.6, and 2.0."", 'In the Python 3 series, Python support is is strongest around 3.4 or\n3.3 and drops off as you move further away from those versions. Python\n3.0 is weird in that it in some ways resembles 2.6 more than it does\n3.1 or 2.7. Python 3.6 changes things drastically by using word codes\nrather than byte codes. As a result, the jump offset field in a jump\ninstruction argument has been reduced. This makes the ', '\ninstructions are now more prevalent in jump instruction; previously\nthey had been rare.  Perhaps to compensate for the additional\n', ' instructions, additional jump optimization has been\nadded. So in sum handling control flow by ad hoc means as is currently\ndone is worse.', 'Between Python 3.5, 3.6, 3.7 there have been major changes to the\n', ' and ', ' instructions.', 'Python 3.8 removes ', ', ', ',\n', ', and ', "", instructions which may\nmake control-flow detection harder, lacking the more sophisticated\ncontrol-flow analysis that is planned. We'll see."", 'Currently not all Python magic numbers are supported. Specifically in\nsome versions of Python, notably Python 3.6, the magic number has\nchanges several times within a version.', ' Note\nhowever that the magic of a released version is usually the same as\nthe ', ' candidate version prior to release.', ""There are also customized Python interpreters, notably Dropbox,\nwhich use their own magic and encrypt bytecode. With the exception of\nthe Dropbox's old Python 2.5 interpreter this kind of thing is not\nhandled."", ""We also don't handle "", ' or otherwise obfuscated code. For\nPJOrion try: PJOrion ', ' to unscramble the bytecode to get\nvalid bytecode before trying this tool; ', ' might help with that.', ""This program can't decompile Microsoft Windows EXE files created by\n"", ', although we can probably decompile the code after you extract\nthe bytecode properly. ', ' may help with unpacking Pyinstaller bundlers.', ""Handling pathologically long lists of expressions or statements is\nslow. We don't handle "", "" or MicroPython which don't use bytecode."", 'There are numerous bugs in decompilation. And that\'s true for every\nother CPython decompiler I have encountered, even the ones that\nclaimed to be ""perfect"" on some particular version like 2.4.', 'As Python progresses decompilation also gets harder because the\ncompilation is more sophisticated and the language itself is more\nsophisticated. I suspect that attempts there will be fewer ad-hoc\nattempts like ', "" (which is based on a 3.3 decompiler) simply\nbecause it is harder to do so. The good news, at least from my\nstandpoint, is that I think I understand what's needed to address the\nproblems in a more robust way. But right now until such time as\nproject is better funded, I do not intend to make any serious effort\nto support Python versions 3.8 or 3.9, including bugs that might come\nin. I imagine at some point I may be interested in it."", ""You can easily find bugs by running the tests against the standard\ntest suite that Python uses to check itself. At any given time, there are\ndozens of known problems that are pretty well isolated and that could\nbe solved if one were to put in the time to do so. The problem is that\nthere aren't that many people who have been working on bug fixing."", 'Some of the bugs in 3.7 and 3.8 are simply a matter of back-porting\nthe fixes in decompyle3. Volunteers are welcome to do so.', 'You may run across a bug, that you want to report. Please do so after\nreading ', ' and\nfollow the ', '.', ""Be aware that it might not get my attention for a while. If you\nsponsor or support the project in some way, I'll prioritize your\nissues above the queue of other things I might be doing instead."", '\n      A cross-version Python bytecode decompiler\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n        ', '\n      ', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', ' : Much smaller and more modern code, focusing on 3.7 and 3.8. Changes in that will get migrated back here.', ' : supports Python 3.2 only. The above projects use a different decompiling technique than what is used here. Currently unmaintained.', ' : fork of above, but supports Python 3.3 only. Includes some fixes like supporting function annotations. Currently unmaintained.', ' : supports Python 2.7 only, but does that fairly well. There are situations where ', ' results are incorrect while ', ' results are not, but more often uncompyle6 is correct when uncompyle2 is not. Because ', ' adheres to accuracy over idiomatic Python, ', ' can produce more natural-looking code when it is correct. Currently ', ' is lightly maintained. See its issue ', ' for more details.', 'The ', ' file.', ' : Cross Python version disassembler', ' : Cross Python version assembler', ' : Wiki Documents which describe the code and aspects of it in more detail', ' : The README for this C++ code says it aims to support all versions of Python. You can aim your slign shot for the moon too, but I doubt you are going to hit it. This code is best for Python versions around 2.7 and 3.3 when the code was initially developed. Accuracy for current versions of Python3 and early versions of Python is lacking. Without major effort, it is unlikely it can be made to support current Python 3. See its ', ' for details. Currently lightly maintained.', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n      ', '\n    '])"
