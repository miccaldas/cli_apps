content
"(['tartley/colorama', 'Name already in use'], ['\n        Simple cross-platform colored terminal text in Python\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Makes ANSI escape character sequences (for producing colored terminal text and\ncursor positioning) work under MS Windows.', ' |\n', ' |\n', 'If you find Colorama useful, please ', ' to the authors. Thank you!', 'Tested on CPython 2.7, 3.7, 3.8, 3.9, 3.10 and 3.11 and PyPy 2.7 and 3.8.', 'No requirements other than the standard library.', 'ANSI escape character sequences have long been used to produce colored terminal\ntext and cursor positioning on Unix and Macs. Colorama makes this work on\nWindows, too, by wrapping ', ', stripping ANSI sequences it finds (which\nwould appear as gobbledygook in the output), and converting them into the\nappropriate win32 calls to modify the state of the terminal. On other platforms,\nColorama does nothing.', 'This has the upshot of providing a simple cross-platform API for printing\ncolored terminal text from Python, and has the happy side-effect that existing\napplications or libraries which use ANSI sequences to produce colored output on\nLinux or Macs can now also work on Windows, simply by calling\n', ' (since v0.4.6) or ', '\n(all versions, but may have other side-effects – see below).', 'An alternative approach is to install ', "" on Windows machines, which\nprovides the same behaviour for all applications running in terminals. Colorama\nis intended for situations where that isn't easy (e.g., maybe your app doesn't\nhave an installer.)"", ""Demo scripts in the source code repository print some colored text using\nANSI sequences. Compare their output under Gnome-terminal's built in ANSI\nhandling, versus on Windows Command-Prompt using Colorama:"", ""These screenshots show that, on Windows, Colorama does not support ANSI 'dim\ntext'; it looks the same as 'normal text'."", 'If the only thing you want from Colorama is to get ANSI escapes to work on\nWindows, then run:', ""If you're on a recent version of Windows 10 or better, and your stdout/stderr\nare pointing to a Windows console, then this will flip the magic configuration\nswitch to enable Windows' built-in ANSI support."", ""If you're on an older version of Windows, and your stdout/stderr are pointing to\na Windows console, then this will wrap "", ' and/or ', ' in a\nmagic file object that intercepts ANSI escape sequences and issues the\nappropriate Win32 calls to emulate them.', 'In all other circumstances, it does nothing whatsoever. Basically the idea is\nthat this makes Windows act like Unix with respect to ANSI escape handling.', ""It's safe to call this function multiple times. It's safe to call this function\non non-Windows platforms, but it won't do anything. It's safe to call this\nfunction when one or both of your stdout/stderr are redirected to a file – it\nwon't do anything to those streams."", 'Alternatively, you can use the older interface with more features (but also more\npotential footguns):', 'This does the same thing as ', ', except for the\nfollowing differences:', 'To stop using Colorama before your program exits, simply call ', '.\nThis will restore ', ' and ', ' to their original values, so that\nColorama is disabled. To resume using Colorama again, call ', '; it is\ncheaper than calling ', ' again (but does the same thing).', 'Most users should depend on ', ', and use\n', '. The old ', "" interface will be supported\nindefinitely for backwards compatibility, but we don't plan to fix any issues\nwith it, also for backwards compatibility."", ""Cross-platform printing of colored text can then be done using Colorama's\nconstant shorthand for ANSI escape sequences. These are deliberately\nrudimentary, see below."", '...or simply by manually printing ANSI sequences from your own code:', '...or, Colorama can be used in conjunction with existing ANSI libraries\nsuch as the venerable ', '\nthe fabulous ', ',\nor the incredible ', '.', ""If you wish Colorama's Fore, Back and Style constants were more capable,\nthen consider using one of the above highly capable libraries to generate\ncolors, etc, and use Colorama just for its primary purpose: to convert\nthose ANSI sequences to also work on Windows:"", 'SIMILARLY, do not send PRs adding the generation of new ANSI types to Colorama.\nWe are only interested in converting ANSI codes to win32 API calls, not\nshortcuts like the above to generate ANSI characters.', 'Available formatting constants are:', ' resets foreground, background, and brightness. Colorama will\nperform this reset automatically on program exit.', 'These are fairly well supported, but not part of the standard:', 'ANSI codes to reposition the cursor are supported. See ', ' for\nan example of how to generate them.', ' accepts some ', ' to override default behaviour.', 'If you find yourself repeatedly sending reset sequences to turn off color\nchanges at the end of every print, then ', ' will\nautomate that:', 'On Windows, Colorama works by replacing ', ' and ', '\nwith proxy objects, which override the ', ' method to do their work.\nIf this wrapping causes you problems, then this can be disabled by passing\n', '. The default behaviour is to wrap if ', ' or\n', ' or ', ' are True.', ""When wrapping is disabled, colored printing on non-Windows platforms will\ncontinue to work as normal. To do cross-platform colored output, you can\nuse Colorama's "", ' proxy directly:', 'ANSI sequences generally take the form:', 'Where ', ' is an integer, and ', ' is a single letter. Zero or\nmore params are passed to a ', '. If no params are passed, it is\ngenerally synonymous with passing a single zero. No spaces exist in the\nsequence; they have been inserted here simply to read more easily.', 'The only ANSI sequences that Colorama converts into win32 calls are:', 'Multiple numeric params to the ', ' command can be combined into a single\nsequence:', 'All other ANSI sequences of the form ', '\nare silently stripped from the output on Windows.', 'Any other form of ANSI sequence, such as single-character codes or alternative\ninitial characters, are not recognised or stripped. It would be cool to add\nthem though. Let me know if it would be useful for you, via the Issues on\nGitHub.', ""I've personally only tested it on Windows XP (CMD, Console2), Ubuntu\n(gnome-terminal, xterm), and OS X."", ""Some valid ANSI sequences aren't recognised."", ""If you're hacking on the code, see "", '. ESPECIALLY, see the\nexplanation there of why we do not want PRs that allow Colorama to generate new\ntypes of ANSI codes.', 'See outstanding issues and wish-list:\n', ""If anything doesn't work for you, or doesn't do what you expected or hoped for,\nI'd love to hear about it on that issues list, would be delighted by patches,\nand would be happy to grant commit access to anyone who submits a working patch\nor two."", 'Copyright Jonathan Hartley & Arnon Yaari, 2013-2020. BSD 3-Clause license; see\nLICENSE file.', 'See the CHANGELOG for more thanks!', '\n      Simple cross-platform colored terminal text in Python\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n        ', '\n      ', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ""It's not safe to call "", ' multiple times; you can end up with multiple\nlayers of wrapping and broken ANSI support.', ""Colorama will apply a heuristic to guess whether stdout/stderr support ANSI,\nand if it thinks they don't, then it will wrap "", ' and\n', "" in a magic file object that strips out ANSI escape sequences\nbefore printing them. This happens on all platforms, and can be convenient if\nyou want to write your code to emit ANSI escape sequences unconditionally, and\nlet Colorama decide whether they should actually be output. But note that\nColorama's heuristic is not particularly clever."", ' also accepts explicit keyword args to enable/disable various\nfunctionality – see below.', 'Marc Schlaich (schlamar) for a ', ' fix for Python2.5.', 'Marc Abramowitz, reported & fixed a crash on exit with closed ', "",\nproviding a solution to issue #7's setuptools/distutils debate,\nand other fixes."", ""User 'eryksun', for guidance on correctly instantiating "", '.', 'Matthew McCormick for politely pointing out a longstanding crash on non-Win.', 'Ben Hoyt, for a magnificent fix under 64-bit Windows.', 'Jesse at Empty Square for submitting a fix for examples in the README.', ""User 'jamessp', an observant documentation fix for cursor positioning."", ""User 'vaal1239', Dave Mckee & Lackner Kristof for a tiny but much-needed Win7\nfix."", 'Julien Stuyck, for wisely suggesting Python3 compatible updates to README.', 'Daniel Griffith for multiple fabulous patches.', 'Oscar Lesta for a valuable fix to stop ANSI chars being sent to non-tty\noutput.', 'Roger Binns, for many suggestions, valuable feedback, & bug reports.', 'Tim Golden for thought and much appreciated feedback on the initial idea.', ""User 'Zearin' for updates to the README file."", 'John Szakmeister for adding support for light colors', 'Charles Merriam for adding documentation to demos', 'Jurko for a fix on 64-bit Windows CPython2.5 w/o ctypes', 'Florian Bruhin for a fix when stdout or stderr are None', 'Thomas Weininger for fixing ValueError on Windows', 'Remi Rampin for better Github integration and fixes to the README file', ""Simeon Visser for closing a file handle using 'with' and updating classifiers\nto include Python 3.3 and 3.4"", 'Andy Neff for fixing RESET of LIGHT_EX colors.', 'Jonathan Hartley for the initial idea and implementation.', '\n          ', '\n          ', '\n        ', '\n          ', '\n          ', '\n        ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
content
"(['tartley/colorama', 'Name already in use'], ['\n        Simple cross-platform colored terminal text in Python\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Makes ANSI escape character sequences (for producing colored terminal text and\ncursor positioning) work under MS Windows.', ' |\n', ' |\n', 'If you find Colorama useful, please ', ' to the authors. Thank you!', 'Tested on CPython 2.7, 3.7, 3.8, 3.9, 3.10 and 3.11 and PyPy 2.7 and 3.8.', 'No requirements other than the standard library.', 'ANSI escape character sequences have long been used to produce colored terminal\ntext and cursor positioning on Unix and Macs. Colorama makes this work on\nWindows, too, by wrapping ', ', stripping ANSI sequences it finds (which\nwould appear as gobbledygook in the output), and converting them into the\nappropriate win32 calls to modify the state of the terminal. On other platforms,\nColorama does nothing.', 'This has the upshot of providing a simple cross-platform API for printing\ncolored terminal text from Python, and has the happy side-effect that existing\napplications or libraries which use ANSI sequences to produce colored output on\nLinux or Macs can now also work on Windows, simply by calling\n', ' (since v0.4.6) or ', '\n(all versions, but may have other side-effects – see below).', 'An alternative approach is to install ', "" on Windows machines, which\nprovides the same behaviour for all applications running in terminals. Colorama\nis intended for situations where that isn't easy (e.g., maybe your app doesn't\nhave an installer.)"", ""Demo scripts in the source code repository print some colored text using\nANSI sequences. Compare their output under Gnome-terminal's built in ANSI\nhandling, versus on Windows Command-Prompt using Colorama:"", ""These screenshots show that, on Windows, Colorama does not support ANSI 'dim\ntext'; it looks the same as 'normal text'."", 'If the only thing you want from Colorama is to get ANSI escapes to work on\nWindows, then run:', ""If you're on a recent version of Windows 10 or better, and your stdout/stderr\nare pointing to a Windows console, then this will flip the magic configuration\nswitch to enable Windows' built-in ANSI support."", ""If you're on an older version of Windows, and your stdout/stderr are pointing to\na Windows console, then this will wrap "", ' and/or ', ' in a\nmagic file object that intercepts ANSI escape sequences and issues the\nappropriate Win32 calls to emulate them.', 'In all other circumstances, it does nothing whatsoever. Basically the idea is\nthat this makes Windows act like Unix with respect to ANSI escape handling.', ""It's safe to call this function multiple times. It's safe to call this function\non non-Windows platforms, but it won't do anything. It's safe to call this\nfunction when one or both of your stdout/stderr are redirected to a file – it\nwon't do anything to those streams."", 'Alternatively, you can use the older interface with more features (but also more\npotential footguns):', 'This does the same thing as ', ', except for the\nfollowing differences:', 'To stop using Colorama before your program exits, simply call ', '.\nThis will restore ', ' and ', ' to their original values, so that\nColorama is disabled. To resume using Colorama again, call ', '; it is\ncheaper than calling ', ' again (but does the same thing).', 'Most users should depend on ', ', and use\n', '. The old ', "" interface will be supported\nindefinitely for backwards compatibility, but we don't plan to fix any issues\nwith it, also for backwards compatibility."", ""Cross-platform printing of colored text can then be done using Colorama's\nconstant shorthand for ANSI escape sequences. These are deliberately\nrudimentary, see below."", '...or simply by manually printing ANSI sequences from your own code:', '...or, Colorama can be used in conjunction with existing ANSI libraries\nsuch as the venerable ', '\nthe fabulous ', ',\nor the incredible ', '.', ""If you wish Colorama's Fore, Back and Style constants were more capable,\nthen consider using one of the above highly capable libraries to generate\ncolors, etc, and use Colorama just for its primary purpose: to convert\nthose ANSI sequences to also work on Windows:"", 'SIMILARLY, do not send PRs adding the generation of new ANSI types to Colorama.\nWe are only interested in converting ANSI codes to win32 API calls, not\nshortcuts like the above to generate ANSI characters.', 'Available formatting constants are:', ' resets foreground, background, and brightness. Colorama will\nperform this reset automatically on program exit.', 'These are fairly well supported, but not part of the standard:', 'ANSI codes to reposition the cursor are supported. See ', ' for\nan example of how to generate them.', ' accepts some ', ' to override default behaviour.', 'If you find yourself repeatedly sending reset sequences to turn off color\nchanges at the end of every print, then ', ' will\nautomate that:', 'On Windows, Colorama works by replacing ', ' and ', '\nwith proxy objects, which override the ', ' method to do their work.\nIf this wrapping causes you problems, then this can be disabled by passing\n', '. The default behaviour is to wrap if ', ' or\n', ' or ', ' are True.', ""When wrapping is disabled, colored printing on non-Windows platforms will\ncontinue to work as normal. To do cross-platform colored output, you can\nuse Colorama's "", ' proxy directly:', 'ANSI sequences generally take the form:', 'Where ', ' is an integer, and ', ' is a single letter. Zero or\nmore params are passed to a ', '. If no params are passed, it is\ngenerally synonymous with passing a single zero. No spaces exist in the\nsequence; they have been inserted here simply to read more easily.', 'The only ANSI sequences that Colorama converts into win32 calls are:', 'Multiple numeric params to the ', ' command can be combined into a single\nsequence:', 'All other ANSI sequences of the form ', '\nare silently stripped from the output on Windows.', 'Any other form of ANSI sequence, such as single-character codes or alternative\ninitial characters, are not recognised or stripped. It would be cool to add\nthem though. Let me know if it would be useful for you, via the Issues on\nGitHub.', ""I've personally only tested it on Windows XP (CMD, Console2), Ubuntu\n(gnome-terminal, xterm), and OS X."", ""Some valid ANSI sequences aren't recognised."", ""If you're hacking on the code, see "", '. ESPECIALLY, see the\nexplanation there of why we do not want PRs that allow Colorama to generate new\ntypes of ANSI codes.', 'See outstanding issues and wish-list:\n', ""If anything doesn't work for you, or doesn't do what you expected or hoped for,\nI'd love to hear about it on that issues list, would be delighted by patches,\nand would be happy to grant commit access to anyone who submits a working patch\nor two."", 'Copyright Jonathan Hartley & Arnon Yaari, 2013-2020. BSD 3-Clause license; see\nLICENSE file.', 'See the CHANGELOG for more thanks!', '\n      Simple cross-platform colored terminal text in Python\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n        ', '\n      ', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ""It's not safe to call "", ' multiple times; you can end up with multiple\nlayers of wrapping and broken ANSI support.', ""Colorama will apply a heuristic to guess whether stdout/stderr support ANSI,\nand if it thinks they don't, then it will wrap "", ' and\n', "" in a magic file object that strips out ANSI escape sequences\nbefore printing them. This happens on all platforms, and can be convenient if\nyou want to write your code to emit ANSI escape sequences unconditionally, and\nlet Colorama decide whether they should actually be output. But note that\nColorama's heuristic is not particularly clever."", ' also accepts explicit keyword args to enable/disable various\nfunctionality – see below.', 'Marc Schlaich (schlamar) for a ', ' fix for Python2.5.', 'Marc Abramowitz, reported & fixed a crash on exit with closed ', "",\nproviding a solution to issue #7's setuptools/distutils debate,\nand other fixes."", ""User 'eryksun', for guidance on correctly instantiating "", '.', 'Matthew McCormick for politely pointing out a longstanding crash on non-Win.', 'Ben Hoyt, for a magnificent fix under 64-bit Windows.', 'Jesse at Empty Square for submitting a fix for examples in the README.', ""User 'jamessp', an observant documentation fix for cursor positioning."", ""User 'vaal1239', Dave Mckee & Lackner Kristof for a tiny but much-needed Win7\nfix."", 'Julien Stuyck, for wisely suggesting Python3 compatible updates to README.', 'Daniel Griffith for multiple fabulous patches.', 'Oscar Lesta for a valuable fix to stop ANSI chars being sent to non-tty\noutput.', 'Roger Binns, for many suggestions, valuable feedback, & bug reports.', 'Tim Golden for thought and much appreciated feedback on the initial idea.', ""User 'Zearin' for updates to the README file."", 'John Szakmeister for adding support for light colors', 'Charles Merriam for adding documentation to demos', 'Jurko for a fix on 64-bit Windows CPython2.5 w/o ctypes', 'Florian Bruhin for a fix when stdout or stderr are None', 'Thomas Weininger for fixing ValueError on Windows', 'Remi Rampin for better Github integration and fixes to the README file', ""Simeon Visser for closing a file handle using 'with' and updating classifiers\nto include Python 3.3 and 3.4"", 'Andy Neff for fixing RESET of LIGHT_EX colors.', 'Jonathan Hartley for the initial idea and implementation.', '\n          ', '\n          ', '\n        ', '\n          ', '\n          ', '\n        ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
