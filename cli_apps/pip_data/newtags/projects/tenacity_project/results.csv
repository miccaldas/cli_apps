content
"(['jd/tenacity', 'Name already in use', 'Tenacity', 'tenacity', 'middle', 'end'], ['\n        Retrying library for Python\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Tenacity is an Apache 2.0 licensed general-purpose retrying library, written in\nPython, to simplify the task of adding retry behavior to just about anything.\nIt originates from ', ' which is sadly no longer\n', "". Tenacity isn't\napi compatible with retrying but adds significant new functionality and\nfixes a number of longstanding bugs."", 'The simplest use case is retrying a flaky function whenever an Exception\noccurs until a value is returned.', 'To install ', ', simply:', 'As you saw above, the default behavior is to retry forever without waiting when\nan exception is raised.', ""Let's be a little less persistent and set some boundaries, such as the number\nof attempts before giving up."", ""We don't have all day, so let's set a boundary for how long we should be\nretrying stuff."", 'You can combine several stop conditions by using the | operator:', ""Most things don't like to be polled as fast as possible, so let's just wait 2\nseconds between retries."", 'Some things perform best with a bit of randomness injected.', ""Then again, it's hard to beat exponential backoff when retrying distributed\nservices and other remote endpoints."", ""Then again, it's also hard to beat combining fixed waits and jitter (to\nhelp avoid thundering herds) when retrying distributed services and other\nremote endpoints."", 'When multiple processes are in contention for a shared resource, exponentially\nincreasing jitter helps minimise collisions.', ""Sometimes it's necessary to build a chain of backoffs."", 'We have a few options for dealing with retries that raise specific or general\nexceptions, as in the cases here.', 'We can also use the result of the function to alter the behavior of retrying.', 'See also these methods:', 'We can also combine several conditions:', 'Any combination of stop, wait, etc. is also supported to give you the freedom\nto mix and match.', ""It's also possible to retry explicitly at any time by raising the TryAgain\nexception:"", 'Normally when your function fails its final time (and will not be retried again based on your settings),\na RetryError is raised. The exception your code encountered will be shown somewhere in the ', '\nof the stack trace.', 'If you would rather see the exception your code encountered at the ', ' of the stack trace (where it\nis most visible), you can set reraise=True.', ""It's possible to execute an action before any attempt of calling the function\nby using the before callback function:"", ""In the same spirit, It's possible to execute after a call that failed:"", ""It's also possible to only log failures that are going to be retried. Normally\nretries happen after a wait interval, so the keyword argument is called\n"", ':', 'You can access the statistics about the retry made over a function by using the\nretry attribute attached to the function and its statistics attribute:', 'You can also define your own callbacks. The callback should accept one\nparameter called ', ' that contains all information about current\nretry invocation.', 'For example, you can call a custom callback function after all retries failed,\nwithout raising an exception (or you can re-raise or do anything really)', ' argument is an object of RetryCallState class:', ""It's also possible to define custom callbacks for other keyword arguments."", ""Here's an example with a custom "", ' function:', 'You can change the arguments of a retry decorator as needed when calling it by\nusing the retry_with function attached to the wrapped function:', ""If you want to use variables to set up the retry parameters, you don't have\nto use the retry decorator - you can instead use Retrying directly:"", 'Tenacity allows you to retry a code block without the need to wraps it in an\nisolated function. This makes it easy to isolate failing block while sharing\ncontext. The trick is to combine a for loop and a context manager.', 'You can configure every details of retry policy by configuring the Retrying\nobject.', 'With async code you can use AsyncRetrying.', ""In both cases, you may want to set the result to the attempt so it's available\nin retry strategies like "", '. This can be done accessing the\n', ' property:', 'Finally, ', ' works also on asyncio and Tornado (>= 4.5) coroutines.\nSleeps are done asynchronously too.', 'You can even use alternative event loops such as curio or Trio by passing the correct sleep function:', ' is used for managing changelogs. Take a look at their usage docs.', 'The doc generation will automatically compile the changelogs. You just need to add them.', '\n      Retrying library for Python\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n        ', '\n      ', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'Generic Decorator API', 'Specify stop condition (i.e. limit by number of attempts)', 'Specify wait condition (i.e. exponential backoff sleeping between attempts)', 'Customize retrying on Exceptions', 'Customize retrying on expected returned result', 'Retry on coroutines', 'Retry code block with context manager', 'Check for open issues or open a fresh issue to start a discussion around a\nfeature idea or a bug.', 'Fork ', ' on GitHub to start making your changes to the\n', ' branch (or branch off of it).', 'Write a test which shows that the bug was fixed or that the feature works as\nexpected.', 'Add a ', 'Make the docs better (or more detailed, or more easier to read, or ...)', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    '])"
