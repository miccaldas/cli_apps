content
"(['groodt/retrying', 'Name already in use', 'Retrying'], ['\n        Retrying is an Apache 2.0 licensed general-purpose retrying library, written in Python, to simplify the task of adding retry behavior to just about anything.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Retrying is an Apache 2.0 licensed general-purpose retrying library, written in\nPython, to simplify the task of adding retry behavior to just about anything.', 'The simplest use case is retrying a flaky function whenever an Exception occurs\nuntil a value is returned.', 'As you saw above, the default behavior is to retry forever without waiting.', ""Let's be a little less persistent and set some boundaries, such as the number of attempts before giving up."", ""We don't have all day, so let's set a boundary for how long we should be retrying stuff."", ""Most things don't like to be polled as fast as possible, so let's just wait 2 seconds between retries."", 'Some things perform best with a bit of randomness injected.', ""Then again, it's hard to beat exponential backoff when retrying distributed services and other remote endpoints."", 'We have a few options for dealing with retries that raise specific or general exceptions, as in the cases here.', 'We can also use the result of the function to alter the behavior of retrying.', 'Any combination of stop, wait, etc. is also supported to give you the freedom to mix and match.', '\n      Retrying is an Apache 2.0 licensed general-purpose retrying library, written in Python, to simplify the task of adding retry behavior to just about anything.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'Generic Decorator API', 'Specify stop condition (i.e. limit by number of attempts)', 'Specify wait condition (i.e. exponential backoff sleeping between attempts)', 'Customize retrying on Exceptions', 'Customize retrying on expected returned result', 'Check for open issues or open a fresh issue to start a discussion around a feature idea or a bug.', 'Fork ', ' on GitHub to start making your changes to the ', ' branch (or branch off of it).', 'Write a test which shows that the bug was fixed or that the feature works as expected.', 'Send a pull request and bug the maintainer until it gets merged and published. :) Make sure to add yourself to ', '.', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    '])"
content
"(['groodt/retrying', 'Name already in use', 'Retrying'], ['\n        Retrying is an Apache 2.0 licensed general-purpose retrying library, written in Python, to simplify the task of adding retry behavior to just about anything.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Retrying is an Apache 2.0 licensed general-purpose retrying library, written in\nPython, to simplify the task of adding retry behavior to just about anything.', 'The simplest use case is retrying a flaky function whenever an Exception occurs\nuntil a value is returned.', 'As you saw above, the default behavior is to retry forever without waiting.', ""Let's be a little less persistent and set some boundaries, such as the number of attempts before giving up."", ""We don't have all day, so let's set a boundary for how long we should be retrying stuff."", ""Most things don't like to be polled as fast as possible, so let's just wait 2 seconds between retries."", 'Some things perform best with a bit of randomness injected.', ""Then again, it's hard to beat exponential backoff when retrying distributed services and other remote endpoints."", 'We have a few options for dealing with retries that raise specific or general exceptions, as in the cases here.', 'We can also use the result of the function to alter the behavior of retrying.', 'Any combination of stop, wait, etc. is also supported to give you the freedom to mix and match.', '\n      Retrying is an Apache 2.0 licensed general-purpose retrying library, written in Python, to simplify the task of adding retry behavior to just about anything.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'Generic Decorator API', 'Specify stop condition (i.e. limit by number of attempts)', 'Specify wait condition (i.e. exponential backoff sleeping between attempts)', 'Customize retrying on Exceptions', 'Customize retrying on expected returned result', 'Check for open issues or open a fresh issue to start a discussion around a feature idea or a bug.', 'Fork ', ' on GitHub to start making your changes to the ', ' branch (or branch off of it).', 'Write a test which shows that the bug was fixed or that the feature works as expected.', 'Send a pull request and bug the maintainer until it gets merged and published. :) Make sure to add yourself to ', '.', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    '])"
