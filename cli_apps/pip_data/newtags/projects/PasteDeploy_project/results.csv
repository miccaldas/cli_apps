content
"(['protocol', 'one', 'specification', 'entry points'], ['Contents', 'Documents:', 'Paste Deployment is a system for finding and configuring WSGI\napplications and servers.  For WSGI application consumers it provides\na single, simple function (', "") for loading a WSGI application\nfrom a configuration file or a Python Egg.  For WSGI application\nproviders it only asks for a single, simple entry point to your\napplication, so that application users don't need to be exposed to the\nimplementation details of your application."", 'The result is something a system administrator can install and manage\nwithout knowing any Python, or the details of the WSGI application or\nits container.', 'Paste Deployment currently does not require other parts of ', ', and is distributed as a separate package.', 'To see updates that have been made to Paste Deploy see the ', '.', 'Paste Deploy is released under the ', '.', ""Paste Deploy has passed version 1.0.  Paste Deploy is an actively\nmaintained project.  As of 1.0, we'll make a strong effort to maintain\nbackward compatibility (this actually started happening long before\n1.0, but now it is explicit).  This will include deprecation warnings\nwhen necessary.  Major changes will take place under new functions or\nwith new entry points."", 'Note that the most key aspect of Paste Deploy is the entry points it\ndefines (such as ', ').  Paste Deploy is not the only\nconsumer of these entry points, and many extensions can best take\nplace by utilizing the entry points instead of using Paste Deploy\ndirectly.  The entry points will not change; if changes are necessary,\nnew entry points will be defined.', 'First make sure you have either\n', ' or its\nmodern replacement\n', ' installed.\nFor Python 3.x you need distribute as setuptools does not work on it.', 'Then you can install Paste Deployment using ', ' by running:', 'If you want to track development, do:', 'This will install the package locally, and will load the files in the\ncheckout.  You can also simply install ', '.', 'For downloads and other information see the ', '.', 'A complementary package is ', '.\nTo install that, use ', ' (or ', ').', ""In the following sections, the Python API for using Paste Deploy is\ngiven.  This isn't what users will be using (but it is useful for\nPython developers and useful for setting up tests fixtures)."", 'The primary interaction with Paste Deploy is through its configuration\nfiles.  The primary thing you want to do with a configuration file is\nserve it.  To learn about serving configuration files, see ', ' command\n<', '>`_.', 'A config file has different sections.  The only sections Paste Deploy\ncares about have prefixes, like ', ' or ', ' --\nthe part after the ', ' is the ""name"" of the section, and the part\nbefore gives the ""type"".  Other sections are ignored.', 'The format is a simple ', ': ', '.  You can\nextend the value by indenting subsequent lines.  ', ' is a comment.', 'Typically you have one or two sections, named ""main"": an application\nsection (', ') and a server section (', ').\n', ' signifies something that dispatches to multiple\napplications (example below).', ""Here's a typical configuration file that also shows off mounting multiple applications:"", ""I'll explain each section in detail now:"", 'That this is a ', ' section means it dispatches the request\nto other applications.  ', ' means to use the\ncomposite application named ', ' from the ', ' package.\n', ' is a particularly common composite application -- it uses a\npath prefix to map your request to another application.  These are\nthe applications like ""home"", ""blog"", ""wiki"" and ""config:cms.ini"".  The last\none just refers to another file ', ' in the same directory.', 'Next up:', ' is another simple application, in this case it\njust serves up non-dynamic files.  It takes one bit of configuration:\n', '.  You can use variable substitution, which will pull\nvariables from the section ', ' (case sensitive!) with\nmarkers like ', '.  The special variable ', ' is\nthe directory containing the configuration file; you should use that\nin lieu of relative filenames (which depend on the current directory,\nwhich can change depending how the server is run).', 'Then:', 'The ', ' section means that you want an application\nwith a filter applied.  The application being filtered is indicated\nwith ', ' (which refers to the next section).  The\n', "" filter doesn't actually exist, but one\ncould imagine it logs people in and checks permissions."", 'That last section is just a reference to an application that you\nprobably installed with ', ', and one bit of\nconfiguration you passed to it (', ').', 'Lastly:', 'This section is similar to the previous one, with one important difference.\nInstead of an entry point in an egg, it refers directly to the ', '\nvariable in the ', ' module. The reference consist of two parts,\nseparated by a colon. The left part is the full name of the module and the\nright part is the path to the variable, as a Python expression relative to the\ncontaining module.', ""So, that's most of the features you'll use."", ""The basic way you'll use Paste Deployment is to load "", ' applications.  Many\nPython frameworks now support WSGI, so applications written for these\nframeworks should be usable.', 'The primary function is ', '.  This loads an\napplication given a URI.  You can use it like:', ""There's two URI formats currently supported: "", ' and ', '.', 'URIs that being with ', ' refer to configuration files.  These\nfilenames can be relative if you pass the ', ' keyword\nargument to ', '.', 'Note', 'Filenames are never considered relative to the current working\ndirectory, as that is an unpredictable location.  Generally when\na URI has a context it will be seen as relative to that context;\nfor example, if you have a ', ' URI inside another\nconfiguration file, the path is considered relative to the\ndirectory that contains that configuration file.', 'Configuration files are in the INI format.  This is a simple format\nthat looks like:', 'All values are strings (no quoting is necessary).  The keys and\nsection names are case-sensitive, and may contain punctuation and\nspaces (though both keys and values are stripped of leading and\ntrailing whitespace).  Lines can be continued with leading whitespace.', 'Lines beginning with ', ' (preferred) or ', ' are considered\ncomments.', 'You can define multiple applications in a single file; each\napplication goes in its own section.  Even if you have just one\napplication, you must put it in a section.', 'Each section name defining an application should be prefixed with\n', '.  The ""main"" section (when just defining one application)\nwould go in ', ' or just ', '.', ""There's two ways to indicate the Python code for the application.  The\nfirst is to refer to another URI or name:"", 'It would seem at first that this was pointless; just a way to point to\nanother location.  However, in addition to loading the application\nfrom that location, you can also add or change the configuration.', 'The other way to define an application is to point exactly to some\nPython code:', 'You must give an explicit ', ' (in this case\n', '), and the value is something to import.  In\nthis case the module ', ' is loaded, and the\n', ' object retrieved from it.', 'See ', ' for more about the protocols.', 'Configuration is done through keys besides ', ' (or the protocol\nnames).  Any other keys found in the section will be passed as keyword\narguments to the factory.  This might look like:', 'You can override these in other sections, like:', 'This way some settings could be defined in a generic configuration\nfile (if you have ', ') or you can\npublish multiple (more specialized) applications just by adding a\nsection.', 'Often many applications share the same configuration.  While you can\ndo that a bit by using other config sections and overriding values,\noften you want that done for a bunch of disparate configuration\nvalues.  And typically applications can\'t take ""extra"" configuration\nparameters; with global configuration you do something equivalent to\n""if this application wants to know the admin email, this is it"".', 'Applications are passed the global configuration separately, so they\nmust specifically pull values out of it; typically the global\nconfiguration serves as the basis for defaults when no local\nconfiguration is passed in.', 'Global configuration to apply to every application defined in a file\nshould go in a special section named ', '.  You can override\nglobal configuration locally like:', 'That is, by using ', ' in front of the key.', '""Composite"" applications are things that act like applications, but\nare made up of other applications.  One example would be a URL mapper,\nwhere you mount applications at different URL paths.  This might look\nlike:', 'The composite application ""main"" is just like any other application\nfrom the outside (you load it with ', ' for instance), but it\nhas access to other applications defined in the configuration file.', 'In addition to sections with ', ', you can define filters and\nservers in a configuration file, with ', ' and ', '\nprefixes.  You load these with ', ' and ', '.  The\nconfiguration works just the same; you just get back different kinds\nof objects.', 'There are several ways to apply filters to applications.  It mostly\ndepends on how many filters, and in what order you want to apply them.', 'The first way is to use the ', ' setting, like:', 'Also, two special section types exist to apply filters to your\napplications: ', ' and ', '.  Both of\nthese sections define applications, and so can be used wherever an\napplication is needed.', ' defines a filter (just like you would in a\n', ' section), and then a special key ', ' which\npoints to the application to apply the filter to.', ' is used when you need apply a number of filters.  It\ntakes ', ' configuration key ', ' (plus any global\nconfiguration overrides you want).  ', ' is a list of filters\nended by an application, like:', 'If you want to get the configuration without creating the application,\nyou can use the ', ' function, which is just like the\n', ' function except it returns the configuration that would\nbe used, as a dictionary.  Both global and local configuration is\ncombined into a single dictionary, but you can look at just one or the\nother with the attributes ', ' and ', '.', '\nare a distribution and installation format produced by ', ' and\n', ' that adds metadata to a\nnormal Python package (among other things).', ""You don't need to understand a whole lot about Eggs to use them.  If\nyou have a "", ' ', ' script, just change:', 'to:', 'Now when you install the package it will be installed as an egg.', 'The first important part about an Egg is that it has a\n', '.  This is formed from the name of your distribution\n(the ', ' keyword argument to ', '), and you can specify a\nspecific version.  So you can have an egg named ', ', or\n', ' to specify a specific version.', 'The second is ', '.  These are references to Python objects\nin your packages that are named and have a specific protocol.\n""Protocol"" here is just a way of saying that we will call them with\ncertain arguments, and expect a specific return value.  We\'ll talk\nmore about the protocols ', '.', ""The important part here is how we define entry points.  You'll add an\nargument to "", ' like:', 'This defines two applications named ', ' and ', '.  You can\nthen refer to these by ', ' (or just ', ',\nsince ', ' is the default) and ', '.', 'The values are instructions for importing the objects.  ', ' is\nlocated in the ', ' module, in an object named\n', '.', ""There's no way to add configuration to objects imported as Eggs."", ""This lets you point to factories (that obey the specific protocols we\nmentioned).  But that's not much use unless you can create factories\nfor your applications."", ""There's a few protocols: "", ',\n', ', ', ', and lastly\n', '.  Each of these expects a callable (like a\nfunction, method, or class).', 'The application is the most common.  You define one like:', 'The ', ' is a dictionary, and local configuration is\npassed as keyword arguments.  The function returns a WSGI application.', 'Composites are just slightly more complex:', 'The ', ' argument is an object that has a couple interesting\nmethods.  ', ' return a WSGI\napplication with the given name.  ', ' and ', '\nwork the same way.', 'A more interesting example might be a composite factory that does\nsomething.  For instance, consider a ""pipeline"" application:', 'Then we use it like:', 'Filter factories are just like app factories (same signature), except\nthey return filters.  Filters are callables that take a WSGI\napplication as the only argument, and return a ""filtered"" version of\nthat application.', ""Here's an example of a filter that checks that the "", ' CGI\nvariable is set, creating a really simple authentication filter:', 'This is very similar to ', ', except that it also\ntakes a ', ' argument, and returns a WSGI application.  So if\nyou changed the above example to:', 'Then ', ' would serve as a filter_app_factory\n(', ' is a required local configuration key in this\ncase).', 'This takes the same signature as applications and filters, but returns\na server.', 'A server is a callable that takes a single argument, a WSGI\napplication.  It then serves the application.', 'An example might look like:', 'The implementation of ', ' is left to the user.', 'Like ', ', except ', ' is passed as the\nfirst argument, and the server should run immediately.', '\n          ', '\n          ', ' |', '\n          ', ' |', ' »', '\n', '\n', '\n', '\n', 'Should there be a ""default"" protocol for each type of object?  Since\nthere\'s currently only one protocol, it seems like it makes sense\n(in the future there could be multiple).  Except that\n', ' and ', ' overlap\nconsiderably.', ""ConfigParser's INI parsing is kind of annoying.  I'd like it both\nmore constrained and less constrained.  Some parts are sloppy (like\nthe way it interprets "", ').', ' URLs should be potentially relative to other locations,\ne.g., ', '.  Maybe using variables from\n', '?', 'Should other variables have access to ', '?', ""Should objects be Python-syntax, instead of always strings?  Lots of\ncode isn't usable with Python strings without a thin wrapper to\ntranslate objects into their proper types."", 'Some short-form for a filter/app, where the filter refers to the\n""next app"".  Maybe like:', '\n', '\n', '\n', '\n', '\n          ', '\n          ', ' |', '\n          ', ' |', ' »'])"
content
"(['protocol', 'one', 'specification', 'entry points'], ['Contents', 'Documents:', 'Paste Deployment is a system for finding and configuring WSGI\napplications and servers.  For WSGI application consumers it provides\na single, simple function (', "") for loading a WSGI application\nfrom a configuration file or a Python Egg.  For WSGI application\nproviders it only asks for a single, simple entry point to your\napplication, so that application users don't need to be exposed to the\nimplementation details of your application."", 'The result is something a system administrator can install and manage\nwithout knowing any Python, or the details of the WSGI application or\nits container.', 'Paste Deployment currently does not require other parts of ', ', and is distributed as a separate package.', 'To see updates that have been made to Paste Deploy see the ', '.', 'Paste Deploy is released under the ', '.', ""Paste Deploy has passed version 1.0.  Paste Deploy is an actively\nmaintained project.  As of 1.0, we'll make a strong effort to maintain\nbackward compatibility (this actually started happening long before\n1.0, but now it is explicit).  This will include deprecation warnings\nwhen necessary.  Major changes will take place under new functions or\nwith new entry points."", 'Note that the most key aspect of Paste Deploy is the entry points it\ndefines (such as ', ').  Paste Deploy is not the only\nconsumer of these entry points, and many extensions can best take\nplace by utilizing the entry points instead of using Paste Deploy\ndirectly.  The entry points will not change; if changes are necessary,\nnew entry points will be defined.', 'First make sure you have either\n', ' or its\nmodern replacement\n', ' installed.\nFor Python 3.x you need distribute as setuptools does not work on it.', 'Then you can install Paste Deployment using ', ' by running:', 'If you want to track development, do:', 'This will install the package locally, and will load the files in the\ncheckout.  You can also simply install ', '.', 'For downloads and other information see the ', '.', 'A complementary package is ', '.\nTo install that, use ', ' (or ', ').', ""In the following sections, the Python API for using Paste Deploy is\ngiven.  This isn't what users will be using (but it is useful for\nPython developers and useful for setting up tests fixtures)."", 'The primary interaction with Paste Deploy is through its configuration\nfiles.  The primary thing you want to do with a configuration file is\nserve it.  To learn about serving configuration files, see ', ' command\n<', '>`_.', 'A config file has different sections.  The only sections Paste Deploy\ncares about have prefixes, like ', ' or ', ' --\nthe part after the ', ' is the ""name"" of the section, and the part\nbefore gives the ""type"".  Other sections are ignored.', 'The format is a simple ', ': ', '.  You can\nextend the value by indenting subsequent lines.  ', ' is a comment.', 'Typically you have one or two sections, named ""main"": an application\nsection (', ') and a server section (', ').\n', ' signifies something that dispatches to multiple\napplications (example below).', ""Here's a typical configuration file that also shows off mounting multiple applications:"", ""I'll explain each section in detail now:"", 'That this is a ', ' section means it dispatches the request\nto other applications.  ', ' means to use the\ncomposite application named ', ' from the ', ' package.\n', ' is a particularly common composite application -- it uses a\npath prefix to map your request to another application.  These are\nthe applications like ""home"", ""blog"", ""wiki"" and ""config:cms.ini"".  The last\none just refers to another file ', ' in the same directory.', 'Next up:', ' is another simple application, in this case it\njust serves up non-dynamic files.  It takes one bit of configuration:\n', '.  You can use variable substitution, which will pull\nvariables from the section ', ' (case sensitive!) with\nmarkers like ', '.  The special variable ', ' is\nthe directory containing the configuration file; you should use that\nin lieu of relative filenames (which depend on the current directory,\nwhich can change depending how the server is run).', 'Then:', 'The ', ' section means that you want an application\nwith a filter applied.  The application being filtered is indicated\nwith ', ' (which refers to the next section).  The\n', "" filter doesn't actually exist, but one\ncould imagine it logs people in and checks permissions."", 'That last section is just a reference to an application that you\nprobably installed with ', ', and one bit of\nconfiguration you passed to it (', ').', 'Lastly:', 'This section is similar to the previous one, with one important difference.\nInstead of an entry point in an egg, it refers directly to the ', '\nvariable in the ', ' module. The reference consist of two parts,\nseparated by a colon. The left part is the full name of the module and the\nright part is the path to the variable, as a Python expression relative to the\ncontaining module.', ""So, that's most of the features you'll use."", ""The basic way you'll use Paste Deployment is to load "", ' applications.  Many\nPython frameworks now support WSGI, so applications written for these\nframeworks should be usable.', 'The primary function is ', '.  This loads an\napplication given a URI.  You can use it like:', ""There's two URI formats currently supported: "", ' and ', '.', 'URIs that being with ', ' refer to configuration files.  These\nfilenames can be relative if you pass the ', ' keyword\nargument to ', '.', 'Note', 'Filenames are never considered relative to the current working\ndirectory, as that is an unpredictable location.  Generally when\na URI has a context it will be seen as relative to that context;\nfor example, if you have a ', ' URI inside another\nconfiguration file, the path is considered relative to the\ndirectory that contains that configuration file.', 'Configuration files are in the INI format.  This is a simple format\nthat looks like:', 'All values are strings (no quoting is necessary).  The keys and\nsection names are case-sensitive, and may contain punctuation and\nspaces (though both keys and values are stripped of leading and\ntrailing whitespace).  Lines can be continued with leading whitespace.', 'Lines beginning with ', ' (preferred) or ', ' are considered\ncomments.', 'You can define multiple applications in a single file; each\napplication goes in its own section.  Even if you have just one\napplication, you must put it in a section.', 'Each section name defining an application should be prefixed with\n', '.  The ""main"" section (when just defining one application)\nwould go in ', ' or just ', '.', ""There's two ways to indicate the Python code for the application.  The\nfirst is to refer to another URI or name:"", 'It would seem at first that this was pointless; just a way to point to\nanother location.  However, in addition to loading the application\nfrom that location, you can also add or change the configuration.', 'The other way to define an application is to point exactly to some\nPython code:', 'You must give an explicit ', ' (in this case\n', '), and the value is something to import.  In\nthis case the module ', ' is loaded, and the\n', ' object retrieved from it.', 'See ', ' for more about the protocols.', 'Configuration is done through keys besides ', ' (or the protocol\nnames).  Any other keys found in the section will be passed as keyword\narguments to the factory.  This might look like:', 'You can override these in other sections, like:', 'This way some settings could be defined in a generic configuration\nfile (if you have ', ') or you can\npublish multiple (more specialized) applications just by adding a\nsection.', 'Often many applications share the same configuration.  While you can\ndo that a bit by using other config sections and overriding values,\noften you want that done for a bunch of disparate configuration\nvalues.  And typically applications can\'t take ""extra"" configuration\nparameters; with global configuration you do something equivalent to\n""if this application wants to know the admin email, this is it"".', 'Applications are passed the global configuration separately, so they\nmust specifically pull values out of it; typically the global\nconfiguration serves as the basis for defaults when no local\nconfiguration is passed in.', 'Global configuration to apply to every application defined in a file\nshould go in a special section named ', '.  You can override\nglobal configuration locally like:', 'That is, by using ', ' in front of the key.', '""Composite"" applications are things that act like applications, but\nare made up of other applications.  One example would be a URL mapper,\nwhere you mount applications at different URL paths.  This might look\nlike:', 'The composite application ""main"" is just like any other application\nfrom the outside (you load it with ', ' for instance), but it\nhas access to other applications defined in the configuration file.', 'In addition to sections with ', ', you can define filters and\nservers in a configuration file, with ', ' and ', '\nprefixes.  You load these with ', ' and ', '.  The\nconfiguration works just the same; you just get back different kinds\nof objects.', 'There are several ways to apply filters to applications.  It mostly\ndepends on how many filters, and in what order you want to apply them.', 'The first way is to use the ', ' setting, like:', 'Also, two special section types exist to apply filters to your\napplications: ', ' and ', '.  Both of\nthese sections define applications, and so can be used wherever an\napplication is needed.', ' defines a filter (just like you would in a\n', ' section), and then a special key ', ' which\npoints to the application to apply the filter to.', ' is used when you need apply a number of filters.  It\ntakes ', ' configuration key ', ' (plus any global\nconfiguration overrides you want).  ', ' is a list of filters\nended by an application, like:', 'If you want to get the configuration without creating the application,\nyou can use the ', ' function, which is just like the\n', ' function except it returns the configuration that would\nbe used, as a dictionary.  Both global and local configuration is\ncombined into a single dictionary, but you can look at just one or the\nother with the attributes ', ' and ', '.', '\nare a distribution and installation format produced by ', ' and\n', ' that adds metadata to a\nnormal Python package (among other things).', ""You don't need to understand a whole lot about Eggs to use them.  If\nyou have a "", ' ', ' script, just change:', 'to:', 'Now when you install the package it will be installed as an egg.', 'The first important part about an Egg is that it has a\n', '.  This is formed from the name of your distribution\n(the ', ' keyword argument to ', '), and you can specify a\nspecific version.  So you can have an egg named ', ', or\n', ' to specify a specific version.', 'The second is ', '.  These are references to Python objects\nin your packages that are named and have a specific protocol.\n""Protocol"" here is just a way of saying that we will call them with\ncertain arguments, and expect a specific return value.  We\'ll talk\nmore about the protocols ', '.', ""The important part here is how we define entry points.  You'll add an\nargument to "", ' like:', 'This defines two applications named ', ' and ', '.  You can\nthen refer to these by ', ' (or just ', ',\nsince ', ' is the default) and ', '.', 'The values are instructions for importing the objects.  ', ' is\nlocated in the ', ' module, in an object named\n', '.', ""There's no way to add configuration to objects imported as Eggs."", ""This lets you point to factories (that obey the specific protocols we\nmentioned).  But that's not much use unless you can create factories\nfor your applications."", ""There's a few protocols: "", ',\n', ', ', ', and lastly\n', '.  Each of these expects a callable (like a\nfunction, method, or class).', 'The application is the most common.  You define one like:', 'The ', ' is a dictionary, and local configuration is\npassed as keyword arguments.  The function returns a WSGI application.', 'Composites are just slightly more complex:', 'The ', ' argument is an object that has a couple interesting\nmethods.  ', ' return a WSGI\napplication with the given name.  ', ' and ', '\nwork the same way.', 'A more interesting example might be a composite factory that does\nsomething.  For instance, consider a ""pipeline"" application:', 'Then we use it like:', 'Filter factories are just like app factories (same signature), except\nthey return filters.  Filters are callables that take a WSGI\napplication as the only argument, and return a ""filtered"" version of\nthat application.', ""Here's an example of a filter that checks that the "", ' CGI\nvariable is set, creating a really simple authentication filter:', 'This is very similar to ', ', except that it also\ntakes a ', ' argument, and returns a WSGI application.  So if\nyou changed the above example to:', 'Then ', ' would serve as a filter_app_factory\n(', ' is a required local configuration key in this\ncase).', 'This takes the same signature as applications and filters, but returns\na server.', 'A server is a callable that takes a single argument, a WSGI\napplication.  It then serves the application.', 'An example might look like:', 'The implementation of ', ' is left to the user.', 'Like ', ', except ', ' is passed as the\nfirst argument, and the server should run immediately.', '\n          ', '\n          ', ' |', '\n          ', ' |', ' »', '\n', '\n', '\n', '\n', 'Should there be a ""default"" protocol for each type of object?  Since\nthere\'s currently only one protocol, it seems like it makes sense\n(in the future there could be multiple).  Except that\n', ' and ', ' overlap\nconsiderably.', ""ConfigParser's INI parsing is kind of annoying.  I'd like it both\nmore constrained and less constrained.  Some parts are sloppy (like\nthe way it interprets "", ').', ' URLs should be potentially relative to other locations,\ne.g., ', '.  Maybe using variables from\n', '?', 'Should other variables have access to ', '?', ""Should objects be Python-syntax, instead of always strings?  Lots of\ncode isn't usable with Python strings without a thin wrapper to\ntranslate objects into their proper types."", 'Some short-form for a filter/app, where the filter refers to the\n""next app"".  Maybe like:', '\n', '\n', '\n', '\n', '\n          ', '\n          ', ' |', '\n          ', ' |', ' »'])"
