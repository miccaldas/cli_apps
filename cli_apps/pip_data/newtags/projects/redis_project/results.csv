content
"(['redis/redis-py', 'Name already in use', 'redis-py', 'for most cases', 'decode_responses=True'], ['\n        Redis Python Client\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'The Python interface to the Redis key-value store.', '\n', '\n', '\n', '\n', '\n', ' |  ', ' | ', ' | ', 'Start a redis via docker:', 'To install redis-py, simply:', 'For faster performance, install redis with hiredis support, this provides a compiled response parser, and ', ' requires zero code changes.\nBy default, if hiredis >= 1.0 is available, redis-py will attempt to use it for response parsing.', 'Looking for a high-level library to handle object mapping? See ', '!', 'The most recent version of this library supports redis version ', ', ', ', ', ', and ', '.', 'The table below higlights version compatibility of the most-recent library versions and redis versions.', 'The above code connects to localhost on port 6379, sets a value in Redis, and retrieves it. All responses are returned as bytes in Python, to receive decoded strings, set ', '.  For this, and more connection options, see ', '.', 'By default, redis-py uses a connection pool to manage connections. Each instance of a Redis class receives its own connection pool. You can however define your own ', '.', 'Alternatively, you might want to look at ', ', or ', ', or even ', '.', 'There is built-in support for all of the ', '. They are exposed using the raw Redis command names (', ', ', ', etc.) except where a word (i.e. del) is reserved by the language. The complete set of commands can be found ', ', or ', '.', 'The ', '\ndoes a great job of explaining each command in detail. redis-py attempts\nto adhere to the official command syntax. There are a few exceptions:', ': These are implemented as part of the Pipeline class.\nThe pipeline is wrapped with the MULTI and EXEC statements by\ndefault when it is executed, which can be disabled by specifying\ntransaction=False. See more about Pipelines below.', "": Similar to pipelines, PubSub is implemented as\na separate class as it places the underlying connection in a state\nwhere it can't execute non-pubsub commands. Calling the pubsub\nmethod from the Redis client will return a PubSub instance where you\ncan subscribe to channels and listen for messages. You can only call\nPUBLISH from the Redis client (see "", '\nfor details).', 'For more details, please see the documentation on ', '.', 'The following is a basic example of a ', ', a method to optimize round-trip calls, by batching Redis commands, and receiving their results as a list.', 'The following example shows how to utilize ', ' to subscribe to specific channels.', 'redis-py is developed and maintained by ', '. It can be found ', ', or downloaded from ', '.', 'Special thanks to:', '\n      Redis Python Client\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', '\n', '\n', '\n', 'Andy McCurdy (', ') the original author of redis-py.', 'Ludovico Magnocavallo, author of the original Python Redis client,\nfrom which some of the socket code is still used.', 'Alexander Solovyov for ideas on the generic response callback\nsystem.', 'Paul Hubbard for initial packaging support.', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n      ', '\n    '])"
