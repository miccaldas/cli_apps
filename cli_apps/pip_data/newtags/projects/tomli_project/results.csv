content
"(['hukkin/tomli', 'Name already in use', 'Tomli', 'generated with '], [""\n        A lil' TOML parser\n      "", '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', '\n', '\n', ""A lil' TOML parser"", '  ', 'Tomli is a Python library for parsing ', '.\nIt is fully compatible with ', '.', 'A version of Tomli, the ', ' module,\nwas added to the standard library in Python 3.11\nvia ', '.\nTomli continues to provide a backport on PyPI for Python versions\nwhere the standard library module is not available\nand that have not yet reached their end-of-life.', 'The file must be opened in binary mode (with the ', ' flag).\nBinary mode will enforce decoding the file as UTF-8 with universal newlines disabled,\nboth of which are required to correctly parse TOML.', 'Note that error messages are considered informational only.\nThey should not be assumed to stay constant across Tomli versions.', 'Note that ', ' can be replaced with another callable that converts a TOML float from string to a Python type.\nThe ', ' is, however, a practical choice for use cases where float inaccuracies can not be tolerated.', 'Illegal types are ', ' and ', ', and their subtypes.\nA ', ' will be raised if ', ' produces illegal types.', 'Python versions 3.11+ ship with a version of Tomli:\nthe ', ' standard library module.\nTo build code that uses the standard library if available,\nbut still works seamlessly with Python 3.6+,\ndo the following.', 'Instead of a hard Tomli dependency, use the following\n', '\nto only require Tomli when the standard library module is not available:', 'Then, in your code, import a TOML parser using the following fallback mechanism:', 'No.', 'The ', ' function returns a plain ', ' that is populated with builtin types and types from the standard library only.\nPreserving comments requires a custom type to be returned so will not be supported,\nat least not by the ', ' and ', ' functions.', 'Look into ', ' if preservation of style is what you need.', ' is the write-only counterpart of Tomli, providing ', ' and ', ' functions.', 'The core library does not include write capability, as most TOML use cases are read-only, and Tomli intends to be minimal.', 'The ', ' folder in this repository contains a performance benchmark for comparing the various Python TOML parsers.\nThe benchmark can be run with ', '.\nRunning the benchmark on my personal computer output the following:', 'The parsers are ordered from fastest to slowest, using the fastest parser as baseline.\nTomli performed the best out of all pure Python TOML parsers,\nlosing only to pytomlpp (wraps C++) and rtoml (wraps Rust).', ""\n      A lil' TOML parser\n    "", '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', '\n', '\n', '\n', ""it's lil'"", 'pure Python with zero dependencies', 'the fastest pure Python parser ', ':\n16x as fast as ', ',\n2.3x as fast as ', 'outputs ', ' only', '100% spec compliant: passes all tests in\n', '\ntest suite', 'thoroughly tested: 100% branch coverage', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    '])"
