content
"(['GrahamDumpleton/wrapt', 'Name already in use', 'wrapt'], ['\n        A Python module for decorators, wrappers and monkey patching.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', ' ', 'The aim of the ', ' module is to provide a transparent object proxy\nfor Python, which can be used as the basis for the construction of function\nwrappers and decorator functions.', 'The ', ' module focuses very much on correctness. It therefore goes\nway beyond existing mechanisms such as ', ' to ensure that\ndecorators preserve introspectability, signatures, type checking abilities\netc. The decorators that can be constructed using this module will work in\nfar more scenarios than typical decorators and provide more predictable and\nconsistent behaviour.', 'To ensure that the overhead is as minimal as possible, a C extension module\nis used for performance critical components. An automatic fallback to a\npure Python implementation is also provided where a target system does not\nhave a compiler to allow the C extension to be compiled.', 'For further information on the ', ' module see:', 'To implement your decorator you need to first define a wrapper function.\nThis will be called each time a decorated function is called. The wrapper\nfunction needs to take four positional arguments:', 'The wrapper function would do whatever it needs to, but would usually in\nturn call the wrapped function that is passed in via the ', '\nargument.', 'The decorator ', ' then needs to be applied to the wrapper\nfunction to convert it into a decorator which can in turn be applied to\nother functions.', 'If you wish to implement a decorator which accepts arguments, then wrap the\ndefinition of the decorator in a function closure. Any arguments supplied\nto the outer function when the decorator is applied, will be available to\nthe inner wrapper when the wrapped function is called.', 'When applied to a normal function or static method, the wrapper function\nwhen called will be passed ', ' as the ', ' argument.', 'When applied to an instance method, the wrapper function when called will\nbe passed the instance of the class the method is being called on as the\n', ' argument. This will be the case even when the instance method\nwas called explicitly via the class and the instance passed as the first\nargument. That is, the instance will never be passed as part of ', '.', 'When applied to a class method, the wrapper function when called will be\npassed the class type as the ', ' argument.', 'When applied to a class, the wrapper function when called will be passed\n', ' as the ', ' argument. The ', ' argument in this\ncase will be the class.', 'The above rules can be summarised with the following example.', 'Using these checks it is therefore possible to create a universal decorator\nthat can be applied in all situations. It is no longer necessary to create\ndifferent variants of decorators for normal functions and instance methods,\nor use additional wrappers to convert a function decorator into one that\nwill work for instance methods.', 'In all cases, the wrapped function passed to the wrapper function is called\nin the same way, with ', ' and ', ' being passed. The\n', "" argument doesn't need to be used in calling the wrapped\nfunction."", 'Full source code for the ', ' module, including documentation files\nand unit tests, can be obtained from github.', '\n      A Python module for decorators, wrappers and monkey patching.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ' - The wrapped function which in turns needs to be called by your wrapper function.', ' - The object to which the wrapped function was bound when it was called.', ' - The list of positional arguments supplied when the decorated function was called.', ' - The dictionary of keyword arguments supplied when the decorated function was called.', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
