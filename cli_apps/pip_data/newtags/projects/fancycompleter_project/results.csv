content
"(['pdbpp/fancycompleter', 'Name already in use', 'fancycompleter: colorful Python TAB completion'], ['\n        Friendly fork of (unmaintained) ', '\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', "" is a module to improve your experience in Python by\nadding TAB completion to the interactive prompt. It is an extension of\nthe stdlib's\n"", ' module.', 'Its best feature is that the completions are displayed in different\ncolors, depending on their type:', 'In the image above, strings are shown in green, functions in blue,\nintegers and boolean in yellows, ', ' in gray, types and classes in\nfuchsia. Everything else is plain white.', "" is compatible with Python 3. However, by default colors\ndon't work on Python 3, see the section "", ' for details.', 'First, install the module with ', ' or ', ':', 'Then, at the Python interactive prompt:', 'If you want to enable ', ' automatically at startup, you can\nadd those two lines at the end of your\n', '\nscript.', 'If you do ', ' have a ', ' script, the\nfollowing command will create one for you in ', ':', 'On Windows, ', ' automatically sets the ', ' environment\nvariable. On other systems, you need to add the proper command in\n', ' or equivalent.', ': depending on your particular system, ', ' might need to\nplay dirty tricks in order to display colors, although everything should\n""just work"". In particular, the call to ', ' should be the last\nline in the startup file, else the next lines might not be executed. See\nsection ', ' for\ndetails.', 'If you are using ', ', you can stop reading now, as ', '\nwill work out of the box.', 'If you are using ', ' and you installed\n', ' with ', ' or ', ', they automatically\ninstalled ', "" as a requirement, and you should also get colors out\nof the box. If for some reason you don't want to use "", ', you\nshould keep on reading.', 'By default, in CPython line input and TAB completion are handled by ', ' (at least\non Linux). However, ', ' explicitly strips escape sequences from\nthe completions, so completions with colors are not displayed correctly.', 'There are two ways to solve it:', 'By default, ', ' tries to use ', ' if it finds it. To\nget colors you need a recent version, >= 0.8.2.', 'Starting from version 0.6.1, ', ' works also on ', ',\nrelying on ', '. At the\nmoment of writing, the latest version of ', ' is 2.1, which does\n', ' support colored completions; here is the ', ' which adds\nsupport for them. To enable colors, you can install ', ' from\n', ' using the following\ncommand:', 'If you are using ', ', ', ' does not work, and thus is not\ninstalled. Your only option to get colors is to use a patched\n', ', as explained below.', 'This method is not really recommended, but if you really want, you can\nuse use a patched readline: you can find the patches in the ', '\ndirectory:', 'You can also try one of the following precompiled versions, which has\nbeen tested on Ubuntu 10.10: remember to put them in a place where the\nlinker can find them, e.g. by setting ', ':', 'Once it is installed, you should double-check that you can find it, e.g.\nby running ', "" on Python's "", ' module:', 'Finally, you need to force ', ' to use colors, since by\ndefault, it uses colors only with ', ': you can do it by placing a\ncustom config file in ', '. An example config file\nis\n', '\n(remind that you need to put a dot in front of the filename!).', 'To customize the configuration of fancycompleter, you need to put a file\nnamed ', ' in your home directory. The file must\ncontain a class named ', ' inheriting from ', ' and\noverridding the desired values.', 'The default and preferred way to get colors is to use ', '. However,\nthere is no way to tell CPython to use ', "" instead of the built-in\nreadline at the interactive prompt: this means that even if we install\nour completer inside pyrepl's readline library, the interactive prompt\nwon't see it."", 'The issue is simply solved by avoiding to use the built-in prompt:\ninstead, we use a pure Python replacement based on\n', '.\nThis brings us also some niceties, such as the ability to do multi-line\nediting of the history.', 'The console is automatically run by ', ',\nfollowed by ', ': this way, if we execute it from the script in\n', ', the interpreter exits as soon as we finish the use the\nprompt (e.g. by pressing CTRL-D, or by calling ', '). This way, we\navoid to enter the built-in prompt and we get a behaviour which closely\nresembles the default one. This is why in this configuration lines after\n', ' might not be run.', 'Note that if we are using ', ' instead of ', ', the trick is\nnot needed and thus ', ' will simply returns, letting the\nbuilt-in prompt to show up. The same is true if we are running PyPy, as\nits built-in prompt is based on pyrepl anyway.', '\n      Friendly fork of (unmaintained) ', '\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'To save space on screen, ', ' only shows the characters\n""after the dot"". By contrast, in the example above ', '\nshows everything prepended by ', '.', 'If we press ', ' at the beginning of the line, a real tab\ncharacter is inserted, instead of trying to complete. This is useful\nwhen typing function bodies or multi-line statements at the prompt.', 'Unlike ', ', ', ' ', ' complete expressions\ncontaining dictionary or list indexing. For example,\n', ' works (assuming that ', ' is a dictionary\nand that it contains the key ', ', of course :-)).', 'Starting from Python 2.6, if the completed name is a callable,\n', ' automatically adds an open parenthesis ', '. This is\nannoying in case we do not want to really call it, so\n', ' disable this behaviour.', ""(suggested) don't use "", ' at all and rely on\n', 'use a patched version of ', ' to allow colors', 'for\n', 'for\n', 'readline-6.0 for\n', 'readline-6.0 for\n', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    '])"
content
"(['pdbpp/fancycompleter', 'Name already in use', 'fancycompleter: colorful Python TAB completion'], ['\n        Friendly fork of (unmaintained) ', '\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', "" is a module to improve your experience in Python by\nadding TAB completion to the interactive prompt. It is an extension of\nthe stdlib's\n"", ' module.', 'Its best feature is that the completions are displayed in different\ncolors, depending on their type:', 'In the image above, strings are shown in green, functions in blue,\nintegers and boolean in yellows, ', ' in gray, types and classes in\nfuchsia. Everything else is plain white.', "" is compatible with Python 3. However, by default colors\ndon't work on Python 3, see the section "", ' for details.', 'First, install the module with ', ' or ', ':', 'Then, at the Python interactive prompt:', 'If you want to enable ', ' automatically at startup, you can\nadd those two lines at the end of your\n', '\nscript.', 'If you do ', ' have a ', ' script, the\nfollowing command will create one for you in ', ':', 'On Windows, ', ' automatically sets the ', ' environment\nvariable. On other systems, you need to add the proper command in\n', ' or equivalent.', ': depending on your particular system, ', ' might need to\nplay dirty tricks in order to display colors, although everything should\n""just work"". In particular, the call to ', ' should be the last\nline in the startup file, else the next lines might not be executed. See\nsection ', ' for\ndetails.', 'If you are using ', ', you can stop reading now, as ', '\nwill work out of the box.', 'If you are using ', ' and you installed\n', ' with ', ' or ', ', they automatically\ninstalled ', "" as a requirement, and you should also get colors out\nof the box. If for some reason you don't want to use "", ', you\nshould keep on reading.', 'By default, in CPython line input and TAB completion are handled by ', ' (at least\non Linux). However, ', ' explicitly strips escape sequences from\nthe completions, so completions with colors are not displayed correctly.', 'There are two ways to solve it:', 'By default, ', ' tries to use ', ' if it finds it. To\nget colors you need a recent version, >= 0.8.2.', 'Starting from version 0.6.1, ', ' works also on ', ',\nrelying on ', '. At the\nmoment of writing, the latest version of ', ' is 2.1, which does\n', ' support colored completions; here is the ', ' which adds\nsupport for them. To enable colors, you can install ', ' from\n', ' using the following\ncommand:', 'If you are using ', ', ', ' does not work, and thus is not\ninstalled. Your only option to get colors is to use a patched\n', ', as explained below.', 'This method is not really recommended, but if you really want, you can\nuse use a patched readline: you can find the patches in the ', '\ndirectory:', 'You can also try one of the following precompiled versions, which has\nbeen tested on Ubuntu 10.10: remember to put them in a place where the\nlinker can find them, e.g. by setting ', ':', 'Once it is installed, you should double-check that you can find it, e.g.\nby running ', "" on Python's "", ' module:', 'Finally, you need to force ', ' to use colors, since by\ndefault, it uses colors only with ', ': you can do it by placing a\ncustom config file in ', '. An example config file\nis\n', '\n(remind that you need to put a dot in front of the filename!).', 'To customize the configuration of fancycompleter, you need to put a file\nnamed ', ' in your home directory. The file must\ncontain a class named ', ' inheriting from ', ' and\noverridding the desired values.', 'The default and preferred way to get colors is to use ', '. However,\nthere is no way to tell CPython to use ', "" instead of the built-in\nreadline at the interactive prompt: this means that even if we install\nour completer inside pyrepl's readline library, the interactive prompt\nwon't see it."", 'The issue is simply solved by avoiding to use the built-in prompt:\ninstead, we use a pure Python replacement based on\n', '.\nThis brings us also some niceties, such as the ability to do multi-line\nediting of the history.', 'The console is automatically run by ', ',\nfollowed by ', ': this way, if we execute it from the script in\n', ', the interpreter exits as soon as we finish the use the\nprompt (e.g. by pressing CTRL-D, or by calling ', '). This way, we\navoid to enter the built-in prompt and we get a behaviour which closely\nresembles the default one. This is why in this configuration lines after\n', ' might not be run.', 'Note that if we are using ', ' instead of ', ', the trick is\nnot needed and thus ', ' will simply returns, letting the\nbuilt-in prompt to show up. The same is true if we are running PyPy, as\nits built-in prompt is based on pyrepl anyway.', '\n      Friendly fork of (unmaintained) ', '\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', 'To save space on screen, ', ' only shows the characters\n""after the dot"". By contrast, in the example above ', '\nshows everything prepended by ', '.', 'If we press ', ' at the beginning of the line, a real tab\ncharacter is inserted, instead of trying to complete. This is useful\nwhen typing function bodies or multi-line statements at the prompt.', 'Unlike ', ', ', ' ', ' complete expressions\ncontaining dictionary or list indexing. For example,\n', ' works (assuming that ', ' is a dictionary\nand that it contains the key ', ', of course :-)).', 'Starting from Python 2.6, if the completed name is a callable,\n', ' automatically adds an open parenthesis ', '. This is\nannoying in case we do not want to really call it, so\n', ' disable this behaviour.', ""(suggested) don't use "", ' at all and rely on\n', 'use a patched version of ', ' to allow colors', 'for\n', 'for\n', 'readline-6.0 for\n', 'readline-6.0 for\n', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n            ', '\n          ', '\n        ', '\n    '])"
