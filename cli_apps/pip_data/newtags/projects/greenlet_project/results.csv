content
"(['greenlet: Lightweight concurrent programming'], ['Contents', 'If this page has piqued your interest in greenlets,\ncontinue reading by seeing ', '.', 'To get started building your own code with greenlets, read\n', ', and then ', '.', 'What are greenlets?', 'greenlets are lightweight coroutines for in-process sequential concurrent\nprogramming.', 'greenlets can be used on their own, but they are frequently used with\nframeworks such as ', ' to provide higher-level abstractions and\nasynchronous I/O.', 'greenlets are frequently defined by analogy to ', ' or Python’s built-in coroutines (generators and ', ' functions). The rest of this section will explore those\nanalogies. For a more precise introduction, see ', '.', 'See ', ' for how the greenlet library was created, and its\nrelation to other similar concepts.', 'Are greenlets similar to threads?', 'For many purposes, you can usually think of greenlets as cooperatively\nscheduled ', '. The major differences are\nthat since they’re cooperatively scheduled, you are in control of\nwhen they execute, and since they are coroutines, many greenlets can\nexist in a single native thread.', 'How are greenlets different from threads?', 'Threads (in theory) are preemptive and parallel ', ', meaning that multiple\nthreads can be processing work at the same time, and it’s impossible\nto say in what order different threads will proceed or see the effects\nof other threads. This necessitates careful programming using\n', ', ', ', or\nother approaches to avoid ', ', ', ', or other\nbugs.', 'In contrast, greenlets are cooperative and sequential. This means that\nwhen one greenlet is running, no other greenlet can be running; the\nprogrammer is fully in control of when execution switches between\ngreenlets. This can eliminate race conditions and greatly simplify the\nprogramming task.', 'Also, threads require resources from the operating system (the thread\nstack, and bookkeeping in the kernel). Because greenlets are\nimplemented entirely without involving the operating system, they can\nrequire fewer resources; it is often practical to have many more\ngreenlets than it is threads.', 'How else can greenlets be used?', 'greenlets have many uses:', 'They can be treated like cooperative threads. You can implement any\nscheduling policy you desire.', 'Because greenlets work well with C libraries (greenlets can switch\neven with C functions in the call stack), they are well suited for\nintegrating with GUIs or other event loops.', ' is an example of using greenlets to integrate with IO\nevent loops (', ' and ', ') to provide a complete\nasynchronous environment using familiar programming patterns.', 'Similar to the above, greenlets can be used to transform apparently\nasynchronous tasks into a simple synchronous style. See\n', ' for an example of writing an asynchronous event-driven GUI app\nin a simple synchronous style.', 'In general, greenlets can be used for advanced control flow. For\nexample, you can ', '—without\nthe use of the ', ' keyword!', 'Are greenlets similar to generators? What about asyncio?', 'All three of greenlets, generators, and asyncio use a concept of\ncoroutines. However, greenlets, unlike the other two, require no\nspecial keywords or support from the Python language. In addition,\ngreenlets are capable of switching between stacks that feature C\nlibraries, whereas the other two are not.', 'Footnotes', 'In CPython, the ', '\ngenerally prevents two threads from executing Python code at\nthe same time. Parallelism is thus limited to code sections\nthat release the GIL, i.e., C code.', '\n        © Copyright 2011, Armin Rigo, Christian Tismer\n      \n        ', '\n      \n\n    ', ' »', 'greenlet: Lightweight concurrent programming', '\n        \n            \n            \n              ', '\n            \n          \n        \n      ', '\n', '\n', '\n', '\n', '\n', '\n'])"
content
"(['greenlet: Lightweight concurrent programming'], ['Contents', 'If this page has piqued your interest in greenlets,\ncontinue reading by seeing ', '.', 'To get started building your own code with greenlets, read\n', ', and then ', '.', 'What are greenlets?', 'greenlets are lightweight coroutines for in-process sequential concurrent\nprogramming.', 'greenlets can be used on their own, but they are frequently used with\nframeworks such as ', ' to provide higher-level abstractions and\nasynchronous I/O.', 'greenlets are frequently defined by analogy to ', ' or Python’s built-in coroutines (generators and ', ' functions). The rest of this section will explore those\nanalogies. For a more precise introduction, see ', '.', 'See ', ' for how the greenlet library was created, and its\nrelation to other similar concepts.', 'Are greenlets similar to threads?', 'For many purposes, you can usually think of greenlets as cooperatively\nscheduled ', '. The major differences are\nthat since they’re cooperatively scheduled, you are in control of\nwhen they execute, and since they are coroutines, many greenlets can\nexist in a single native thread.', 'How are greenlets different from threads?', 'Threads (in theory) are preemptive and parallel ', ', meaning that multiple\nthreads can be processing work at the same time, and it’s impossible\nto say in what order different threads will proceed or see the effects\nof other threads. This necessitates careful programming using\n', ', ', ', or\nother approaches to avoid ', ', ', ', or other\nbugs.', 'In contrast, greenlets are cooperative and sequential. This means that\nwhen one greenlet is running, no other greenlet can be running; the\nprogrammer is fully in control of when execution switches between\ngreenlets. This can eliminate race conditions and greatly simplify the\nprogramming task.', 'Also, threads require resources from the operating system (the thread\nstack, and bookkeeping in the kernel). Because greenlets are\nimplemented entirely without involving the operating system, they can\nrequire fewer resources; it is often practical to have many more\ngreenlets than it is threads.', 'How else can greenlets be used?', 'greenlets have many uses:', 'They can be treated like cooperative threads. You can implement any\nscheduling policy you desire.', 'Because greenlets work well with C libraries (greenlets can switch\neven with C functions in the call stack), they are well suited for\nintegrating with GUIs or other event loops.', ' is an example of using greenlets to integrate with IO\nevent loops (', ' and ', ') to provide a complete\nasynchronous environment using familiar programming patterns.', 'Similar to the above, greenlets can be used to transform apparently\nasynchronous tasks into a simple synchronous style. See\n', ' for an example of writing an asynchronous event-driven GUI app\nin a simple synchronous style.', 'In general, greenlets can be used for advanced control flow. For\nexample, you can ', '—without\nthe use of the ', ' keyword!', 'Are greenlets similar to generators? What about asyncio?', 'All three of greenlets, generators, and asyncio use a concept of\ncoroutines. However, greenlets, unlike the other two, require no\nspecial keywords or support from the Python language. In addition,\ngreenlets are capable of switching between stacks that feature C\nlibraries, whereas the other two are not.', 'Footnotes', 'In CPython, the ', '\ngenerally prevents two threads from executing Python code at\nthe same time. Parallelism is thus limited to code sections\nthat release the GIL, i.e., C code.', '\n        © Copyright 2011, Armin Rigo, Christian Tismer\n      \n        ', '\n      \n\n    ', ' »', 'greenlet: Lightweight concurrent programming', '\n        \n            \n            \n              ', '\n            \n          \n        \n      ', '\n', '\n', '\n', '\n', '\n', '\n'])"
