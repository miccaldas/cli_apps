content
"(['kislyuk/argcomplete', 'Name already in use', 'argcomplete - Bash/zsh tab completion for argparse', 'Tab complete all the things!', 'parser'], ['\n        Python and tab completion, better together.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Argcomplete provides easy, extensible command line tab completion of arguments for your Python application.', 'It makes two assumptions:', 'Argcomplete is particularly useful if your program has lots of options or subparsers, and if your program can\ndynamically suggest completions for your argument/option values (for example, if the user is browsing resources over\nthe network).', 'On Linux, you will need to run the second command with ', '. See ', ' below for details.', 'Refresh your shell environment (start a new shell or ', ').', 'Add the ', ' marker and a call to ', ' to your Python application as\nfollows:', ""Register your Python application with your shell's completion framework by running "", ':', 'Quotes are significant; the registration will fail without them. See ', ' below for a way to enable\nargcomplete generally without registering each application individually.', 'This method is the entry point to the module. It must be called ', ' ArgumentParser construction is complete, but\n', ' the ', "" method is called. The method looks for an environment variable that the\ncompletion hook shellcode sets, and if it's there, collects completions, prints them to the output stream (fd 8 by\ndefault), and exits. Otherwise, it returns to the caller immediately."", 'Side effects', 'Argcomplete gets completions by running your program. It intercepts the execution flow at the moment\n', ' is called. After sending completions, it exits using ', ' (', '\nby default). This means if your program has any side effects that happen before ', ' is called, those\nside effects will happen every time the user presses ', "" (although anything your program prints to stdout or\nstderr will be suppressed). For this reason it's best to construct the argument parser and call\n"", ' as early as possible in your execution flow.', 'Performance', 'If the program takes a long time to get to the point where ', "" is called, the tab completion\nprocess will feel sluggish, and the user may lose confidence in it. So it's also important to minimize the startup time\nof the program up to that point (for example, by deferring initialization or importing of large modules until after\nparsing options)."", 'You can specify custom completion functions for your options and arguments. Two styles are supported: callable and\nreadline-style. Callable completers are simpler. They are called with the following keyword arguments:', 'Completers should return their completions as a list of strings. An example completer for names of environment\nvariables might look like this:', 'To specify a completer for an argument or option, set the ', ' attribute of its associated action. An easy\nway to do this at definition time is:', 'If you specify the ', "" keyword for an argparse option or argument (and don't specify a completer), it will be\nused for completions."", 'A completer that is initialized with a set of all possible choices of values for its action might look like this:', 'The following two ways to specify a static set of choices are equivalent for completion purposes:', 'Note that if you use the ', ' option, argparse will show\nall these choices in the ', ' output by default. To prevent this, set\n', ' (like ', ').', 'The following ', ' uses\n', ' and ', ' to query GitHub for publicly known members of an\norganization and complete their names, then prints the member description:', ' like this:', 'If you have a useful completer to add to the ', ', send a pull request!', 'The ', ' module defines a completer protocol in ', '. Readline-style completers are also supported by\nargcomplete, so you can use the same completer object both in an interactive readline-powered shell and on the command\nline. For example, you can use the readline-style completer provided by ', ' to get introspective completions like\nyou would get in the IPython shell:', ' can also be used to plug in an argparse parser as a readline completer.', 'Normal stdout/stderr output is suspended when argcomplete runs. Sometimes, though, when the user presses ', "", it's\nappropriate to print information about why completions generation failed. To do this, use "", ':', 'By default, argcomplete validates your completions by checking if they start with the prefix given to the completer. You\ncan override this validation check by supplying the ', ' keyword to ', ':', ""In global completion mode, you don't have to register each argcomplete-capable executable separately. Instead, the shell\nwill look for the string "", "" in the first 1024 bytes of any executable that it's running\ncompletion for, and if it's found, follow the rest of the argcomplete protocol as described above."", 'Additionally, completion is activated for scripts run as ', ' and ', '.\nThis also works for alternate Python versions (e.g. ', ' and ', '), as long as that version of Python has\nargcomplete installed.', 'Bash version compatibility', 'When using bash, global completion requires bash support for ', ', which was introduced in bash 4.2. Since\nMac OS ships with an outdated version of Bash (3.2), you can either use zsh or install a newer version of bash using\n', ' (', ' - you will also need to add ', ' to\n', ', and run ', ' to change your shell). You can check the version of the running copy of bash with\n', '.', 'Note', 'If you use setuptools/distribute ', ' or ', ' directives to package your module,\nargcomplete will follow the wrapper scripts to their destination and look for ', ' in the\ndestination code.', 'If you choose not to use global completion, or ship a completion module that depends on argcomplete, you must register\nyour script explicitly using ', '. Standard completion module\nregistration roules apply: namely, the script name is passed directly to ', ', meaning it is only tab completed\nwhen invoked exactly as it was registered. In the above example, ', ' must be on the path, and the user\nmust be attempting to complete it by that name. The above line alone would ', ' allow you to complete\n', ', or ', '.', 'The script ', ' will try to install the global completion script\n', ' (', ') into an appropriate location on your system for both bash\nand zsh (', ' and ', '). On Linux, you will need to run the\nscript with sudo: ', ', or run the script with ', ' to see other options.', 'Argcomplete supports zsh. On top of plain completions like in bash, zsh allows you to see argparse help strings as\ncompletion descriptions. All shellcode included with argcomplete is compatible with both bash and zsh, so the same\ncompleter commands ', ' and ', '\nwork for zsh as well.', 'To register an argcomplete script for an arbitrary name, the ', ' argument of the ', ' script can be used:', 'This allows, for example, to use the auto completion functionality of argcomplete for an application not written in Python.\nThe command line interface of this program must be additionally implemented in a Python script with argparse and argcomplete and whenever the application is called the registered external argcomplete script is used for auto completion.', 'This option can also be used in combination with the other supported shells.', 'Argcomplete requires Python 3.7+.', 'Argcomplete maintainers provide support only for the bash and zsh shells on Linux and MacOS. For resources related to\nother shells and platforms, please see the ', '\ndirectory.', 'If global completion is not completing your script, bash may have registered a default completion function:', 'You can fix this by restarting your shell, or by running ', '.', 'Set the ', ' variable in your shell to enable verbose debug output every time argcomplete runs. This will\ndisrupt the command line composition state of your terminal, but make it possible to see the internal state of the\ncompleter if it encounters problems.', 'Inspired and informed by the ', ' module by Martin Blais.', 'Please report bugs, issues, feature requests, etc. on ', '.', 'Copyright 2012-2023, Andrey Kislyuk and argcomplete contributors. Licensed under the terms of the\n', '. Distribution of the LICENSE and NOTICE\nfiles with source copies of this package and derivative works is ', ' as specified by the Apache License.', '\n      Python and tab completion, better together.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n        ', '\n      ', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ""You're using bash or zsh as your shell"", ""You're using "", ' to manage your command line arguments/options', ': The prefix text of the last word before the cursor on the command line.\nFor dynamic completers, this can be used to reduce the work required to generate possible completions.', ': The ', ' instance that this completer was called for.', ': The ', ' instance that the action was taken by.', ': The result of argument parsing so far (the ', ' args object normally returned by\n', ').', ' - support argcomplete in ', ' shell', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
content
"(['kislyuk/argcomplete', 'Name already in use', 'argcomplete - Bash/zsh tab completion for argparse', 'Tab complete all the things!', 'parser'], ['\n        Python and tab completion, better together.\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'Argcomplete provides easy, extensible command line tab completion of arguments for your Python application.', 'It makes two assumptions:', 'Argcomplete is particularly useful if your program has lots of options or subparsers, and if your program can\ndynamically suggest completions for your argument/option values (for example, if the user is browsing resources over\nthe network).', 'On Linux, you will need to run the second command with ', '. See ', ' below for details.', 'Refresh your shell environment (start a new shell or ', ').', 'Add the ', ' marker and a call to ', ' to your Python application as\nfollows:', ""Register your Python application with your shell's completion framework by running "", ':', 'Quotes are significant; the registration will fail without them. See ', ' below for a way to enable\nargcomplete generally without registering each application individually.', 'This method is the entry point to the module. It must be called ', ' ArgumentParser construction is complete, but\n', ' the ', "" method is called. The method looks for an environment variable that the\ncompletion hook shellcode sets, and if it's there, collects completions, prints them to the output stream (fd 8 by\ndefault), and exits. Otherwise, it returns to the caller immediately."", 'Side effects', 'Argcomplete gets completions by running your program. It intercepts the execution flow at the moment\n', ' is called. After sending completions, it exits using ', ' (', '\nby default). This means if your program has any side effects that happen before ', ' is called, those\nside effects will happen every time the user presses ', "" (although anything your program prints to stdout or\nstderr will be suppressed). For this reason it's best to construct the argument parser and call\n"", ' as early as possible in your execution flow.', 'Performance', 'If the program takes a long time to get to the point where ', "" is called, the tab completion\nprocess will feel sluggish, and the user may lose confidence in it. So it's also important to minimize the startup time\nof the program up to that point (for example, by deferring initialization or importing of large modules until after\nparsing options)."", 'You can specify custom completion functions for your options and arguments. Two styles are supported: callable and\nreadline-style. Callable completers are simpler. They are called with the following keyword arguments:', 'Completers should return their completions as a list of strings. An example completer for names of environment\nvariables might look like this:', 'To specify a completer for an argument or option, set the ', ' attribute of its associated action. An easy\nway to do this at definition time is:', 'If you specify the ', "" keyword for an argparse option or argument (and don't specify a completer), it will be\nused for completions."", 'A completer that is initialized with a set of all possible choices of values for its action might look like this:', 'The following two ways to specify a static set of choices are equivalent for completion purposes:', 'Note that if you use the ', ' option, argparse will show\nall these choices in the ', ' output by default. To prevent this, set\n', ' (like ', ').', 'The following ', ' uses\n', ' and ', ' to query GitHub for publicly known members of an\norganization and complete their names, then prints the member description:', ' like this:', 'If you have a useful completer to add to the ', ', send a pull request!', 'The ', ' module defines a completer protocol in ', '. Readline-style completers are also supported by\nargcomplete, so you can use the same completer object both in an interactive readline-powered shell and on the command\nline. For example, you can use the readline-style completer provided by ', ' to get introspective completions like\nyou would get in the IPython shell:', ' can also be used to plug in an argparse parser as a readline completer.', 'Normal stdout/stderr output is suspended when argcomplete runs. Sometimes, though, when the user presses ', "", it's\nappropriate to print information about why completions generation failed. To do this, use "", ':', 'By default, argcomplete validates your completions by checking if they start with the prefix given to the completer. You\ncan override this validation check by supplying the ', ' keyword to ', ':', ""In global completion mode, you don't have to register each argcomplete-capable executable separately. Instead, the shell\nwill look for the string "", "" in the first 1024 bytes of any executable that it's running\ncompletion for, and if it's found, follow the rest of the argcomplete protocol as described above."", 'Additionally, completion is activated for scripts run as ', ' and ', '.\nThis also works for alternate Python versions (e.g. ', ' and ', '), as long as that version of Python has\nargcomplete installed.', 'Bash version compatibility', 'When using bash, global completion requires bash support for ', ', which was introduced in bash 4.2. Since\nMac OS ships with an outdated version of Bash (3.2), you can either use zsh or install a newer version of bash using\n', ' (', ' - you will also need to add ', ' to\n', ', and run ', ' to change your shell). You can check the version of the running copy of bash with\n', '.', 'Note', 'If you use setuptools/distribute ', ' or ', ' directives to package your module,\nargcomplete will follow the wrapper scripts to their destination and look for ', ' in the\ndestination code.', 'If you choose not to use global completion, or ship a completion module that depends on argcomplete, you must register\nyour script explicitly using ', '. Standard completion module\nregistration roules apply: namely, the script name is passed directly to ', ', meaning it is only tab completed\nwhen invoked exactly as it was registered. In the above example, ', ' must be on the path, and the user\nmust be attempting to complete it by that name. The above line alone would ', ' allow you to complete\n', ', or ', '.', 'The script ', ' will try to install the global completion script\n', ' (', ') into an appropriate location on your system for both bash\nand zsh (', ' and ', '). On Linux, you will need to run the\nscript with sudo: ', ', or run the script with ', ' to see other options.', 'Argcomplete supports zsh. On top of plain completions like in bash, zsh allows you to see argparse help strings as\ncompletion descriptions. All shellcode included with argcomplete is compatible with both bash and zsh, so the same\ncompleter commands ', ' and ', '\nwork for zsh as well.', 'To register an argcomplete script for an arbitrary name, the ', ' argument of the ', ' script can be used:', 'This allows, for example, to use the auto completion functionality of argcomplete for an application not written in Python.\nThe command line interface of this program must be additionally implemented in a Python script with argparse and argcomplete and whenever the application is called the registered external argcomplete script is used for auto completion.', 'This option can also be used in combination with the other supported shells.', 'Argcomplete requires Python 3.7+.', 'Argcomplete maintainers provide support only for the bash and zsh shells on Linux and MacOS. For resources related to\nother shells and platforms, please see the ', '\ndirectory.', 'If global completion is not completing your script, bash may have registered a default completion function:', 'You can fix this by restarting your shell, or by running ', '.', 'Set the ', ' variable in your shell to enable verbose debug output every time argcomplete runs. This will\ndisrupt the command line composition state of your terminal, but make it possible to see the internal state of the\ncompleter if it encounters problems.', 'Inspired and informed by the ', ' module by Martin Blais.', 'Please report bugs, issues, feature requests, etc. on ', '.', 'Copyright 2012-2023, Andrey Kislyuk and argcomplete contributors. Licensed under the terms of the\n', '. Distribution of the LICENSE and NOTICE\nfiles with source copies of this package and derivative works is ', ' as specified by the Apache License.', '\n      Python and tab completion, better together.\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n        ', '\n      ', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', ""You're using bash or zsh as your shell"", ""You're using "", ' to manage your command line arguments/options', ': The prefix text of the last word before the cursor on the command line.\nFor dynamic completers, this can be used to reduce the work required to generate possible completions.', ': The ', ' instance that this completer was called for.', ': The ', ' instance that the action was taken by.', ': The result of argument parsing so far (the ', ' args object normally returned by\n', ').', ' - support argcomplete in ', ' shell', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
