content
"(['dpranke/pyjson5', 'Name already in use', 'pyjson5', 'is', 'Note: This is a\npotentially breaking change.'], ['\n        A Python implementation of the JSON5 data format\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'A Python implementation of the JSON5 data format.', ' extends the\n', ' data interchange format to make it\nslightly more usable as a configuration language:', 'JavaScript-style comments (both single and multi-line) are legal.', 'Object keys may be unquoted if they are legal ECMAScript identifiers', 'Objects and arrays may end with trailing commas.', 'Strings can be single-quoted, and multi-line string literals are allowed.', 'There are a few other more minor extensions to JSON; see the above page for\nthe full details.', 'This project implements a reader and writer implementation for Python;\nwhere possible, it mirrors the\n', '\npackage for ease of use.', 'There is one notable difference from the JSON api: the ', ' and\n', ' methods support optionally checking for (and rejecting) duplicate\nobject keys; pass ', ' to do so (duplicates are\nallowed by default).', 'This is an early release. It has been reasonably well-tested, but it is\n', '. It can be 1000-6000x slower than the C-optimized JSON module,\nand is 200x slower (or more) than the pure Python JSON module.', "" This library only handles JSON5 documents, it does not\nallow you to read arbitrary JavaScript. For example, bare integers can\nbe legal object keys in JavaScript, but they aren't in JSON5."", 'Did I mention that it is ', '?', ""The implementation follows Python3's "", ' implementation where\npossible. This means that the ', ' method to ', ' is\nignored, and unicode strings are always returned.', 'The ', ' keyword argument that ', '/', ' accepts\nto specify a custom subclass of ', "" is not and will not be\nsupported, because this implementation uses a completely different\napproach to parsing strings and doesn't have anything like the\n"", ' class.', 'The ', ' keyword argument that ', '/', ' accepts\nis also not supported, for consistency with ', '. The ', '\nkeyword ', ' supported, though, and might be able to serve as a\nworkaround.', 'To run the tests, setup a venv and install the required dependencies with\n', ', then run the tests with ', '.', 'v0.9.13 (2023-03-16)', 'v0.9.12 (2023-01-02)', 'v0.9.11 (2023-01-02)', 'v0.9.10 (2022-08-18)', 'v0.9.9 (2022-08-01)', 'v0.9.8 (2022-05-08)', 'v0.9.7 (2022-05-06)', 'v0.9.6 (2021-06-21)', 'v0.9.5 (2020-05-26)', 'v0.9.4 (2020-03-26)', 'v0.9.3 (2020-03-17)', 'v0.9.2 (2020-03-02)', 'v0.9.1 (2020-02-09)', 'v0.9.0 (2020-01-30)', 'v0.8.5 (2019-07-04)', 'v0.8.4 (2019-06-11)', 'v0.8.3 (2019-06-11)', 'v0.8.2 (2019-06-11)', 'v0.8.1 (2019-06-11)', 'v0.8.0 (2019-06-11)', 'v0.7 (2019-03-31)', 'v0.6.2 (2019-03-08)', 'v0.6.1 (2018-05-22)', 'v0.6.0 (2017-11-28)', 'v0.5.0 (2017-09-04)', '\n      A Python implementation of the JSON5 data format\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\nRemove a field from one of the JSON benchmark files to\nreduce confusion in Chromium.', 'No code changes.', '\n', '\n', '\n', 'Fix GitHub Actions config file to no longer test against\nPython 3.6 or 3.7. For now we will only test against an\n""oldest"" release (3.8 in this case) and a ""current""\nrelease (3.11 in this case).', '\n', '\n', '\n', '\nFixed minor Python2 compatibility issue by referring to\n', ' instead of ', '.', '\n', '\n', '\n', '\nUpdated the //README.md to be clear that parsing arbitrary JS\ncode may not work.', 'Otherwise, no code changes.', '\n', '\n', '\n', '\nFixed serialization for objects that subclass ', ' or ', ':\nPreviously we would use the objects ', ' implementation, but\nthat might result in an illegal JSON5 value if the object had\ncustomized ', ' to return something illegal. Instead,\nwe follow the lead of the ', ' module and call ', '\nor ', ' directly.', 'While I was at it, I added tests for dumps(-inf) and dumps(nan)\nwhen those were supposed to be disallowed by ', '.', '\n', '\n', '\n', '\nFixed error reporting in some cases due to how parsing was handling\nnested rules in the grammar - previously the reported location for\nthe error could be far away from the point where it actually happened.', '\n', '\n', '\n', '\nFixed behavior of ', ' fn in ', ' and ', "". Previously\nwe didn't require the function to return a string, and so we could\nend up returning something that wasn't actually valid. This change\nnow matches the behavior in the "", ' module. ', '\n', '\n', '\n', ""Bump development status classifier to 5 - Production/Stable, which\nthe library feels like it is at this point. If I do end up significantly\nreworking things to speed it up and/or to add round-trip editing,\nthat'll likely be a 2.0. If this version has no reported issues,\nI'll likely promote it to 1.0."", 'Also bump the tested Python versions to 2.7, 3.8 and 3.9, though\nearlier Python3 versions will likely continue to work as well.', '\nFix incorrect serialization of custom subtypes', 'Make it possible to run the tests if ', "" isn't installed."", '\n', '\n', '\n', 'Miscellaneous non-source cleanups in the repo, including setting\nup GitHub Actions for a CI system. No changes to the library from\nv0.9.4, other than updating the version.', '\n', '\n', '\n', '\nFix from ', ' for dumps() crashing when passed\nan empty string as a key in an object.', '\n', '\n', '\n', '\nFix from pastelmind@ for dump() not passing the right args to dumps().', 'Fix from ', ' to remove the tests directory from\nthe setup call, making the package a bit smaller.', '\n', '\n', '\n', '\nFix from roosephu@ for a badly formatted nested list.', '\n', '\n', '\n', ':\nFix stray trailing comma when dumping an object with an invalid key.', '\n', '\n', '\n', ':\nFix an issue where objects keys that started with a reserved\nword were incorrectly quoted.', ':\nFix an issue where dumps() incorrectly thought a data structure\nwas cyclic in some cases.', ':\nAllow for non-string keys in dicts passed to ', '/', '.\nAdd an ', ' to prevent possible\nill-formed JSON that might result.', '\n', '\n', '\n', ':\nAdd LICENSE and README.md to the dist.', ':\nFix printing of empty arrays and objects with indentation, fix\nmisreporting of the position on parse failures in some cases.', '\n', '\n', '\n', 'Updated the version history, too.', '\n', '\n', '\n', 'Tweaked the README, bumped the version, forgot to update the version\nhistory :).', '\n', '\n', '\n', 'Actually bump the version properly, to 0.8.2.', '\n', '\n', '\n', 'Fix bug in setup.py that messed up the description. Unfortunately,\nI forgot to bump the version for this, so this also identifies as 0.8.0.', '\n', '\n', '\n', 'Add ', ' as a default argument to\n', '/', '. If you set the key to ', ', duplicate\nkeys in a single dict will be rejected. The default is set to ', '\nfor compatibility with ', "", earlier versions of json5, and\nbecause it's simply not clear if people would want duplicate checking\nenabled by default."", '\n', '\n', '\n', 'Changes dump()/dumps() to not quote object keys by default if they are\nlegal identifiers. Passing ', ' will turn that off\nand always quote object keys.', 'Changes dump()/dumps() to insert trailing commas after the last item\nin an array or an object if the object is printed across multiple lines\n(i.e., if ', ' is not None). Passing ', ' will\nturn that off.', 'The ', ' command line tool now supports the ', ',\n', ', and ', ' flags to allow\nfor more control over the output, in addition to the existing\n', ' flag.', 'The ', ' command line tool no longer supports reading from\nmultiple files, you can now only read from a single file or\nfrom standard input.', 'The implementation no longer relies on the standard ', ' module\nfor anything. The output should still match the json module (except\nas noted above) and discrepancies should be reported as bugs.', '\n', '\n', '\n', 'Fix ', ' and\npass through unrecognized escape sequences.', '\n', '\n', '\n', 'Cleaned up a couple minor nits in the package.', '\n', '\n', '\n', 'First implementation that attempted to implement 100% of the spec.', '\n', '\n', '\n', 'First implementation that supported the full set of kwargs that\nthe ', ' module supports.', '\n', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
content
"(['dpranke/pyjson5', 'Name already in use', 'pyjson5', 'is', 'Note: This is a\npotentially breaking change.'], ['\n        A Python implementation of the JSON5 data format\n      ', '\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', 'A Python implementation of the JSON5 data format.', ' extends the\n', ' data interchange format to make it\nslightly more usable as a configuration language:', 'JavaScript-style comments (both single and multi-line) are legal.', 'Object keys may be unquoted if they are legal ECMAScript identifiers', 'Objects and arrays may end with trailing commas.', 'Strings can be single-quoted, and multi-line string literals are allowed.', 'There are a few other more minor extensions to JSON; see the above page for\nthe full details.', 'This project implements a reader and writer implementation for Python;\nwhere possible, it mirrors the\n', '\npackage for ease of use.', 'There is one notable difference from the JSON api: the ', ' and\n', ' methods support optionally checking for (and rejecting) duplicate\nobject keys; pass ', ' to do so (duplicates are\nallowed by default).', 'This is an early release. It has been reasonably well-tested, but it is\n', '. It can be 1000-6000x slower than the C-optimized JSON module,\nand is 200x slower (or more) than the pure Python JSON module.', "" This library only handles JSON5 documents, it does not\nallow you to read arbitrary JavaScript. For example, bare integers can\nbe legal object keys in JavaScript, but they aren't in JSON5."", 'Did I mention that it is ', '?', ""The implementation follows Python3's "", ' implementation where\npossible. This means that the ', ' method to ', ' is\nignored, and unicode strings are always returned.', 'The ', ' keyword argument that ', '/', ' accepts\nto specify a custom subclass of ', "" is not and will not be\nsupported, because this implementation uses a completely different\napproach to parsing strings and doesn't have anything like the\n"", ' class.', 'The ', ' keyword argument that ', '/', ' accepts\nis also not supported, for consistency with ', '. The ', '\nkeyword ', ' supported, though, and might be able to serve as a\nworkaround.', 'To run the tests, setup a venv and install the required dependencies with\n', ', then run the tests with ', '.', 'v0.9.13 (2023-03-16)', 'v0.9.12 (2023-01-02)', 'v0.9.11 (2023-01-02)', 'v0.9.10 (2022-08-18)', 'v0.9.9 (2022-08-01)', 'v0.9.8 (2022-05-08)', 'v0.9.7 (2022-05-06)', 'v0.9.6 (2021-06-21)', 'v0.9.5 (2020-05-26)', 'v0.9.4 (2020-03-26)', 'v0.9.3 (2020-03-17)', 'v0.9.2 (2020-03-02)', 'v0.9.1 (2020-02-09)', 'v0.9.0 (2020-01-30)', 'v0.8.5 (2019-07-04)', 'v0.8.4 (2019-06-11)', 'v0.8.3 (2019-06-11)', 'v0.8.2 (2019-06-11)', 'v0.8.1 (2019-06-11)', 'v0.8.0 (2019-06-11)', 'v0.7 (2019-03-31)', 'v0.6.2 (2019-03-08)', 'v0.6.1 (2018-05-22)', 'v0.6.0 (2017-11-28)', 'v0.5.0 (2017-09-04)', '\n      A Python implementation of the JSON5 data format\n    ', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\nRemove a field from one of the JSON benchmark files to\nreduce confusion in Chromium.', 'No code changes.', '\n', '\n', '\n', 'Fix GitHub Actions config file to no longer test against\nPython 3.6 or 3.7. For now we will only test against an\n""oldest"" release (3.8 in this case) and a ""current""\nrelease (3.11 in this case).', '\n', '\n', '\n', '\nFixed minor Python2 compatibility issue by referring to\n', ' instead of ', '.', '\n', '\n', '\n', '\nUpdated the //README.md to be clear that parsing arbitrary JS\ncode may not work.', 'Otherwise, no code changes.', '\n', '\n', '\n', '\nFixed serialization for objects that subclass ', ' or ', ':\nPreviously we would use the objects ', ' implementation, but\nthat might result in an illegal JSON5 value if the object had\ncustomized ', ' to return something illegal. Instead,\nwe follow the lead of the ', ' module and call ', '\nor ', ' directly.', 'While I was at it, I added tests for dumps(-inf) and dumps(nan)\nwhen those were supposed to be disallowed by ', '.', '\n', '\n', '\n', '\nFixed error reporting in some cases due to how parsing was handling\nnested rules in the grammar - previously the reported location for\nthe error could be far away from the point where it actually happened.', '\n', '\n', '\n', '\nFixed behavior of ', ' fn in ', ' and ', "". Previously\nwe didn't require the function to return a string, and so we could\nend up returning something that wasn't actually valid. This change\nnow matches the behavior in the "", ' module. ', '\n', '\n', '\n', ""Bump development status classifier to 5 - Production/Stable, which\nthe library feels like it is at this point. If I do end up significantly\nreworking things to speed it up and/or to add round-trip editing,\nthat'll likely be a 2.0. If this version has no reported issues,\nI'll likely promote it to 1.0."", 'Also bump the tested Python versions to 2.7, 3.8 and 3.9, though\nearlier Python3 versions will likely continue to work as well.', '\nFix incorrect serialization of custom subtypes', 'Make it possible to run the tests if ', "" isn't installed."", '\n', '\n', '\n', 'Miscellaneous non-source cleanups in the repo, including setting\nup GitHub Actions for a CI system. No changes to the library from\nv0.9.4, other than updating the version.', '\n', '\n', '\n', '\nFix from ', ' for dumps() crashing when passed\nan empty string as a key in an object.', '\n', '\n', '\n', '\nFix from pastelmind@ for dump() not passing the right args to dumps().', 'Fix from ', ' to remove the tests directory from\nthe setup call, making the package a bit smaller.', '\n', '\n', '\n', '\nFix from roosephu@ for a badly formatted nested list.', '\n', '\n', '\n', ':\nFix stray trailing comma when dumping an object with an invalid key.', '\n', '\n', '\n', ':\nFix an issue where objects keys that started with a reserved\nword were incorrectly quoted.', ':\nFix an issue where dumps() incorrectly thought a data structure\nwas cyclic in some cases.', ':\nAllow for non-string keys in dicts passed to ', '/', '.\nAdd an ', ' to prevent possible\nill-formed JSON that might result.', '\n', '\n', '\n', ':\nAdd LICENSE and README.md to the dist.', ':\nFix printing of empty arrays and objects with indentation, fix\nmisreporting of the position on parse failures in some cases.', '\n', '\n', '\n', 'Updated the version history, too.', '\n', '\n', '\n', 'Tweaked the README, bumped the version, forgot to update the version\nhistory :).', '\n', '\n', '\n', 'Actually bump the version properly, to 0.8.2.', '\n', '\n', '\n', 'Fix bug in setup.py that messed up the description. Unfortunately,\nI forgot to bump the version for this, so this also identifies as 0.8.0.', '\n', '\n', '\n', 'Add ', ' as a default argument to\n', '/', '. If you set the key to ', ', duplicate\nkeys in a single dict will be rejected. The default is set to ', '\nfor compatibility with ', "", earlier versions of json5, and\nbecause it's simply not clear if people would want duplicate checking\nenabled by default."", '\n', '\n', '\n', 'Changes dump()/dumps() to not quote object keys by default if they are\nlegal identifiers. Passing ', ' will turn that off\nand always quote object keys.', 'Changes dump()/dumps() to insert trailing commas after the last item\nin an array or an object if the object is printed across multiple lines\n(i.e., if ', ' is not None). Passing ', ' will\nturn that off.', 'The ', ' command line tool now supports the ', ',\n', ', and ', ' flags to allow\nfor more control over the output, in addition to the existing\n', ' flag.', 'The ', ' command line tool no longer supports reading from\nmultiple files, you can now only read from a single file or\nfrom standard input.', 'The implementation no longer relies on the standard ', ' module\nfor anything. The output should still match the json module (except\nas noted above) and discrepancies should be reported as bugs.', '\n', '\n', '\n', 'Fix ', ' and\npass through unrecognized escape sequences.', '\n', '\n', '\n', 'Cleaned up a couple minor nits in the package.', '\n', '\n', '\n', 'First implementation that attempted to implement 100% of the spec.', '\n', '\n', '\n', 'First implementation that supported the full set of kwargs that\nthe ', ' module supports.', '\n', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n                ', '\n              ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n      ', '\n    ', '\n        ', '\n    ', '\n        ', '\n    '])"
