content
"(['mrabarnett/mrab-regex', 'Name already in use', 'only'], ['\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', ""This regex implementation is backwards-compatible with the standard 're' module, but offers additional functionality."", ""The re module's behaviour with zero-width matches changed in Python 3.7, and this module follows that behaviour when compiled for Python 3.7."", 'Python 2 is no longer supported. The last release that supported Python 2 was 2021.11.10.', ""This module is targeted at CPython. It expects that all codepoints are the same width, so it won't behave properly with PyPy outside U+0000..U+007F because PyPy stores strings as UTF-8."", 'The regex module releases the GIL during matching on instances of the built-in (immutable) string classes, enabling other Python threads to run concurrently. It is also possible to force the regex module to release the GIL during matching by calling the matching methods with the keyword argument ', '. The behaviour is undefined if the string changes during matching, so use it ', "" when it is guaranteed that that won't happen."", 'This module supports Unicode 15.0.0. Full Unicode case-folding is supported.', 'There are 2 kinds of flag: scoped and global. Scoped flags can apply to only part of a pattern and can be turned on or off; global flags apply to the entire pattern and can only be turned on.', 'The scoped flags are: ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', '.', 'The global flags are: ', ', ', ', ', ', ', ', ', ', ', '.', 'If neither the ', ', ', ' nor ', ' flag is specified, it will default to ', ' if the regex pattern is a Unicode string and ', "" if it's a bytestring."", 'The ', ' flag makes fuzzy matching attempt to improve the fit of the next match that it finds.', 'The ', ' flag makes fuzzy matching search for the best match instead of the next match.', 'In order to be compatible with the re module, this module has 2 behaviours:', ' behaviour (old behaviour, compatible with the re module):', ""Please note that the re module's behaviour may change over time, and I'll endeavour to match that behaviour in version 0."", ' behaviour (new behaviour, possibly different from the re module):', 'If no version is specified, the regex module will default to ', '.', 'The regex module supports both simple and full case-folding for case-insensitive matches in Unicode. Use of full case-folding can be turned on using the ', ' flag. Please note that this flag affects how the ', ' flag works; the ', ' flag itself does not turn on case-insensitive matching.', 'Version 0 behaviour: the flag is off by default.', 'Version 1 behaviour: the flag is on by default.', ""It's not possible to support both simple sets, as used in the re module, and nested sets at the same time because of a difference in the meaning of an unescaped "", ' in a set.', 'For example, the pattern ', ' is treated in the version 0 behaviour (simple sets, compatible with the re module) as:', 'but in the version 1 behaviour (nested sets, enhanced behaviour) as:', 'Version 0 behaviour: only simple sets are supported.', 'Version 1 behaviour: nested sets and set operations are supported.', 'All groups have a group number, starting from 1.', 'Groups with the same group name will have the same group number, and groups with a different group name will have a different group number.', ""The same name can be used by more than one group, with later captures 'overwriting' earlier captures. All the captures of the group will be available from the "", ' method of the match object.', 'Group numbers will be reused across different branches of a branch reset, eg. ', ' has only group 1. If groups have different group names then they will, of course, have different group numbers, eg. ', ' has group 1 (""foo"") and group 2 (""bar"").', 'In the regex ', ' there are 2 groups:', 'If you want to prevent ', ' from being group 2, you need to name it (different name, different group number).', 'The issue numbers relate to the Python bug tracker, except where listed otherwise.', ' or ', ' matches horizontal whitespace and ', ' or ', ' matches vertical whitespace.', 'The test of a conditional pattern can be a lookaround.', 'This is not quite the same as putting a lookaround in the first branch of a pair of alternatives.', 'In the first example, the lookaround matched, but the remainder of the first branch failed to match, and so the second branch was attempted, whereas in the second example, the lookaround matched, and the first branch failed to match, but the second branch was ', ' attempted.', 'The POSIX standard for regex is to return the leftmost longest match. This can be turned on using the ', ' flag.', ""Note that it will take longer to find matches because when it finds a match at a certain position, it won't return that immediately, but will keep looking to see if there's another longer match there."", 'If there\'s no group called ""DEFINE"", then ... will be ignored except that any groups defined within it can be called and that the normal rules for numbering groups still apply.', "" discards the backtracking info up to that point. When used in an atomic group or a lookaround, it won't affect the enclosing pattern."", ' is similar to ', "", except that it also sets where in the text the next attempt to match will start. When used in an atomic group or a lookaround, it won't affect the enclosing pattern."", ' causes immediate backtracking. ', ' is a permitted abbreviation.', 'Keeps the part of the entire match after the position where ', ' occurred; the part before it is discarded.', 'It does not affect what groups return.', 'You can use subscripting to get the captures of a repeated group.', 'This is in addition to the existing ', '.', 'The ', "" flag is intended for legacy code and has limited support. You're still recommended to use Unicode instead."", 'A partial match is one that matches up to the end of string, but that string has been truncated and you want to know whether a complete match could be possible if the string had not been truncated.', 'Partial matches are supported by ', ', ', ', ', ' and ', ' with the ', ' keyword argument.', 'Match objects have a ', ' attribute, which is ', "" if it's a partial match."", 'For example, if you wanted a user to enter a 4-digit number and check it character by character as it was being entered:', ""Sometimes it's not clear how zero-width matches should be handled. For example, should "", ' match 0 characters directly after matching >0 characters?', ' is a combination of ', ' and ', ':', ' returns a dict of the named groups and the last capture of those groups.', ' returns a list of all the captures of a group', ' returns a dict of the named groups and lists of all the captures of those groups.', ' returns a list of all the captures of all the groups.', ' returns a list of all the spans of the all captures of all the groups.', 'Group names can be duplicated.', ' behaves like ', ', except that it must match all of the string.', ' and ', ' are alternatives to ', ' and ', ' respectively. When passed a replacement string, they treat it as a format string.', ' is an alternative to ', '. When passed a replacement string, it treats it as a format string.', 'A match object contains a reference to the string that was searched, via its ', ' attribute. The ', "" method will 'detach' that string, making it available for garbage collection, which might save valuable memory if that string is very large."", 'Recursive and repeated patterns are supported.', ' or ', ' tries to match the entire regex recursively. ', ', ', ', etc, try to match the relevant group.', ' tries to match the named group.', 'The first two examples show how the subpattern within the group is reused, but is _not_ itself a group. In other words, ', ' is equivalent to ', '.', ""It's possible to backtrack into a recursed or repeated group."", ""You can't call a group if there is more than one group with that group name or group number ("", ').', 'The alternative forms ', ' and ', ' are also supported.', 'In version 1 behaviour, the regex module uses full case-folding when performing case-insensitive matches in Unicode.', 'In version 0 behaviour, it uses simple case-folding for backward compatibility with the re module.', 'Regex usually attempts an exact match, but sometimes an approximate, or ""fuzzy"", match is needed, for those cases where the text being searched may contain errors in the form of inserted, deleted or substituted characters.', 'A fuzzy regex specifies which types of errors are permitted, and, optionally, either the minimum and maximum or only the maximum permitted number of each type. (You cannot specify only a minimum.)', 'The 3 types of error are:', 'In addition, ""e"" indicates any type of error.', 'The fuzziness of a regex item is specified between ""{"" and ""}"" after the item.', 'Examples:', 'If a certain type of error is specified, then any type not specified will ', ' be permitted.', ""In the following examples I'll omit the item and write only the fuzziness:"", ""It's also possible to state the costs of each type of error and the maximum permitted total cost."", 'Examples:', 'You can also use ""<"" instead of ""<="" if you want an exclusive minimum or maximum.', ""You can add a test to perform on a character that's substituted or inserted."", 'Examples:', 'By default, fuzzy matching searches for the first match that meets the given constraints. The ', ' flag will cause it to attempt to improve the fit (i.e. reduce the number of errors) of the match that it has found.', 'The ', ' flag will make it search for the best match instead.', 'Further examples to note:', 'In the first two examples there are perfect matches later in the string, but in neither case is it the first possible match.', 'The match object has an attribute ', ' which gives the total number of substitutions, insertions and deletions.', 'The match object also has an attribute ', ' which gives a tuple of the positions of the substitutions, insertions and deletions.', 'What this means is that if the matched part of the string had been:', ""it would've been an exact match."", 'However, there were insertions at positions 7 and 8:', 'and deletions at positions 10 and 11:', 'So the actual string was:', 'There are occasions where you may want to include a list (actually, a set) of options in a regex.', 'One way is to build the pattern like this:', 'but if the list is large, parsing the resulting regex can take considerable time, and care must also be taken that the strings are properly escaped and properly ordered, for example, ""cats"" before ""cat"".', 'The new alternative is to use a named list:', 'The order of the items is irrelevant, they are treated as a set. The named lists are available as the ', ' attribute of the pattern object :', 'If there are any unused keyword arguments, ', ' will be raised unless you tell it otherwise:', ' matches at the start of a word.', ' matches at the end of a word.', 'Compare with ', ', which matches at the start or end of a word.', 'Normally the only line separator is ', ' (', '), but if the ', ' flag is turned on then the line separators are ', ', ', ', ', ', ', ' and ', ', plus ', ', ', ' and ', ' when working with Unicode.', 'This affects the regex dot ', ', which, with the ', ' flag turned off, matches any character except a line separator. It also affects the line anchors ', ' and ', ' (in multiline mode).', 'Set operators have been added, and a set ', ' can include nested sets.', 'The operators, in order of increasing precedence, are:', 'Implicit union, ie, simple juxtaposition like in ', ', has the highest precedence. Thus, ', ' is the same as ', '.', 'Examples:', 'regex.escape has an additional keyword parameter ', "". When True, only 'special' regex characters, such as '?', are escaped."", 'regex.escape has an additional keyword parameter ', '. When True, spaces are not escaped.', 'A match object has additional methods which return information on all the successful matches of a repeated group. These methods are:', 'If the following pattern subsequently fails, then the subpattern as a whole will fail.', ' ; ', ' ; ', ' ; ', ""The subpattern is matched up to 'max' times. If the following pattern subsequently fails, then all the repeated subpatterns will fail as a whole. For example, "", ' is equivalent to ', '.', 'The flags will apply only to the subpattern. Flags can be turned on or off.', ""The definition of a 'word' character has been expanded for Unicode. It conforms to the Unicode specification at "", '.', 'A lookbehind can match a variable-length string.', ', ', ' and ', "" support a 'flags' argument."", ' and ', "" support 'pos' and 'endpos' arguments."", ' and ', "" support an 'overlapped' flag which permits overlapped matches."", "" has been added. It's a generator equivalent of "", '.', 'A match object accepts access to the groups via subscripting and slicing:', 'Groups can be named with ', ' as well as the existing ', '.', 'Groups can be referenced within a pattern with ', '. This also allows there to be more than 99 groups.', ""Named characters are supported. Note that only those known by Python's Unicode database will be recognised."", '; ', '; ', ' ; ', 'Many Unicode properties are supported, including blocks and scripts. ', ' or ', ' matches a character whose property ', ' has value ', '. The inverse of ', ' is ', ' or ', '.', 'If the short form ', ' is used, the properties are checked in the order: ', ', ', ', ', ', binary property:', 'A short form starting with ', ' indicates a script or binary property:', 'A short form starting with ', ' indicates a block property:', '; ', 'POSIX character classes are supported. These are normally treated as an alternative form of ', '.', 'The exceptions are ', ', ', ', ', ' and ', ', whose definitions are different from those of Unicode.', ' is equivalent to ', '.', ' is equivalent to ', '.', ' is equivalent to ', '.', ' is equivalent to ', '.', 'A search anchor has been added. It matches at the position where each search started/continued and can be used for contiguous matches or in negative variable-length lookbehinds to limit how far back the lookbehind goes:', 'Searches can also work backwards:', 'Note that the result of a reverse search is not necessarily the reverse of a forward search:', 'The grapheme matcher is supported. It conforms to the Unicode specification at ', '.', 'Group numbers will be reused across the alternatives, but groups with different names will have different group numbers.', 'Note that there is only one group.', 'The ', "" flag changes the definition of a 'word boundary' to that of a default Unicode word boundary. This applies to "", ' and ', '.', 'The matching methods and functions support timeouts. The timeout (in seconds) applies to the entire operation:', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', '\n', 'Indicated by the ', ' flag.', 'Zero-width matches are not handled correctly in the re module before Python 3.7. The behaviour in those earlier versions is:', "" won't split a string at a zero-width match."", ' will advance by one character after a zero-width match.', '\n', ""Inline flags apply to the entire pattern, and they can't be turned off."", 'Only simple sets are supported.', 'Case-insensitive matches in Unicode use simple case-folding by default.', '\n', '\n', 'Indicated by the ', ' flag.', 'Zero-width matches are handled correctly.', 'Inline flags apply to the end of the group or pattern, and they can be turned off.', 'Nested sets and set operations are supported.', 'Case-insensitive matches in Unicode use full case-folding by default.', '\n', 'Set containing ""["" and the letters ""a"" to ""z""', 'Literal ""--""', 'Set containing letters ""a"", ""e"", ""i"", ""o"", ""u""', 'Literal ""]""', 'Set which is:', 'Set containing the letters ""a"" to ""z""', '\n', 'but excluding:', 'Set containing the letters ""a"", ""e"", ""i"", ""o"", ""u""', '\n', ' is group 1.', ' is group 2, also called ""foo"".', ' is group 2 because of the branch reset.', ' is group 2 because it\'s called ""foo"".', 'Insertion, indicated by ""i""', 'Deletion, indicated by ""d""', 'Substitution, indicated by ""s""', ' match ""foo"" exactly', ' match ""foo"", permitting insertions', ' match ""foo"", permitting deletions', ' match ""foo"", permitting substitutions', ' match ""foo"", permitting insertions and substitutions', ' match ""foo"", permitting errors', ' permit at most 3 deletions, but no other types', ' permit at most 1 insertion and at most 2 substitutions, but no deletions', ' permit at least 1 and at most 3 errors', ' permit at most 2 insertions, at most 2 deletions, at most 3 errors in total, but no substitutions', ' each insertion costs 2, each deletion costs 2, each substitution costs 1, the total cost must not exceed 4', ' at most 1 insertion, at most 1 deletion, at most 1 substitution; each insertion costs 2, each deletion costs 2, each substitution costs 1, the total cost must not exceed 4', ' at most 2 substitutions, which must be in the character set ', '.', ' at most 2 substitutions, at most 3 insertions, which must be digits.', ' returns ', ' because that matches ', ' with 3 errors (an unlimited number of errors is permitted).', ' returns ', ' (with a leading space) because that matches ', ' with 1 error, which is within the limit.', ' returns ', ' (without a leading space) because the fuzzy search matches ', ' with 1 error, which is within the limit, and the ', ' then it attempts a better fit.', ' for union (""x||y"" means ""x or y"")', ' (double tilde) for symmetric difference (""x~~y"" means ""x or y, but not both"")', ' for intersection (""x&&y"" means ""x and y"")', ' (double dash) for difference (""x--y"" means ""x but not y"")', "" # Set containing 'a' and 'b'"", "" # Set containing 'a' .. 'z'"", "" # Set containing 'a' .. 'z', but not 'q' or 'w'"", ' # Same as above', "" # Set containing all letters except 'Q' and 'W'"", "" # Set containing all numbers except '0' .. '9'"", ' # Set containing all characters which are ASCII and letter', 'Returns a list of the strings matched in a group or groups. Compare with ', '.', '\n', 'Returns a list of the start positions. Compare with ', '.', '\n', 'Returns a list of the end positions. Compare with ', '.', '\n', 'Returns a list of the spans. Compare with ', '.', '\n', "", the 'Latin' script ("", ').', "", the 'BasicLatin' block ("", ').', "", the 'Alphabetic' binary property ("", ').', "", the 'Latin' script ("", ').', "", the 'Alphabetic' binary property ("", ').', "", the 'BasicLatin' block ("", ').', ""The search starts at position 0 and matches 'ab'."", ""The search continues at position 2 and matches 'cd'."", 'The search continues at position 4 and fails to match any letters.', 'The anchor stops the search start position from being advanced, so there are no more results.', '\n      ', '\n      ', '    ', '\n      ', '\n      ', '    ', '\n        ', '\n    ', '\n        ', '\n    '])"
content
"(['mrabarnett/mrab-regex', 'Name already in use', 'only'], ['\n        Use Git or checkout with SVN using the web URL.\n    ', '\n      Work fast with our official CLI.\n      ', '.\n    ', '\n                Please\n                ', '\n                to use Codespaces.\n              ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', '\n    If nothing happens, ', ' and try again.\n  ', 'Your codespace will open once ready.', 'There was a problem preparing your codespace, please try again.', ""This regex implementation is backwards-compatible with the standard 're' module, but offers additional functionality."", ""The re module's behaviour with zero-width matches changed in Python 3.7, and this module follows that behaviour when compiled for Python 3.7."", 'Python 2 is no longer supported. The last release that supported Python 2 was 2021.11.10.', ""This module is targeted at CPython. It expects that all codepoints are the same width, so it won't behave properly with PyPy outside U+0000..U+007F because PyPy stores strings as UTF-8."", 'The regex module releases the GIL during matching on instances of the built-in (immutable) string classes, enabling other Python threads to run concurrently. It is also possible to force the regex module to release the GIL during matching by calling the matching methods with the keyword argument ', '. The behaviour is undefined if the string changes during matching, so use it ', "" when it is guaranteed that that won't happen."", 'This module supports Unicode 15.0.0. Full Unicode case-folding is supported.', 'There are 2 kinds of flag: scoped and global. Scoped flags can apply to only part of a pattern and can be turned on or off; global flags apply to the entire pattern and can only be turned on.', 'The scoped flags are: ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', ', '.', 'The global flags are: ', ', ', ', ', ', ', ', ', ', ', '.', 'If neither the ', ', ', ' nor ', ' flag is specified, it will default to ', ' if the regex pattern is a Unicode string and ', "" if it's a bytestring."", 'The ', ' flag makes fuzzy matching attempt to improve the fit of the next match that it finds.', 'The ', ' flag makes fuzzy matching search for the best match instead of the next match.', 'In order to be compatible with the re module, this module has 2 behaviours:', ' behaviour (old behaviour, compatible with the re module):', ""Please note that the re module's behaviour may change over time, and I'll endeavour to match that behaviour in version 0."", ' behaviour (new behaviour, possibly different from the re module):', 'If no version is specified, the regex module will default to ', '.', 'The regex module supports both simple and full case-folding for case-insensitive matches in Unicode. Use of full case-folding can be turned on using the ', ' flag. Please note that this flag affects how the ', ' flag works; the ', ' flag itself does not turn on case-insensitive matching.', 'Version 0 behaviour: the flag is off by default.', 'Version 1 behaviour: the flag is on by default.', ""It's not possible to support both simple sets, as used in the re module, and nested sets at the same time because of a difference in the meaning of an unescaped "", ' in a set.', 'For example, the pattern ', ' is treated in the version 0 behaviour (simple sets, compatible with the re module) as:', 'but in the version 1 behaviour (nested sets, enhanced behaviour) as:', 'Version 0 behaviour: only simple sets are supported.', 'Version 1 behaviour: nested sets and set operations are supported.', 'All groups have a group number, starting from 1.', 'Groups with the same group name will have the same group number, and groups with a different group name will have a different group number.', ""The same name can be used by more than one group, with later captures 'overwriting' earlier captures. All the captures of the group will be available from the "", ' method of the match object.', 'Group numbers will be reused across different branches of a branch reset, eg. ', ' has only group 1. If groups have different group names then they will, of course, have different group numbers, eg. ', ' has group 1 (""foo"") and group 2 (""bar"").', 'In the regex ', ' there are 2 groups:', 'If you want to prevent ', ' from being group 2, you need to name it (different name, different group number).', 'The issue numbers relate to the Python bug tracker, except where listed otherwise.', ' or ', ' matches horizontal whitespace and ', ' or ', ' matches vertical whitespace.', 'The test of a conditional pattern can be a lookaround.', 'This is not quite the same as putting a lookaround in the first branch of a pair of alternatives.', 'In the first example, the lookaround matched, but the remainder of the first branch failed to match, and so the second branch was attempted, whereas in the second example, the lookaround matched, and the first branch failed to match, but the second branch was ', ' attempted.', 'The POSIX standard for regex is to return the leftmost longest match. This can be turned on using the ', ' flag.', ""Note that it will take longer to find matches because when it finds a match at a certain position, it won't return that immediately, but will keep looking to see if there's another longer match there."", 'If there\'s no group called ""DEFINE"", then ... will be ignored except that any groups defined within it can be called and that the normal rules for numbering groups still apply.', "" discards the backtracking info up to that point. When used in an atomic group or a lookaround, it won't affect the enclosing pattern."", ' is similar to ', "", except that it also sets where in the text the next attempt to match will start. When used in an atomic group or a lookaround, it won't affect the enclosing pattern."", ' causes immediate backtracking. ', ' is a permitted abbreviation.', 'Keeps the part of the entire match after the position where ', ' occurred; the part before it is discarded.', 'It does not affect what groups return.', 'You can use subscripting to get the captures of a repeated group.', 'This is in addition to the existing ', '.', 'The ', "" flag is intended for legacy code and has limited support. You're still recommended to use Unicode instead."", 'A partial match is one that matches up to the end of string, but that string has been truncated and you want to know whether a complete match could be possible if the string had not been truncated.', 'Partial matches are supported by ', ', ', ', ', ' and ', ' with the ', ' keyword argument.', 'Match objects have a ', ' attribute, which is ', "" if it's a partial match."", 'For example, if you wanted a user to enter a 4-digit number and check it character by character as it was being entered:', ""Sometimes it's not clear how zero-width matches should be handled. For example, should "", ' match 0 characters directly after matching >0 characters?', ' is a combination of ', ' and ', ':', ' returns a dict of the named groups and the last capture of those groups.', ' returns a list of all the captures of a group', ' returns a dict of the named groups and lists of all the captures of those groups.', ' returns a list of all the captures of all the groups.', ' returns a list of all the spans of the all captures of all the groups.', 'Group names can be duplicated.', ' behaves like ', ', except that it must match all of the string.', ' and ', ' are alternatives to ', ' and ', ' respectively. When passed a replacement string, they treat it as a format string.', ' is an alternative to ', '. When passed a replacement string, it treats it as a format string.', 'A match object contains a reference to the string that was searched, via its ', ' attribute. The ', "" method will 'detach' that string, making it available for garbage collection, which might save valuable memory if that string is very large."", 'Recursive and repeated patterns are supported.', ' or ', ' tries to match the entire regex recursively. ', ', ', ', etc, try to match the relevant group.', ' tries to match the named group.', 'The first two examples show how the subpattern within the group is reused, but is _not_ itself a group. In other words, ', ' is equivalent to ', '.', ""It's possible to backtrack into a recursed or repeated group."", ""You can't call a group if there is more than one group with that group name or group number ("", ').', 'The alternative forms ', ' and ', ' are also supported.', 'In version 1 behaviour, the regex module uses full case-folding when performing case-insensitive matches in Unicode.', 'In version 0 behaviour, it uses simple case-folding for backward compatibility with the re module.', 'Regex usually attempts an exact match, but sometimes an approximate, or ""fuzzy"", match is needed, for those cases where the text being searched may contain errors in the form of inserted, deleted or substituted characters.', 'A fuzzy regex specifies which types of errors are permitted, and, optionally, either the minimum and maximum or only the maximum permitted number of each type. (You cannot specify only a minimum.)', 'The 3 types of error are:', 'In addition, ""e"" indicates any type of error.', 'The fuzziness of a regex item is specified between ""{"" and ""}"" after the item.', 'Examples:', 'If a certain type of error is specified, then any type not specified will ', ' be permitted.', ""In the following examples I'll omit the item and write only the fuzziness:"", ""It's also possible to state the costs of each type of error and the maximum permitted total cost."", 'Examples:', 'You can also use ""<"" instead of ""<="" if you want an exclusive minimum or maximum.', ""You can add a test to perform on a character that's substituted or inserted."", 'Examples:', 'By default, fuzzy matching searches for the first match that meets the given constraints. The ', ' flag will cause it to attempt to improve the fit (i.e. reduce the number of errors) of the match that it has found.', 'The ', ' flag will make it search for the best match instead.', 'Further examples to note:', 'In the first two examples there are perfect matches later in the string, but in neither case is it the first possible match.', 'The match object has an attribute ', ' which gives the total number of substitutions, insertions and deletions.', 'The match object also has an attribute ', ' which gives a tuple of the positions of the substitutions, insertions and deletions.', 'What this means is that if the matched part of the string had been:', ""it would've been an exact match."", 'However, there were insertions at positions 7 and 8:', 'and deletions at positions 10 and 11:', 'So the actual string was:', 'There are occasions where you may want to include a list (actually, a set) of options in a regex.', 'One way is to build the pattern like this:', 'but if the list is large, parsing the resulting regex can take considerable time, and care must also be taken that the strings are properly escaped and properly ordered, for example, ""cats"" before ""cat"".', 'The new alternative is to use a named list:', 'The order of the items is irrelevant, they are treated as a set. The named lists are available as the ', ' attribute of the pattern object :', 'If there are any unused keyword arguments, ', ' will be raised unless you tell it otherwise:', ' matches at the start of a word.', ' matches at the end of a word.', 'Compare with ', ', which matches at the start or end of a word.', 'Normally the only line separator is ', ' (', '), but if the ', ' flag is turned on then the line separators are ', ', ', ', ', ', ', ' and ', ', plus ', ', ', ' and ', ' when working with Unicode.', 'This affects the regex dot ', ', which, with the ', ' flag turned off, matches any character except a line separator. It also affects the line anchors ', ' and ', ' (in multiline mode).', 'Set operators have been added, and a set ', ' can include nested sets.', 'The operators, in order of increasing precedence, are:', 'Implicit union, ie, simple juxtaposition like in ', ', has the highest precedence. Thus, ', ' is the same as ', '.', 'Examples:', 'regex.escape has an additional keyword parameter ', "". When True, only 'special' regex characters, such as '?', are escaped."", 'regex.escape has an additional keyword parameter ', '. When True, spaces are not escaped.', 'A match object has additional methods which return information on all the successful matches of a repeated group. These methods are:', 'If the following pattern subsequently fails, then the subpattern as a whole will fail.', ' ; ', ' ; ', ' ; ', ""The subpattern is matched up to 'max' times. If the following pattern subsequently fails, then all the repeated subpatterns will fail as a whole. For example, "", ' is equivalent to ', '.', 'The flags will apply only to the subpattern. Flags can be turned on or off.', ""The definition of a 'word' character has been expanded for Unicode. It conforms to the Unicode specification at "", '.', 'A lookbehind can match a variable-length string.', ', ', ' and ', "" support a 'flags' argument."", ' and ', "" support 'pos' and 'endpos' arguments."", ' and ', "" support an 'overlapped' flag which permits overlapped matches."", "" has been added. It's a generator equivalent of "", '.', 'A match object accepts access to the groups via subscripting and slicing:', 'Groups can be named with ', ' as well as the existing ', '.', 'Groups can be referenced within a pattern with ', '. This also allows there to be more than 99 groups.', ""Named characters are supported. Note that only those known by Python's Unicode database will be recognised."", '; ', '; ', ' ; ', 'Many Unicode properties are supported, including blocks and scripts. ', ' or ', ' matches a character whose property ', ' has value ', '. The inverse of ', ' is ', ' or ', '.', 'If the short form ', ' is used, the properties are checked in the order: ', ', ', ', ', ', binary property:', 'A short form starting with ', ' indicates a script or binary property:', 'A short form starting with ', ' indicates a block property:', '; ', 'POSIX character classes are supported. These are normally treated as an alternative form of ', '.', 'The exceptions are ', ', ', ', ', ' and ', ', whose definitions are different from those of Unicode.', ' is equivalent to ', '.', ' is equivalent to ', '.', ' is equivalent to ', '.', ' is equivalent to ', '.', 'A search anchor has been added. It matches at the position where each search started/continued and can be used for contiguous matches or in negative variable-length lookbehinds to limit how far back the lookbehind goes:', 'Searches can also work backwards:', 'Note that the result of a reverse search is not necessarily the reverse of a forward search:', 'The grapheme matcher is supported. It conforms to the Unicode specification at ', '.', 'Group numbers will be reused across the alternatives, but groups with different names will have different group numbers.', 'Note that there is only one group.', 'The ', "" flag changes the definition of a 'word boundary' to that of a default Unicode word boundary. This applies to "", ' and ', '.', 'The matching methods and functions support timeouts. The timeout (in seconds) applies to the entire operation:', '\n      ', '\n      ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', 'Explore', '\n  ', '\n  ', '\n  ', '\n  ', '\n', '\n      ', '\n      ', 'For', '\n  ', '\n  ', '\n  ', '\n  ', 'By Solution', '\n  ', '\n  ', '\n  ', 'Case Studies', '\n  ', '\n  ', '\n', '\n      ', '\n      ', '\n  ', '\n  ', 'Repositories', '\n  ', '\n  ', '\n  ', '\n', '\n    ', '\n', '\n  ', '\n', '\n    ', '\n  ', '\n  ', '\n', '\n  ', '\n', '\n  ', '\n', '\n            ', '  ', '\n          ', '\n  ', '\n        ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n                ', '              ', '\n  ', '\n  ', '\n  ', '\n\n', '\n\n', '\n\n', '\n  ', '\n  ', '\n            ', '\n          ', '\n', '\n', 'Indicated by the ', ' flag.', 'Zero-width matches are not handled correctly in the re module before Python 3.7. The behaviour in those earlier versions is:', "" won't split a string at a zero-width match."", ' will advance by one character after a zero-width match.', '\n', ""Inline flags apply to the entire pattern, and they can't be turned off."", 'Only simple sets are supported.', 'Case-insensitive matches in Unicode use simple case-folding by default.', '\n', '\n', 'Indicated by the ', ' flag.', 'Zero-width matches are handled correctly.', 'Inline flags apply to the end of the group or pattern, and they can be turned off.', 'Nested sets and set operations are supported.', 'Case-insensitive matches in Unicode use full case-folding by default.', '\n', 'Set containing ""["" and the letters ""a"" to ""z""', 'Literal ""--""', 'Set containing letters ""a"", ""e"", ""i"", ""o"", ""u""', 'Literal ""]""', 'Set which is:', 'Set containing the letters ""a"" to ""z""', '\n', 'but excluding:', 'Set containing the letters ""a"", ""e"", ""i"", ""o"", ""u""', '\n', ' is group 1.', ' is group 2, also called ""foo"".', ' is group 2 because of the branch reset.', ' is group 2 because it\'s called ""foo"".', 'Insertion, indicated by ""i""', 'Deletion, indicated by ""d""', 'Substitution, indicated by ""s""', ' match ""foo"" exactly', ' match ""foo"", permitting insertions', ' match ""foo"", permitting deletions', ' match ""foo"", permitting substitutions', ' match ""foo"", permitting insertions and substitutions', ' match ""foo"", permitting errors', ' permit at most 3 deletions, but no other types', ' permit at most 1 insertion and at most 2 substitutions, but no deletions', ' permit at least 1 and at most 3 errors', ' permit at most 2 insertions, at most 2 deletions, at most 3 errors in total, but no substitutions', ' each insertion costs 2, each deletion costs 2, each substitution costs 1, the total cost must not exceed 4', ' at most 1 insertion, at most 1 deletion, at most 1 substitution; each insertion costs 2, each deletion costs 2, each substitution costs 1, the total cost must not exceed 4', ' at most 2 substitutions, which must be in the character set ', '.', ' at most 2 substitutions, at most 3 insertions, which must be digits.', ' returns ', ' because that matches ', ' with 3 errors (an unlimited number of errors is permitted).', ' returns ', ' (with a leading space) because that matches ', ' with 1 error, which is within the limit.', ' returns ', ' (without a leading space) because the fuzzy search matches ', ' with 1 error, which is within the limit, and the ', ' then it attempts a better fit.', ' for union (""x||y"" means ""x or y"")', ' (double tilde) for symmetric difference (""x~~y"" means ""x or y, but not both"")', ' for intersection (""x&&y"" means ""x and y"")', ' (double dash) for difference (""x--y"" means ""x but not y"")', "" # Set containing 'a' and 'b'"", "" # Set containing 'a' .. 'z'"", "" # Set containing 'a' .. 'z', but not 'q' or 'w'"", ' # Same as above', "" # Set containing all letters except 'Q' and 'W'"", "" # Set containing all numbers except '0' .. '9'"", ' # Set containing all characters which are ASCII and letter', 'Returns a list of the strings matched in a group or groups. Compare with ', '.', '\n', 'Returns a list of the start positions. Compare with ', '.', '\n', 'Returns a list of the end positions. Compare with ', '.', '\n', 'Returns a list of the spans. Compare with ', '.', '\n', "", the 'Latin' script ("", ').', "", the 'BasicLatin' block ("", ').', "", the 'Alphabetic' binary property ("", ').', "", the 'Latin' script ("", ').', "", the 'Alphabetic' binary property ("", ').', "", the 'BasicLatin' block ("", ').', ""The search starts at position 0 and matches 'ab'."", ""The search continues at position 2 and matches 'cd'."", 'The search continues at position 4 and fails to match any letters.', 'The anchor stops the search start position from being advanced, so there are no more results.', '\n      ', '\n      ', '    ', '\n      ', '\n      ', '    ', '\n        ', '\n    ', '\n        ', '\n    '])"
